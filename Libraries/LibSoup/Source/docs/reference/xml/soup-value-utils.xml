<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-24-GValue-Support">
<refmeta>
<refentrytitle role="top_of_page" id="libsoup-24-GValue-Support.top_of_page">GValue Support</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GValue Support</refname>
<refpurpose>#GValue utilities</refpurpose>
</refnamediv>

<refsynopsisdiv id="libsoup-24-GValue-Support.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="GHashTable">GHashTable</link> *        <link linkend="soup-value-hash-new">soup_value_hash_new</link>                 (void);
<link linkend="GHashTable">GHashTable</link> *        <link linkend="soup-value-hash-new-with-vals">soup_value_hash_new_with_vals</link>       (const <link linkend="char">char</link> *first_key,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-value-hash-insert-value">soup_value_hash_insert_value</link>        (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *key,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="soup-value-hash-insert">soup_value_hash_insert</link>              (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *key,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-value-hash-insert-vals">soup_value_hash_insert_vals</link>         (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *first_key,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-value-hash-lookup">soup_value_hash_lookup</link>              (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *key,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-value-hash-lookup-vals">soup_value_hash_lookup_vals</link>         (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *first_key,
                                                         ...);

<link linkend="GValueArray">GValueArray</link> *       <link linkend="soup-value-array-from-args">soup_value_array_from_args</link>          (<link linkend="va-list">va_list</link> args);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-value-array-to-args">soup_value_array_to_args</link>            (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="va-list">va_list</link> args);
<link linkend="GValueArray">GValueArray</link> *       <link linkend="soup-value-array-new">soup_value_array_new</link>                (void);
<link linkend="GValueArray">GValueArray</link> *       <link linkend="soup-value-array-new-with-vals">soup_value_array_new_with_vals</link>      (<link linkend="GType">GType</link> first_type,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-value-array-insert">soup_value_array_insert</link>             (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="guint">guint</link> index_,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-value-array-append">soup_value_array_append</link>             (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-value-array-append-vals">soup_value_array_append_vals</link>        (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="GType">GType</link> first_type,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-value-array-get-nth">soup_value_array_get_nth</link>            (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="guint">guint</link> index_,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);

#define             <link linkend="SOUP-VALUE-SETV--CAPS">SOUP_VALUE_SETV</link>                     (val, type, args)
#define             <link linkend="SOUP-VALUE-GETV--CAPS">SOUP_VALUE_GETV</link>                     (val, type, args)

#define             <link linkend="SOUP-TYPE-BYTE-ARRAY--CAPS">SOUP_TYPE_BYTE_ARRAY</link>
</synopsis>
</refsynopsisdiv>









<refsect1 id="libsoup-24-GValue-Support.description" role="desc">
<title role="desc.title">Description</title>
<para>
These methods are useful for manipulating <link linkend="GValue"><type>GValue</type></link><!-- -->s, and in
particular, arrays and hash tables of <link linkend="GValue"><type>GValue</type></link><!-- -->s, in a
slightly nicer way than the standard <link linkend="GValue"><type>GValue</type></link> API.
</para>
<para>
They are written for use with soup-xmlrpc, but they also work with
types not used by XML-RPC.</para>
<para>
</para>
</refsect1>

<refsect1 id="libsoup-24-GValue-Support.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="soup-value-hash-new" role="function">
<title>soup_value_hash_new ()</title>
<indexterm zone="soup-value-hash-new"><primary sortas="soup_value_hash_new">soup_value_hash_new</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link> *        soup_value_hash_new                 (void);</programlisting>
<para>
Creates a <link linkend="GHashTable"><type>GHashTable</type></link> whose keys are strings and whose values
are <link linkend="GValue"><type>GValue</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new empty <link linkend="GHashTable"><type>GHashTable</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-hash-new-with-vals" role="function">
<title>soup_value_hash_new_with_vals ()</title>
<indexterm zone="soup-value-hash-new-with-vals"><primary sortas="soup_value_hash_new_with_vals">soup_value_hash_new_with_vals</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link> *        soup_value_hash_new_with_vals       (const <link linkend="char">char</link> *first_key,
                                                         ...);</programlisting>
<para>
Creates a <link linkend="GHashTable"><type>GHashTable</type></link> whose keys are strings and whose values
are <link linkend="GValue"><type>GValue</type></link>, and initializes it with the provided data. As
with <link linkend="soup-value-hash-insert"><function>soup_value_hash_insert()</function></link>, the keys and values are copied
rather than being inserted directly.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>first_key</parameter>&#160;:</term>
<listitem><simpara> the key for the first value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the type of <parameter>first_key</parameter>, followed by the value, followed
by additional key/type/value triplets, terminated by <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="GHashTable"><type>GHashTable</type></link>, initialized with the given values
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-hash-insert-value" role="function">
<title>soup_value_hash_insert_value ()</title>
<indexterm zone="soup-value-hash-insert-value"><primary sortas="soup_value_hash_insert_value">soup_value_hash_insert_value</primary></indexterm><programlisting><link linkend="void">void</link>                soup_value_hash_insert_value        (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *key,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Inserts <parameter>value</parameter> into <parameter>hash</parameter>. (Unlike with <link linkend="g-hash-table-insert"><function>g_hash_table_insert()</function></link>, both
the key and the value are copied).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> a value hash
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-hash-insert" role="function">
<title>soup_value_hash_insert ()</title>
<indexterm zone="soup-value-hash-insert"><primary sortas="soup_value_hash_insert">soup_value_hash_insert</primary></indexterm><programlisting><link linkend="void">void</link>                soup_value_hash_insert              (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *key,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Inserts the provided value of type <parameter>type</parameter> into <parameter>hash</parameter>. (Unlike with
<link linkend="g-hash-table-insert"><function>g_hash_table_insert()</function></link>, both the key and the value are copied).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> a value hash
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> a value of type <parameter>type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-hash-insert-vals" role="function">
<title>soup_value_hash_insert_vals ()</title>
<indexterm zone="soup-value-hash-insert-vals"><primary sortas="soup_value_hash_insert_vals">soup_value_hash_insert_vals</primary></indexterm><programlisting><link linkend="void">void</link>                soup_value_hash_insert_vals         (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *first_key,
                                                         ...);</programlisting>
<para>
Inserts the given data into <parameter>hash</parameter>. As with
<link linkend="soup-value-hash-insert"><function>soup_value_hash_insert()</function></link>, the keys and values are copied rather
than being inserted directly.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> a value hash
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_key</parameter>&#160;:</term>
<listitem><simpara> the key for the first value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the type of <parameter>first_key</parameter>, followed by the value, followed
by additional key/type/value triplets, terminated by <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-hash-lookup" role="function">
<title>soup_value_hash_lookup ()</title>
<indexterm zone="soup-value-hash-lookup"><primary sortas="soup_value_hash_lookup">soup_value_hash_lookup</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_value_hash_lookup              (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *key,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Looks up <parameter>key</parameter> in <parameter>hash</parameter> and stores its value into the provided
location.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> a value hash
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the key to look up
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> a value of type pointer-to-<parameter>type</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>hash</parameter> contained a value with key <parameter>key</parameter> and
type <parameter>type</parameter>, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-hash-lookup-vals" role="function">
<title>soup_value_hash_lookup_vals ()</title>
<indexterm zone="soup-value-hash-lookup-vals"><primary sortas="soup_value_hash_lookup_vals">soup_value_hash_lookup_vals</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_value_hash_lookup_vals         (<link linkend="GHashTable">GHashTable</link> *hash,
                                                         const <link linkend="char">char</link> *first_key,
                                                         ...);</programlisting>
<para>
Looks up a number of keys in <parameter>hash</parameter> and returns their values.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> a value hash
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_key</parameter>&#160;:</term>
<listitem><simpara> the first key to look up
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the type of <parameter>first_key</parameter>, a pointer to that type, and
then additional key/type/pointer triplets, terminated
by <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if all of the keys were found, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
if any were missing; note that you will generally need to
initialize each destination variable to a reasonable default
value, since there is no way to tell which keys were found
and which were not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-from-args" role="function">
<title>soup_value_array_from_args ()</title>
<indexterm zone="soup-value-array-from-args"><primary sortas="soup_value_array_from_args">soup_value_array_from_args</primary></indexterm><programlisting><link linkend="GValueArray">GValueArray</link> *       soup_value_array_from_args          (<link linkend="va-list">va_list</link> args);</programlisting>
<para>
Creates a <link linkend="GValueArray"><type>GValueArray</type></link> from the provided arguments, which must
consist of pairs of a <link linkend="GType"><type>GType</type></link> and a value of that type, terminated
by <link linkend="G-TYPE-INVALID--CAPS"><literal>G_TYPE_INVALID</literal></link>. (The array will contain copies of the provided
data rather than pointing to the passed-in data directly.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>args</parameter>&#160;:</term>
<listitem><simpara> arguments to create a <link linkend="GValueArray"><type>GValueArray</type></link> from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="GValueArray"><type>GValueArray</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if an error occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-to-args" role="function">
<title>soup_value_array_to_args ()</title>
<indexterm zone="soup-value-array-to-args"><primary sortas="soup_value_array_to_args">soup_value_array_to_args</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_value_array_to_args            (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="va-list">va_list</link> args);</programlisting>
<para>
Extracts a <link linkend="GValueArray"><type>GValueArray</type></link> into the provided arguments, which must
consist of pairs of a <link linkend="GType"><type>GType</type></link> and a value of pointer-to-that-type,
terminated by <link linkend="G-TYPE-INVALID--CAPS"><literal>G_TYPE_INVALID</literal></link>. The returned values will point to the
same memory as the values in the array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValueArray"><type>GValueArray</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>args</parameter>&#160;:</term>
<listitem><simpara> arguments to extract <parameter>array</parameter> into
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> success or failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-new" role="function">
<title>soup_value_array_new ()</title>
<indexterm zone="soup-value-array-new"><primary sortas="soup_value_array_new">soup_value_array_new</primary></indexterm><programlisting><link linkend="GValueArray">GValueArray</link> *       soup_value_array_new                (void);</programlisting>
<para>
Creates a new <link linkend="GValueArray"><literal>GValueArray</literal></link>. (This is just a wrapper around
<link linkend="g-value-array-new"><function>g_value_array_new()</function></link>, for naming consistency purposes.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="GValueArray"><literal>GValueArray</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-new-with-vals" role="function">
<title>soup_value_array_new_with_vals ()</title>
<indexterm zone="soup-value-array-new-with-vals"><primary sortas="soup_value_array_new_with_vals">soup_value_array_new_with_vals</primary></indexterm><programlisting><link linkend="GValueArray">GValueArray</link> *       soup_value_array_new_with_vals      (<link linkend="GType">GType</link> first_type,
                                                         ...);</programlisting>
<para>
Creates a new <link linkend="GValueArray"><literal>GValueArray</literal></link> and copies the provided values
into it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>first_type</parameter>&#160;:</term>
<listitem><simpara> the type of the first value to add
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the first value to add, followed by other type/value
pairs, terminated by <link linkend="G-TYPE-INVALID--CAPS"><literal>G_TYPE_INVALID</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="GValueArray"><literal>GValueArray</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-insert" role="function">
<title>soup_value_array_insert ()</title>
<indexterm zone="soup-value-array-insert"><primary sortas="soup_value_array_insert">soup_value_array_insert</primary></indexterm><programlisting><link linkend="void">void</link>                soup_value_array_insert             (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="guint">guint</link> index_,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Inserts the provided value of type <parameter>type</parameter> into <parameter>array</parameter> as with
<link linkend="g-value-array-insert"><function>g_value_array_insert()</function></link>. (The provided data is copied rather than
being inserted directly.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValueArray"><type>GValueArray</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index_</parameter>&#160;:</term>
<listitem><simpara> the index to insert at
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> a value of type <parameter>type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-append" role="function">
<title>soup_value_array_append ()</title>
<indexterm zone="soup-value-array-append"><primary sortas="soup_value_array_append">soup_value_array_append</primary></indexterm><programlisting><link linkend="void">void</link>                soup_value_array_append             (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Appends the provided value of type <parameter>type</parameter> to <parameter>array</parameter> as with
<link linkend="g-value-array-append"><function>g_value_array_append()</function></link>. (The provided data is copied rather than
being inserted directly.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValueArray"><type>GValueArray</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> a value of type <parameter>type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-append-vals" role="function">
<title>soup_value_array_append_vals ()</title>
<indexterm zone="soup-value-array-append-vals"><primary sortas="soup_value_array_append_vals">soup_value_array_append_vals</primary></indexterm><programlisting><link linkend="void">void</link>                soup_value_array_append_vals        (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="GType">GType</link> first_type,
                                                         ...);</programlisting>
<para>
Appends the provided values into <parameter>array</parameter> as with
<link linkend="g-value-array-append"><function>g_value_array_append()</function></link>. (The provided data is copied rather than
being inserted directly.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValueArray"><type>GValueArray</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_type</parameter>&#160;:</term>
<listitem><simpara> the type of the first value to add
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the first value to add, followed by other type/value
pairs, terminated by <link linkend="G-TYPE-INVALID--CAPS"><literal>G_TYPE_INVALID</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-value-array-get-nth" role="function">
<title>soup_value_array_get_nth ()</title>
<indexterm zone="soup-value-array-get-nth"><primary sortas="soup_value_array_get_nth">soup_value_array_get_nth</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_value_array_get_nth            (<link linkend="GValueArray">GValueArray</link> *array,
                                                         <link linkend="guint">guint</link> index_,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Gets the <parameter>index_</parameter> element of <parameter>array</parameter> and stores its value into the
provided location.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValueArray"><type>GValueArray</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index_</parameter>&#160;:</term>
<listitem><simpara> the index to look up
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> a value of type pointer-to-<parameter>type</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>array</parameter> contained a value with index <parameter>index_</parameter>
and type <parameter>type</parameter>, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-VALUE-SETV--CAPS" role="macro">
<title>SOUP_VALUE_SETV()</title>
<indexterm zone="SOUP-VALUE-SETV--CAPS"><primary sortas="SOUP_VALUE_SETV">SOUP_VALUE_SETV</primary></indexterm><programlisting>#define             SOUP_VALUE_SETV(val, type, args)</programlisting>
<para>
Copies an argument of type <parameter>type</parameter> from <parameter>args</parameter> into <parameter>val</parameter>. <parameter>val</parameter> will
point directly to the value in <parameter>args</parameter> rather than copying it, so you
must <link linkend="g-value-copy"><function>g_value_copy()</function></link> it if you want it to remain valid.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>args</parameter>&#160;:</term>
<listitem><simpara> <link linkend="va-list"><type>va_list</type></link> pointing to a value of type <parameter>type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-VALUE-GETV--CAPS" role="macro">
<title>SOUP_VALUE_GETV()</title>
<indexterm zone="SOUP-VALUE-GETV--CAPS"><primary sortas="SOUP_VALUE_GETV">SOUP_VALUE_GETV</primary></indexterm><programlisting>#define             SOUP_VALUE_GETV(val, type, args)</programlisting>
<para>
Extracts a value of type <parameter>type</parameter> from <parameter>val</parameter> into <parameter>args</parameter>. The return
value will point to the same data as <parameter>val</parameter> rather than being a copy
of it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GType"><type>GType</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>args</parameter>&#160;:</term>
<listitem><simpara> <link linkend="va-list"><type>va_list</type></link> pointing to a value of type pointer-to-<parameter>type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-TYPE-BYTE-ARRAY--CAPS" role="macro">
<title>SOUP_TYPE_BYTE_ARRAY</title>
<indexterm zone="SOUP-TYPE-BYTE-ARRAY--CAPS"><primary sortas="SOUP_TYPE_BYTE_ARRAY">SOUP_TYPE_BYTE_ARRAY</primary></indexterm><programlisting>#define SOUP_TYPE_BYTE_ARRAY (soup_byte_array_get_type ())
</programlisting>
<para>
glib does not define a <link linkend="GType"><type>GType</type></link> for <link linkend="GByteArray"><type>GByteArray</type></link>, so libsoup
defines this one itself.</para>
<para>
</para></refsect2>

</refsect1>




</refentry>

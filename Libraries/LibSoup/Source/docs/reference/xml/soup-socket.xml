<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupSocket">
<refmeta>
<refentrytitle role="top_of_page" id="SoupSocket.top_of_page">SoupSocket</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupSocket</refname>
<refpurpose>A network socket</refpurpose>
</refnamediv>

<refsynopsisdiv id="SoupSocket.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="SoupSocket-struct">SoupSocket</link>;
<link linkend="SoupSocket">SoupSocket</link> *        <link linkend="soup-socket-new">soup_socket_new</link>                     (const <link linkend="char">char</link> *optname1,
                                                         ...);

<link linkend="void">void</link>                (<link linkend="SoupSocketCallback">*SoupSocketCallback</link>)               (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="guint">guint</link> status,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-socket-connect-async">soup_socket_connect_async</link>           (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="SoupSocketCallback">SoupSocketCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="guint">guint</link>               <link linkend="soup-socket-connect-sync">soup_socket_connect_sync</link>            (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable);

<link linkend="gboolean">gboolean</link>            <link linkend="soup-socket-listen">soup_socket_listen</link>                  (<link linkend="SoupSocket">SoupSocket</link> *sock);

<link linkend="gboolean">gboolean</link>            <link linkend="soup-socket-start-ssl">soup_socket_start_ssl</link>               (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-socket-start-proxy-ssl">soup_socket_start_proxy_ssl</link>         (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         const <link linkend="char">char</link> *ssl_host,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-socket-is-ssl">soup_socket_is_ssl</link>                  (<link linkend="SoupSocket">SoupSocket</link> *sock);

<link linkend="void">void</link>                <link linkend="soup-socket-disconnect">soup_socket_disconnect</link>              (<link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-socket-is-connected">soup_socket_is_connected</link>            (<link linkend="SoupSocket">SoupSocket</link> *sock);

<link linkend="SoupAddress">SoupAddress</link> *       <link linkend="soup-socket-get-local-address">soup_socket_get_local_address</link>       (<link linkend="SoupSocket">SoupSocket</link> *sock);
<link linkend="SoupAddress">SoupAddress</link> *       <link linkend="soup-socket-get-remote-address">soup_socket_get_remote_address</link>      (<link linkend="SoupSocket">SoupSocket</link> *sock);

enum                <link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>;
<link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>  <link linkend="soup-socket-read">soup_socket_read</link>                    (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gpointer">gpointer</link> buffer,
                                                         <link linkend="gsize">gsize</link> len,
                                                         <link linkend="gsize">gsize</link> *nread,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>  <link linkend="soup-socket-read-until">soup_socket_read_until</link>              (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gpointer">gpointer</link> buffer,
                                                         <link linkend="gsize">gsize</link> len,
                                                         <link linkend="gconstpointer">gconstpointer</link> boundary,
                                                         <link linkend="gsize">gsize</link> boundary_len,
                                                         <link linkend="gsize">gsize</link> *nread,
                                                         <link linkend="gboolean">gboolean</link> *got_boundary,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>  <link linkend="soup-socket-write">soup_socket_write</link>                   (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gconstpointer">gconstpointer</link> buffer,
                                                         <link linkend="gsize">gsize</link> len,
                                                         <link linkend="gsize">gsize</link> *nwrote,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);

#define             <link linkend="SOUP-SSL-ERROR--CAPS">SOUP_SSL_ERROR</link>
enum                <link linkend="SoupSSLError">SoupSSLError</link>;

#define             <link linkend="SOUP-SOCKET-LOCAL-ADDRESS--CAPS">SOUP_SOCKET_LOCAL_ADDRESS</link>
#define             <link linkend="SOUP-SOCKET-REMOTE-ADDRESS--CAPS">SOUP_SOCKET_REMOTE_ADDRESS</link>
#define             <link linkend="SOUP-SOCKET-FLAG-NONBLOCKING--CAPS">SOUP_SOCKET_FLAG_NONBLOCKING</link>
#define             <link linkend="SOUP-SOCKET-IS-SERVER--CAPS">SOUP_SOCKET_IS_SERVER</link>
#define             <link linkend="SOUP-SOCKET-SSL-CREDENTIALS--CAPS">SOUP_SOCKET_SSL_CREDENTIALS</link>
#define             <link linkend="SOUP-SOCKET-ASYNC-CONTEXT--CAPS">SOUP_SOCKET_ASYNC_CONTEXT</link>
#define             <link linkend="SOUP-SOCKET-TIMEOUT--CAPS">SOUP_SOCKET_TIMEOUT</link>
</synopsis>
</refsynopsisdiv>

<refsect1 id="SoupSocket.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----SoupSocket
</synopsis>
</refsect1>





<refsect1 id="SoupSocket.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="SoupSocket--async-context">async-context</link>&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only
  &quot;<link linkend="SoupSocket--is-server">is-server</link>&quot;                <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="SoupSocket--local-address">local-address</link>&quot;            <link linkend="SoupAddress">SoupAddress</link>*          : Read / Write / Construct Only
  &quot;<link linkend="SoupSocket--non-blocking">non-blocking</link>&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="SoupSocket--remote-address">remote-address</link>&quot;           <link linkend="SoupAddress">SoupAddress</link>*          : Read / Write / Construct Only
  &quot;<link linkend="SoupSocket--ssl-creds">ssl-creds</link>&quot;                <link linkend="gpointer">gpointer</link>              : Read / Write
  &quot;<link linkend="SoupSocket--timeout">timeout</link>&quot;                  <link linkend="guint">guint</link>                 : Read / Write
</synopsis>
</refsect1>

<refsect1 id="SoupSocket.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="SoupSocket-disconnected">disconnected</link>&quot;                                   : Run Last
  &quot;<link linkend="SoupSocket-new-connection">new-connection</link>&quot;                                 : Run First
  &quot;<link linkend="SoupSocket-readable">readable</link>&quot;                                       : Run Last
  &quot;<link linkend="SoupSocket-writable">writable</link>&quot;                                       : Run Last
</synopsis>
</refsect1>


<refsect1 id="SoupSocket.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupSocket"><type>SoupSocket</type></link> is libsoup's TCP socket type. While it is primarily
intended for internal use, <link linkend="SoupSocket"><type>SoupSocket</type></link><!-- -->s are exposed in the
API in various places, and some of their methods (eg,
<link linkend="soup-socket-get-remote-address"><function>soup_socket_get_remote_address()</function></link>) may be useful to applications.</para>
<para>
</para>
</refsect1>

<refsect1 id="SoupSocket.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SoupSocket-struct" role="struct">
<title>SoupSocket</title>
<indexterm zone="SoupSocket-struct"><primary sortas="SoupSocket">SoupSocket</primary></indexterm><programlisting>typedef struct _SoupSocket SoupSocket;</programlisting>
<para>
</para></refsect2>
<refsect2 id="soup-socket-new" role="function">
<title>soup_socket_new ()</title>
<indexterm zone="soup-socket-new"><primary sortas="soup_socket_new">soup_socket_new</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link> *        soup_socket_new                     (const <link linkend="char">char</link> *optname1,
                                                         ...);</programlisting>
<para>
Creates a new (disconnected) socket</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>optname1</parameter>&#160;:</term>
<listitem><simpara> name of first property to set (or <link linkend="NULL--CAPS"><literal>NULL</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> value of <parameter>optname1</parameter>, followed by additional property/value pairs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new socket
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SoupSocketCallback" role="function">
<title>SoupSocketCallback ()</title>
<indexterm zone="SoupSocketCallback"><primary sortas="SoupSocketCallback">SoupSocketCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*SoupSocketCallback)               (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="guint">guint</link> status,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The callback function passed to <link linkend="soup-socket-connect-async"><function>soup_socket_connect_async()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> an HTTP status code indicating success or failure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the data passed to <link linkend="soup-socket-connect-async"><function>soup_socket_connect_async()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-connect-async" role="function">
<title>soup_socket_connect_async ()</title>
<indexterm zone="soup-socket-connect-async"><primary sortas="soup_socket_connect_async">soup_socket_connect_async</primary></indexterm><programlisting><link linkend="void">void</link>                soup_socket_connect_async           (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="SoupSocketCallback">SoupSocketCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Begins asynchronously connecting to <parameter>sock</parameter>'s remote address. The
socket will call <parameter>callback</parameter> when it succeeds or fails (but not
before returning from this function).
</para>
<para>
If <parameter>cancellable</parameter> is non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, it can be used to cancel the
connection. <parameter>callback</parameter> will still be invoked in this case, with a
status of <link linkend="SOUP-STATUS-CANCELLED--CAPS"><literal>SOUP_STATUS_CANCELLED</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a client <link linkend="SoupSocket"><type>SoupSocket</type></link> (which must not already be connected)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback to call after connecting
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>callback</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-connect-sync" role="function">
<title>soup_socket_connect_sync ()</title>
<indexterm zone="soup-socket-connect-sync"><primary sortas="soup_socket_connect_sync">soup_socket_connect_sync</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_socket_connect_sync            (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Attempt to synchronously connect <parameter>sock</parameter> to its remote address.
</para>
<para>
If <parameter>cancellable</parameter> is non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, it can be used to cancel the
connection, in which case <link linkend="soup-socket-connect-sync"><function>soup_socket_connect_sync()</function></link> will return
<link linkend="SOUP-STATUS-CANCELLED--CAPS"><literal>SOUP_STATUS_CANCELLED</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a client <link linkend="SoupSocket"><type>SoupSocket</type></link> (which must not already be connected)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a success or failure code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-listen" role="function">
<title>soup_socket_listen ()</title>
<indexterm zone="soup-socket-listen"><primary sortas="soup_socket_listen">soup_socket_listen</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_socket_listen                  (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Makes <parameter>sock</parameter> start listening on its local address. When connections
come in, <parameter>sock</parameter> will emit <link linkend="new-connection"><literal>new_connection</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a server <link linkend="SoupSocket"><type>SoupSocket</type></link> (which must not already be connected or
listening)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether or not <parameter>sock</parameter> is now listening.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-start-ssl" role="function">
<title>soup_socket_start_ssl ()</title>
<indexterm zone="soup-socket-start-ssl"><primary sortas="soup_socket_start_ssl">soup_socket_start_ssl</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_socket_start_ssl               (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Starts using SSL on <parameter>socket</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> success or failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-start-proxy-ssl" role="function">
<title>soup_socket_start_proxy_ssl ()</title>
<indexterm zone="soup-socket-start-proxy-ssl"><primary sortas="soup_socket_start_proxy_ssl">soup_socket_start_proxy_ssl</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_socket_start_proxy_ssl         (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         const <link linkend="char">char</link> *ssl_host,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Starts using SSL on <parameter>socket</parameter>, expecting to find a host named
<parameter>ssl_host</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ssl_host</parameter>&#160;:</term>
<listitem><simpara> hostname of the SSL server
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> success or failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-is-ssl" role="function">
<title>soup_socket_is_ssl ()</title>
<indexterm zone="soup-socket-is-ssl"><primary sortas="soup_socket_is_ssl">soup_socket_is_ssl</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_socket_is_ssl                  (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Tests if <parameter>sock</parameter> is set up to do SSL. Note that this simply means
that the <link linkend="SOUP-SOCKET-SSL-CREDENTIALS--CAPS"><literal>SOUP_SOCKET_SSL_CREDENTIALS</literal></link> property has been set; it
does not mean that <link linkend="soup-socket-start-ssl"><function>soup_socket_start_ssl()</function></link> has been called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>sock</parameter> has SSL credentials set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-disconnect" role="function">
<title>soup_socket_disconnect ()</title>
<indexterm zone="soup-socket-disconnect"><primary sortas="soup_socket_disconnect">soup_socket_disconnect</primary></indexterm><programlisting><link linkend="void">void</link>                soup_socket_disconnect              (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Disconnects <parameter>sock</parameter>. Any further read or write attempts on it will
fail.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-is-connected" role="function">
<title>soup_socket_is_connected ()</title>
<indexterm zone="soup-socket-is-connected"><primary sortas="soup_socket_is_connected">soup_socket_is_connected</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_socket_is_connected            (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Tests if <parameter>sock</parameter> is connected to another host</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-get-local-address" role="function">
<title>soup_socket_get_local_address ()</title>
<indexterm zone="soup-socket-get-local-address"><primary sortas="soup_socket_get_local_address">soup_socket_get_local_address</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link> *       soup_socket_get_local_address       (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Returns the <link linkend="SoupAddress"><type>SoupAddress</type></link> corresponding to the local end of <parameter>sock</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-get-remote-address" role="function">
<title>soup_socket_get_remote_address ()</title>
<indexterm zone="soup-socket-get-remote-address"><primary sortas="soup_socket_get_remote_address">soup_socket_get_remote_address</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link> *       soup_socket_get_remote_address      (<link linkend="SoupSocket">SoupSocket</link> *sock);</programlisting>
<para>
Returns the <link linkend="SoupAddress"><type>SoupAddress</type></link> corresponding to the remote end of <parameter>sock</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSocket"><type>SoupSocket</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SoupSocketIOStatus" role="enum">
<title>enum SoupSocketIOStatus</title>
<indexterm zone="SoupSocketIOStatus"><primary sortas="SoupSocketIOStatus">SoupSocketIOStatus</primary></indexterm><programlisting>typedef enum {
	SOUP_SOCKET_OK,
	SOUP_SOCKET_WOULD_BLOCK,
	SOUP_SOCKET_EOF,
	SOUP_SOCKET_ERROR
} SoupSocketIOStatus;
</programlisting>
<para>
Return value from the <link linkend="SoupSocket"><type>SoupSocket</type></link> IO methods.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="SOUP-SOCKET-OK--CAPS" role="constant">
<term><literal>SOUP_SOCKET_OK</literal></term>
<listitem><simpara> Success
</simpara></listitem>
</varlistentry>
<varlistentry id="SOUP-SOCKET-WOULD-BLOCK--CAPS" role="constant">
<term><literal>SOUP_SOCKET_WOULD_BLOCK</literal></term>
<listitem><simpara> Cannot read/write any more at this time
</simpara></listitem>
</varlistentry>
<varlistentry id="SOUP-SOCKET-EOF--CAPS" role="constant">
<term><literal>SOUP_SOCKET_EOF</literal></term>
<listitem><simpara> End of file
</simpara></listitem>
</varlistentry>
<varlistentry id="SOUP-SOCKET-ERROR--CAPS" role="constant">
<term><literal>SOUP_SOCKET_ERROR</literal></term>
<listitem><simpara> Other error
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-read" role="function">
<title>soup_socket_read ()</title>
<indexterm zone="soup-socket-read"><primary sortas="soup_socket_read">soup_socket_read</primary></indexterm><programlisting><link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>  soup_socket_read                    (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gpointer">gpointer</link> buffer,
                                                         <link linkend="gsize">gsize</link> len,
                                                         <link linkend="gsize">gsize</link> *nread,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Attempts to read up to <parameter>len</parameter> bytes from <parameter>sock</parameter> into <parameter>buffer</parameter>. If some
data is successfully read, <link linkend="soup-socket-read"><function>soup_socket_read()</function></link> will return
<link linkend="SOUP-SOCKET-OK--CAPS"><literal>SOUP_SOCKET_OK</literal></link>, and *<parameter>nread</parameter> will contain the number of bytes
actually read (which may be less than <parameter>len</parameter>).
</para>
<para>
If <parameter>sock</parameter> is non-blocking, and no data is available, the return
value will be <link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link>. In this case, the caller
can connect to the <link linkend="SoupSocket-readable"><type>"readable"</type></link> signal to know when there
is more data to read. (NB: You MUST read all available data off the
socket first. <link linkend="SoupSocket-readable"><type>"readable"</type></link> is only emitted after
<link linkend="soup-socket-read"><function>soup_socket_read()</function></link> returns <link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link>, and it is only
emitted once. See the documentation for <link linkend="SoupSocket--non-blocking"><type>"non-blocking"</type></link>.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> buffer to read into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> size of <parameter>buffer</parameter> in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nread</parameter>&#160;:</term>
<listitem><simpara> on return, the number of bytes read into <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> error pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="SoupSocketIOStatus"><type>SoupSocketIOStatus</type></link>, as described above (or
<link linkend="SOUP-SOCKET-EOF--CAPS"><literal>SOUP_SOCKET_EOF</literal></link> if the socket is no longer connected, or
<link linkend="SOUP-SOCKET-ERROR--CAPS"><literal>SOUP_SOCKET_ERROR</literal></link> on any other error, in which case <parameter>error</parameter> will
also be set).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-read-until" role="function">
<title>soup_socket_read_until ()</title>
<indexterm zone="soup-socket-read-until"><primary sortas="soup_socket_read_until">soup_socket_read_until</primary></indexterm><programlisting><link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>  soup_socket_read_until              (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gpointer">gpointer</link> buffer,
                                                         <link linkend="gsize">gsize</link> len,
                                                         <link linkend="gconstpointer">gconstpointer</link> boundary,
                                                         <link linkend="gsize">gsize</link> boundary_len,
                                                         <link linkend="gsize">gsize</link> *nread,
                                                         <link linkend="gboolean">gboolean</link> *got_boundary,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Like <link linkend="soup-socket-read"><function>soup_socket_read()</function></link>, but reads no further than the first
occurrence of <parameter>boundary</parameter>. (If the boundary is found, it will be
included in the returned data, and *<parameter>got_boundary</parameter> will be set to
<link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.) Any data after the boundary will returned in future reads.
</para>
<para>
<link linkend="soup-socket-read-until"><function>soup_socket_read_until()</function></link> will almost always return fewer than <parameter>len</parameter>
bytes: if the boundary is found, then it will only return the bytes
up until the end of the boundary, and if the boundary is not found,
then it will leave the last <literal>(boundary_len - 1)</literal>
bytes in its internal buffer, in case they form the start of the
boundary string. Thus, <parameter>len</parameter> normally needs to be at least 1 byte
longer than <parameter>boundary_len</parameter> if you want to make any progress at all.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> buffer to read into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> size of <parameter>buffer</parameter> in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary</parameter>&#160;:</term>
<listitem><simpara> boundary to read until
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary_len</parameter>&#160;:</term>
<listitem><simpara> length of <parameter>boundary</parameter> in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nread</parameter>&#160;:</term>
<listitem><simpara> on return, the number of bytes read into <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>got_boundary</parameter>&#160;:</term>
<listitem><simpara> on return, whether or not the data in <parameter>buffer</parameter>
ends with the boundary string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> error pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> as for <link linkend="soup-socket-read"><function>soup_socket_read()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-socket-write" role="function">
<title>soup_socket_write ()</title>
<indexterm zone="soup-socket-write"><primary sortas="soup_socket_write">soup_socket_write</primary></indexterm><programlisting><link linkend="SoupSocketIOStatus">SoupSocketIOStatus</link>  soup_socket_write                   (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                         <link linkend="gconstpointer">gconstpointer</link> buffer,
                                                         <link linkend="gsize">gsize</link> len,
                                                         <link linkend="gsize">gsize</link> *nwrote,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Attempts to write <parameter>len</parameter> bytes from <parameter>buffer</parameter> to <parameter>sock</parameter>. If some data is
successfully written, the return status will be <link linkend="SOUP-SOCKET-OK--CAPS"><literal>SOUP_SOCKET_OK</literal></link>,
and *<parameter>nwrote</parameter> will contain the number of bytes actually written
(which may be less than <parameter>len</parameter>).
</para>
<para>
If <parameter>sock</parameter> is non-blocking, and no data could be written right away,
the return value will be <link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link>. In this case,
the caller can connect to the <link linkend="SoupSocket-writable"><type>"writable"</type></link> signal to know
when more data can be written. (NB: <link linkend="SoupSocket-writable"><type>"writable"</type></link> is only
emitted after <link linkend="soup-socket-write"><function>soup_socket_write()</function></link> returns <link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link>,
and it is only emitted once. See the documentation for
<link linkend="SoupSocket--non-blocking"><type>"non-blocking"</type></link>.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> data to write
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> size of <parameter>buffer</parameter>, in bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nwrote</parameter>&#160;:</term>
<listitem><simpara> on return, number of bytes written
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> error pointer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="SoupSocketIOStatus"><type>SoupSocketIOStatus</type></link>, as described above (or
<link linkend="SOUP-SOCKET-EOF--CAPS"><literal>SOUP_SOCKET_EOF</literal></link> or <link linkend="SOUP-SOCKET-ERROR--CAPS"><literal>SOUP_SOCKET_ERROR</literal></link>. <parameter>error</parameter> will be set if the
return value is <link linkend="SOUP-SOCKET-ERROR--CAPS"><literal>SOUP_SOCKET_ERROR</literal></link>.)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-SSL-ERROR--CAPS" role="macro">
<title>SOUP_SSL_ERROR</title>
<indexterm zone="SOUP-SSL-ERROR--CAPS"><primary sortas="SOUP_SSL_ERROR">SOUP_SSL_ERROR</primary></indexterm><programlisting>#define SOUP_SSL_ERROR soup_ssl_error_quark()
</programlisting>
<para>
A <link linkend="GError"><type>GError</type></link> domain representing an SSL error. Used with <link linkend="SoupSSLError"><type>SoupSSLError</type></link>.</para>
<para>
</para></refsect2>
<refsect2 id="SoupSSLError" role="enum">
<title>enum SoupSSLError</title>
<indexterm zone="SoupSSLError"><primary sortas="SoupSSLError">SoupSSLError</primary></indexterm><programlisting>typedef enum {
	SOUP_SSL_ERROR_HANDSHAKE_NEEDS_READ,
	SOUP_SSL_ERROR_HANDSHAKE_NEEDS_WRITE,
	SOUP_SSL_ERROR_CERTIFICATE
} SoupSSLError;
</programlisting>
<para>
SSL-related I/O errors.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="SOUP-SSL-ERROR-HANDSHAKE-NEEDS-READ--CAPS" role="constant">
<term><literal>SOUP_SSL_ERROR_HANDSHAKE_NEEDS_READ</literal></term>
<listitem><simpara> Internal error. Never exposed
outside of libsoup.
</simpara></listitem>
</varlistentry>
<varlistentry id="SOUP-SSL-ERROR-HANDSHAKE-NEEDS-WRITE--CAPS" role="constant">
<term><literal>SOUP_SSL_ERROR_HANDSHAKE_NEEDS_WRITE</literal></term>
<listitem><simpara> Internal error. Never exposed
outside of libsoup.
</simpara></listitem>
</varlistentry>
<varlistentry id="SOUP-SSL-ERROR-CERTIFICATE--CAPS" role="constant">
<term><literal>SOUP_SSL_ERROR_CERTIFICATE</literal></term>
<listitem><simpara> Indicates an error validating an SSL
certificate
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-SOCKET-LOCAL-ADDRESS--CAPS" role="macro">
<title>SOUP_SOCKET_LOCAL_ADDRESS</title>
<indexterm zone="SOUP-SOCKET-LOCAL-ADDRESS--CAPS"><primary sortas="SOUP_SOCKET_LOCAL_ADDRESS">SOUP_SOCKET_LOCAL_ADDRESS</primary></indexterm><programlisting>#define SOUP_SOCKET_LOCAL_ADDRESS    "local-address"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--local-address"><type>"local-address"</type></link> property. (Address
of local end of socket.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SOCKET-REMOTE-ADDRESS--CAPS" role="macro">
<title>SOUP_SOCKET_REMOTE_ADDRESS</title>
<indexterm zone="SOUP-SOCKET-REMOTE-ADDRESS--CAPS"><primary sortas="SOUP_SOCKET_REMOTE_ADDRESS">SOUP_SOCKET_REMOTE_ADDRESS</primary></indexterm><programlisting>#define SOUP_SOCKET_REMOTE_ADDRESS   "remote-address"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--remote-address"><type>"remote-address"</type></link> property. (Address
of remote end of socket.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SOCKET-FLAG-NONBLOCKING--CAPS" role="macro">
<title>SOUP_SOCKET_FLAG_NONBLOCKING</title>
<indexterm zone="SOUP-SOCKET-FLAG-NONBLOCKING--CAPS"><primary sortas="SOUP_SOCKET_FLAG_NONBLOCKING">SOUP_SOCKET_FLAG_NONBLOCKING</primary></indexterm><programlisting>#define SOUP_SOCKET_FLAG_NONBLOCKING "non-blocking"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--non-blocking"><type>"non-blocking"</type></link> property. (Whether
or not the socket uses non-blocking I/O.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SOCKET-IS-SERVER--CAPS" role="macro">
<title>SOUP_SOCKET_IS_SERVER</title>
<indexterm zone="SOUP-SOCKET-IS-SERVER--CAPS"><primary sortas="SOUP_SOCKET_IS_SERVER">SOUP_SOCKET_IS_SERVER</primary></indexterm><programlisting>#define SOUP_SOCKET_IS_SERVER        "is-server"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--is-server"><type>"is-server"</type></link> property. (Whether or
not the socket is a server socket.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SOCKET-SSL-CREDENTIALS--CAPS" role="macro">
<title>SOUP_SOCKET_SSL_CREDENTIALS</title>
<indexterm zone="SOUP-SOCKET-SSL-CREDENTIALS--CAPS"><primary sortas="SOUP_SOCKET_SSL_CREDENTIALS">SOUP_SOCKET_SSL_CREDENTIALS</primary></indexterm><programlisting>#define SOUP_SOCKET_SSL_CREDENTIALS  "ssl-creds"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--ssl-credentials"><type>"ssl-credentials"</type></link> property.
(SSL credential information.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SOCKET-ASYNC-CONTEXT--CAPS" role="macro">
<title>SOUP_SOCKET_ASYNC_CONTEXT</title>
<indexterm zone="SOUP-SOCKET-ASYNC-CONTEXT--CAPS"><primary sortas="SOUP_SOCKET_ASYNC_CONTEXT">SOUP_SOCKET_ASYNC_CONTEXT</primary></indexterm><programlisting>#define SOUP_SOCKET_ASYNC_CONTEXT    "async-context"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--async-context"><type>"async-context"</type></link> property. (The
socket's <link linkend="GMainContext"><type>GMainContext</type></link>.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SOCKET-TIMEOUT--CAPS" role="macro">
<title>SOUP_SOCKET_TIMEOUT</title>
<indexterm zone="SOUP-SOCKET-TIMEOUT--CAPS"><primary sortas="SOUP_SOCKET_TIMEOUT">SOUP_SOCKET_TIMEOUT</primary></indexterm><programlisting>#define SOUP_SOCKET_TIMEOUT	     "timeout"
</programlisting>
<para>
Alias for the <link linkend="SoupSocket--timeout"><type>"timeout"</type></link> property. (The timeout
in seconds for blocking socket I/O operations.)</para>
<para>
</para></refsect2>

</refsect1>
<refsect1 id="SoupSocket.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="SoupSocket--async-context" role="property"><title>The <literal>&quot;async-context&quot;</literal> property</title>
<indexterm zone="SoupSocket--async-context"><primary sortas="SoupSocket:async-context">SoupSocket:async-context</primary></indexterm><programlisting>  &quot;async-context&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only</programlisting>
<para>The GMainContext to dispatch this socket's async I/O in.</para></refsect2>
<refsect2 id="SoupSocket--is-server" role="property"><title>The <literal>&quot;is-server&quot;</literal> property</title>
<indexterm zone="SoupSocket--is-server"><primary sortas="SoupSocket:is-server">SoupSocket:is-server</primary></indexterm><programlisting>  &quot;is-server&quot;                <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>Whether or not the socket is a server socket.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="SoupSocket--local-address" role="property"><title>The <literal>&quot;local-address&quot;</literal> property</title>
<indexterm zone="SoupSocket--local-address"><primary sortas="SoupSocket:local-address">SoupSocket:local-address</primary></indexterm><programlisting>  &quot;local-address&quot;            <link linkend="SoupAddress">SoupAddress</link>*          : Read / Write / Construct Only</programlisting>
<para>Address of local end of socket.</para></refsect2>
<refsect2 id="SoupSocket--non-blocking" role="property"><title>The <literal>&quot;non-blocking&quot;</literal> property</title>
<indexterm zone="SoupSocket--non-blocking"><primary sortas="SoupSocket:non-blocking">SoupSocket:non-blocking</primary></indexterm><programlisting>  &quot;non-blocking&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Whether or not the socket uses non-blocking I/O.
</para>
<para>
<link linkend="SoupSocket"><type>SoupSocket</type></link>'s I/O methods are designed around the idea of
using a single codepath for both synchronous and
asynchronous I/O. If you want to read off a <link linkend="SoupSocket"><type>SoupSocket</type></link>,
the "correct" way to do it is to call <link linkend="soup-socket-read"><function>soup_socket_read()</function></link> or
<link linkend="soup-socket-read-until"><function>soup_socket_read_until()</function></link> repeatedly until you have read
everything you want. If it returns <link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link>
at any point, stop reading and wait for it to emit the
<link linkend="SoupSocket-readable"><type>"readable"</type></link> signal. Then go back to the
reading-as-much-as-you-can loop. Likewise, for writing to a
<link linkend="SoupSocket"><type>SoupSocket</type></link>, you should call <link linkend="soup-socket-write"><function>soup_socket_write()</function></link> either
until you have written everything, or it returns
<link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link> (in which case you wait for
<link linkend="SoupSocket-writable"><type>"writable"</type></link> and then go back into the loop).
</para>
<para>
Code written this way will work correctly with both
blocking and non-blocking sockets; blocking sockets will
simply never return <link linkend="SOUP-SOCKET-WOULD-BLOCK--CAPS"><literal>SOUP_SOCKET_WOULD_BLOCK</literal></link>, and so the
code that handles that case just won't get used for them.</para>
<para>
</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="SoupSocket--remote-address" role="property"><title>The <literal>&quot;remote-address&quot;</literal> property</title>
<indexterm zone="SoupSocket--remote-address"><primary sortas="SoupSocket:remote-address">SoupSocket:remote-address</primary></indexterm><programlisting>  &quot;remote-address&quot;           <link linkend="SoupAddress">SoupAddress</link>*          : Read / Write / Construct Only</programlisting>
<para>Address of remote end of socket.</para></refsect2>
<refsect2 id="SoupSocket--ssl-creds" role="property"><title>The <literal>&quot;ssl-creds&quot;</literal> property</title>
<indexterm zone="SoupSocket--ssl-creds"><primary sortas="SoupSocket:ssl-creds">SoupSocket:ssl-creds</primary></indexterm><programlisting>  &quot;ssl-creds&quot;                <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>SSL credential information, passed from the session to the SSL implementation.</para></refsect2>
<refsect2 id="SoupSocket--timeout" role="property"><title>The <literal>&quot;timeout&quot;</literal> property</title>
<indexterm zone="SoupSocket--timeout"><primary sortas="SoupSocket:timeout">SoupSocket:timeout</primary></indexterm><programlisting>  &quot;timeout&quot;                  <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>Value in seconds to timeout a blocking I/O.</para><para>Default value: 0</para>
</refsect2>
</refsect1>

<refsect1 id="SoupSocket.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="SoupSocket-disconnected" role="signal"><title>The <literal>&quot;disconnected&quot;</literal> signal</title>
<indexterm zone="SoupSocket-disconnected"><primary sortas="SoupSocket::disconnected">SoupSocket::disconnected</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run Last</programlisting>
<para>
Emitted when the socket is disconnected, for whatever
reason.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="SoupSocket-new-connection" role="signal"><title>The <literal>&quot;new-connection&quot;</literal> signal</title>
<indexterm zone="SoupSocket-new-connection"><primary sortas="SoupSocket::new-connection">SoupSocket::new-connection</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                        <link linkend="SoupSocket">SoupSocket</link> *new,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run First</programlisting>
<para>
Emitted when a listening socket (set up with
<link linkend="soup-socket-listen"><function>soup_socket_listen()</function></link>) receives a new connection.
</para>
<para>
You must ref the <parameter>new</parameter> if you want to keep it; otherwise it
will be destroyed after the signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new</parameter>&#160;:</term>
<listitem><simpara> the new socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="SoupSocket-readable" role="signal"><title>The <literal>&quot;readable&quot;</literal> signal</title>
<indexterm zone="SoupSocket-readable"><primary sortas="SoupSocket::readable">SoupSocket::readable</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run Last</programlisting>
<para>
Emitted when an async socket is readable. See
<link linkend="soup-socket-read"><function>soup_socket_read()</function></link>, <link linkend="soup-socket-read-until"><function>soup_socket_read_until()</function></link> and
<link linkend="SoupSocket--non-blocking"><type>"non-blocking"</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="SoupSocket-writable" role="signal"><title>The <literal>&quot;writable&quot;</literal> signal</title>
<indexterm zone="SoupSocket-writable"><primary sortas="SoupSocket::writable">SoupSocket::writable</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSocket">SoupSocket</link> *sock,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run Last</programlisting>
<para>
Emitted when an async socket is writable. See
<link linkend="soup-socket-write"><function>soup_socket_write()</function></link> and <link linkend="SoupSocket--non-blocking"><type>"non-blocking"</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara> the socket
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>

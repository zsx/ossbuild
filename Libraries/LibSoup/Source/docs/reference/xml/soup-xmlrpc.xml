<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-24-XMLRPC-Support">
<refmeta>
<refentrytitle role="top_of_page" id="libsoup-24-XMLRPC-Support.top_of_page">XMLRPC Support</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>XMLRPC Support</refname>
<refpurpose>XML-RPC support</refpurpose>
</refnamediv>

<refsynopsisdiv id="libsoup-24-XMLRPC-Support.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="char">char</link> *              <link linkend="soup-xmlrpc-build-method-call">soup_xmlrpc_build_method_call</link>       (const <link linkend="char">char</link> *method_name,
                                                         <link linkend="GValue">GValue</link> *params,
                                                         <link linkend="int">int</link> n_params);
<link linkend="SoupMessage">SoupMessage</link> *       <link linkend="soup-xmlrpc-request-new">soup_xmlrpc_request_new</link>             (const <link linkend="char">char</link> *uri,
                                                         const <link linkend="char">char</link> *method_name,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-xmlrpc-parse-method-response">soup_xmlrpc_parse_method_response</link>   (const <link linkend="char">char</link> *method_response,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-xmlrpc-extract-method-response">soup_xmlrpc_extract_method_response</link> (const <link linkend="char">char</link> *method_response,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);

<link linkend="gboolean">gboolean</link>            <link linkend="soup-xmlrpc-parse-method-call">soup_xmlrpc_parse_method_call</link>       (const <link linkend="char">char</link> *method_call,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="char">char</link> **method_name,
                                                         <link linkend="GValueArray">GValueArray</link> **params);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-xmlrpc-extract-method-call">soup_xmlrpc_extract_method_call</link>     (const <link linkend="char">char</link> *method_call,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="char">char</link> **method_name,
                                                         ...);
<link linkend="char">char</link> *              <link linkend="soup-xmlrpc-build-method-response">soup_xmlrpc_build_method_response</link>   (<link linkend="GValue">GValue</link> *value);
<link linkend="char">char</link> *              <link linkend="soup-xmlrpc-build-fault">soup_xmlrpc_build_fault</link>             (<link linkend="int">int</link> fault_code,
                                                         const <link linkend="char">char</link> *fault_format,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-xmlrpc-set-response">soup_xmlrpc_set_response</link>            (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-xmlrpc-set-fault">soup_xmlrpc_set_fault</link>               (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="int">int</link> fault_code,
                                                         const <link linkend="char">char</link> *fault_format,
                                                         ...);

#define             <link linkend="SOUP-XMLRPC-ERROR--CAPS">SOUP_XMLRPC_ERROR</link>
enum                <link linkend="SoupXMLRPCError">SoupXMLRPCError</link>;
#define             <link linkend="SOUP-XMLRPC-FAULT--CAPS">SOUP_XMLRPC_FAULT</link>
enum                <link linkend="SoupXMLRPCFault">SoupXMLRPCFault</link>;
</synopsis>
</refsynopsisdiv>









<refsect1 id="libsoup-24-XMLRPC-Support.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
<para>
</para>
</refsect1>

<refsect1 id="libsoup-24-XMLRPC-Support.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="soup-xmlrpc-build-method-call" role="function">
<title>soup_xmlrpc_build_method_call ()</title>
<indexterm zone="soup-xmlrpc-build-method-call"><primary sortas="soup_xmlrpc_build_method_call">soup_xmlrpc_build_method_call</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_xmlrpc_build_method_call       (const <link linkend="char">char</link> *method_name,
                                                         <link linkend="GValue">GValue</link> *params,
                                                         <link linkend="int">int</link> n_params);</programlisting>
<para>
This creates an XML-RPC methodCall and returns it as a string.
This is the low-level method that <link linkend="soup-xmlrpc-request-new"><function>soup_xmlrpc_request_new()</function></link> and
<link linkend="soup-xmlrpc-call"><function>soup_xmlrpc_call()</function></link> are built on.
</para>
<para>
<parameter>params</parameter> is an array of <link linkend="GValue"><type>GValue</type></link> representing the parameters to
<parameter>method</parameter>. (It is *not* a <link linkend="GValueArray"><type>GValueArray</type></link>, although if you have a
<link linkend="GValueArray"><type>GValueArray</type></link>, you can just pass its <link linkend="values"><literal>values</literal></link> and <link linkend="n-values"><literal>n_values</literal></link> fields.)
</para>
<para>
The correspondence between glib types and XML-RPC types is:
</para>
<para>
  int: <link linkend="int"><type>int</type></link> (<link linkend="G-TYPE-INT--CAPS"><literal>G_TYPE_INT</literal></link>)
  boolean: <link linkend="gboolean"><type>gboolean</type></link> (<link linkend="G-TYPE-BOOLEAN--CAPS"><literal>G_TYPE_BOOLEAN</literal></link>)
  string: <link linkend="char"><type>char</type></link>* (<link linkend="G-TYPE-STRING--CAPS"><literal>G_TYPE_STRING</literal></link>)
  double: <link linkend="double"><type>double</type></link> (<link linkend="G-TYPE-DOUBLE--CAPS"><literal>G_TYPE_DOUBLE</literal></link>)
  datetime.iso8601: <link linkend="SoupDate"><type>SoupDate</type></link> (<link linkend="SOUP-TYPE-DATE--CAPS"><literal>SOUP_TYPE_DATE</literal></link>)
  base64: <link linkend="GByteArray"><type>GByteArray</type></link> (<link linkend="SOUP-TYPE-BYTE-ARRAY--CAPS"><literal>SOUP_TYPE_BYTE_ARRAY</literal></link>)
  struct: <link linkend="GHashTable"><type>GHashTable</type></link> (<link linkend="G-TYPE-HASH-TABLE--CAPS"><literal>G_TYPE_HASH_TABLE</literal></link>)
  array: <link linkend="GValueArray"><type>GValueArray</type></link> (<link linkend="G-TYPE-VALUE-ARRAY--CAPS"><literal>G_TYPE_VALUE_ARRAY</literal></link>)
</para>
<para>
For structs, use a <link linkend="GHashTable"><type>GHashTable</type></link> that maps strings to <link linkend="GValue"><type>GValue</type></link>;
<link linkend="soup-value-hash-new"><function>soup_value_hash_new()</function></link> and related methods can help with this.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>method_name</parameter>&#160;:</term>
<listitem><simpara> the name of the XML-RPC method
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> arguments to <parameter>method</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_params</parameter>&#160;:</term>
<listitem><simpara> length of <parameter>params</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the text of the methodCall, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-request-new" role="function">
<title>soup_xmlrpc_request_new ()</title>
<indexterm zone="soup-xmlrpc-request-new"><primary sortas="soup_xmlrpc_request_new">soup_xmlrpc_request_new</primary></indexterm><programlisting><link linkend="SoupMessage">SoupMessage</link> *       soup_xmlrpc_request_new             (const <link linkend="char">char</link> *uri,
                                                         const <link linkend="char">char</link> *method_name,
                                                         ...);</programlisting>
<para>
Creates an XML-RPC methodCall and returns a <link linkend="SoupMessage"><type>SoupMessage</type></link>, ready
to send, for that method call.
</para>
<para>
The parameters are passed as type/value pairs; ie, first a <link linkend="GType"><type>GType</type></link>,
and then a value of the appropriate type, finally terminated by
<link linkend="G-TYPE-INVALID--CAPS"><literal>G_TYPE_INVALID</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> URI of the XML-RPC service
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>method_name</parameter>&#160;:</term>
<listitem><simpara> the name of the XML-RPC method to invoke at <parameter>uri</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> parameters for <parameter>method</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link> encoding the indicated XML-RPC
request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-parse-method-response" role="function">
<title>soup_xmlrpc_parse_method_response ()</title>
<indexterm zone="soup-xmlrpc-parse-method-response"><primary sortas="soup_xmlrpc_parse_method_response">soup_xmlrpc_parse_method_response</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_xmlrpc_parse_method_response   (const <link linkend="char">char</link> *method_response,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Parses <parameter>method_response</parameter> and returns the return value in <parameter>value</parameter>. If
<parameter>method_response</parameter> is a fault, <parameter>value</parameter> will be unchanged, and <parameter>error</parameter>
will be set to an error of type <link linkend="SOUP-XMLRPC-FAULT--CAPS"><literal>SOUP_XMLRPC_FAULT</literal></link>, with the error
<link linkend="code"><type>code</type></link> containing the fault code, and the error <link linkend="message"><type>message</type></link> containing
the fault string. (If <parameter>method_response</parameter> cannot be parsed at all,
<link linkend="soup-xmlrpc-parse-method-response"><function>soup_xmlrpc_parse_method_response()</function></link> will return <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, but <parameter>error</parameter>
will be unset.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>method_response</parameter>&#160;:</term>
<listitem><simpara> the XML-RPC methodResponse string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>method_response</parameter>, or -1 if it is NUL-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> on return, the return value from <parameter>method_call</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> error return value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if a return value was parsed, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the
response could not be parsed, or contained a fault.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-extract-method-response" role="function">
<title>soup_xmlrpc_extract_method_response ()</title>
<indexterm zone="soup-xmlrpc-extract-method-response"><primary sortas="soup_xmlrpc_extract_method_response">soup_xmlrpc_extract_method_response</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_xmlrpc_extract_method_response (const <link linkend="char">char</link> *method_response,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Parses <parameter>method_response</parameter> and extracts the return value into
a variable of the correct type.
</para>
<para>
If <parameter>method_response</parameter> is a fault, the return value will be unset,
and <parameter>error</parameter> will be set to an error of type <link linkend="SOUP-XMLRPC-FAULT--CAPS"><literal>SOUP_XMLRPC_FAULT</literal></link>, with
the error <link linkend="code"><type>code</type></link> containing the fault code, and the error <link linkend="message"><type>message</type></link>
containing the fault string. (If <parameter>method_response</parameter> cannot be parsed
at all, <link linkend="soup-xmlrpc-extract-method-response"><function>soup_xmlrpc_extract_method_response()</function></link> will return <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>,
but <parameter>error</parameter> will be unset.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>method_response</parameter>&#160;:</term>
<listitem><simpara> the XML-RPC methodResponse string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>method_response</parameter>, or -1 if it is NUL-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> error return value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the expected type of the return value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> location for return value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if a return value was parsed, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the
response was of the wrong type, or contained a fault.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-parse-method-call" role="function">
<title>soup_xmlrpc_parse_method_call ()</title>
<indexterm zone="soup-xmlrpc-parse-method-call"><primary sortas="soup_xmlrpc_parse_method_call">soup_xmlrpc_parse_method_call</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_xmlrpc_parse_method_call       (const <link linkend="char">char</link> *method_call,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="char">char</link> **method_name,
                                                         <link linkend="GValueArray">GValueArray</link> **params);</programlisting>
<para>
Parses <parameter>method_call</parameter> to get the name and parameters, and returns the
parameter values in a <link linkend="GValueArray"><type>GValueArray</type></link>; see also
<link linkend="soup-xmlrpc-extract-method-call"><function>soup_xmlrpc_extract_method_call()</function></link>, which is more convenient if you
know in advance what the types of the parameters will be.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>method_call</parameter>&#160;:</term>
<listitem><simpara> the XML-RPC methodCall string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>method_call</parameter>, or -1 if it is NUL-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>method_name</parameter>&#160;:</term>
<listitem><simpara> on return, the methodName from <parameter>method_call</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> on return, the parameters from <parameter>method_call</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> success or failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-extract-method-call" role="function">
<title>soup_xmlrpc_extract_method_call ()</title>
<indexterm zone="soup-xmlrpc-extract-method-call"><primary sortas="soup_xmlrpc_extract_method_call">soup_xmlrpc_extract_method_call</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_xmlrpc_extract_method_call     (const <link linkend="char">char</link> *method_call,
                                                         <link linkend="int">int</link> length,
                                                         <link linkend="char">char</link> **method_name,
                                                         ...);</programlisting>
<para>
Parses <parameter>method_call</parameter> to get the name and parameters, and puts
the parameters into variables of the appropriate types.
</para>
<para>
The parameters are handled similarly to
<parameter>soup_xmlrpc_build_method_call</parameter>, with pairs of types and values,
terminated by <link linkend="G-TYPE-INVALID--CAPS"><literal>G_TYPE_INVALID</literal></link>, except that values are pointers to
variables of the indicated type, rather than values of the type.
</para>
<para>
See also <link linkend="soup-xmlrpc-parse-method-call"><function>soup_xmlrpc_parse_method_call()</function></link>, which can be used if
you don't know the types of the parameters.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>method_call</parameter>&#160;:</term>
<listitem><simpara> the XML-RPC methodCall string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>method_call</parameter>, or -1 if it is NUL-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>method_name</parameter>&#160;:</term>
<listitem><simpara> on return, the methodName from <parameter>method_call</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> return types and locations for parameters
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> success or failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-build-method-response" role="function">
<title>soup_xmlrpc_build_method_response ()</title>
<indexterm zone="soup-xmlrpc-build-method-response"><primary sortas="soup_xmlrpc_build_method_response">soup_xmlrpc_build_method_response</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_xmlrpc_build_method_response   (<link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This creates a (successful) XML-RPC methodResponse and returns it
as a string. To create a fault response, use
<link linkend="soup-xmlrpc-build-fault"><function>soup_xmlrpc_build_fault()</function></link>.
</para>
<para>
The glib type to XML-RPC type mapping is as with
<link linkend="soup-xmlrpc-build-method-call"><function>soup_xmlrpc_build_method_call()</function></link>, qv.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> the return value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the text of the methodResponse, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-build-fault" role="function">
<title>soup_xmlrpc_build_fault ()</title>
<indexterm zone="soup-xmlrpc-build-fault"><primary sortas="soup_xmlrpc_build_fault">soup_xmlrpc_build_fault</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_xmlrpc_build_fault             (<link linkend="int">int</link> fault_code,
                                                         const <link linkend="char">char</link> *fault_format,
                                                         ...);</programlisting>
<para>
This creates an XML-RPC fault response and returns it as a string.
(To create a successful response, use
<link linkend="soup-xmlrpc-build-method-response"><function>soup_xmlrpc_build_method_response()</function></link>.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>fault_code</parameter>&#160;:</term>
<listitem><simpara> the fault code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fault_format</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="printf"><function>printf()</function></link>-style format string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the parameters to <parameter>fault_format</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the text of the fault
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-set-response" role="function">
<title>soup_xmlrpc_set_response ()</title>
<indexterm zone="soup-xmlrpc-set-response"><primary sortas="soup_xmlrpc_set_response">soup_xmlrpc_set_response</primary></indexterm><programlisting><link linkend="void">void</link>                soup_xmlrpc_set_response            (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="GType">GType</link> type,
                                                         ...);</programlisting>
<para>
Sets the status code and response body of <parameter>msg</parameter> to indicate a
successful XML-RPC call, with a return value given by <parameter>type</parameter> and the
following varargs argument, of the type indicated by <parameter>type</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> an XML-RPC request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the type of the response value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the response value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-xmlrpc-set-fault" role="function">
<title>soup_xmlrpc_set_fault ()</title>
<indexterm zone="soup-xmlrpc-set-fault"><primary sortas="soup_xmlrpc_set_fault">soup_xmlrpc_set_fault</primary></indexterm><programlisting><link linkend="void">void</link>                soup_xmlrpc_set_fault               (<link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="int">int</link> fault_code,
                                                         const <link linkend="char">char</link> *fault_format,
                                                         ...);</programlisting>
<para>
Sets the status code and response body of <parameter>msg</parameter> to indicate an
unsuccessful XML-RPC call, with the error described by <parameter>fault_code</parameter>
and <parameter>fault_format</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> an XML-RPC request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fault_code</parameter>&#160;:</term>
<listitem><simpara> the fault code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fault_format</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="printf"><function>printf()</function></link>-style format string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> the parameters to <parameter>fault_format</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-XMLRPC-ERROR--CAPS" role="macro">
<title>SOUP_XMLRPC_ERROR</title>
<indexterm zone="SOUP-XMLRPC-ERROR--CAPS"><primary sortas="SOUP_XMLRPC_ERROR">SOUP_XMLRPC_ERROR</primary></indexterm><programlisting>#define SOUP_XMLRPC_ERROR soup_xmlrpc_error_quark()
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SoupXMLRPCError" role="enum">
<title>enum SoupXMLRPCError</title>
<indexterm zone="SoupXMLRPCError"><primary sortas="SoupXMLRPCError">SoupXMLRPCError</primary></indexterm><programlisting>typedef enum {
	SOUP_XMLRPC_ERROR_ARGUMENTS,
	SOUP_XMLRPC_ERROR_RETVAL
} SoupXMLRPCError;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SOUP-XMLRPC-FAULT--CAPS" role="macro">
<title>SOUP_XMLRPC_FAULT</title>
<indexterm zone="SOUP-XMLRPC-FAULT--CAPS"><primary sortas="SOUP_XMLRPC_FAULT">SOUP_XMLRPC_FAULT</primary></indexterm><programlisting>#define SOUP_XMLRPC_FAULT soup_xmlrpc_fault_quark()
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SoupXMLRPCFault" role="enum">
<title>enum SoupXMLRPCFault</title>
<indexterm zone="SoupXMLRPCFault"><primary sortas="SoupXMLRPCFault">SoupXMLRPCFault</primary></indexterm><programlisting>typedef enum {
	SOUP_XMLRPC_FAULT_PARSE_ERROR_NOT_WELL_FORMED = -32700,
	SOUP_XMLRPC_FAULT_PARSE_ERROR_UNSUPPORTED_ENCODING = -32701,
	SOUP_XMLRPC_FAULT_PARSE_ERROR_INVALID_CHARACTER_FOR_ENCODING = -32702,
	SOUP_XMLRPC_FAULT_SERVER_ERROR_INVALID_XML_RPC = -32600,
	SOUP_XMLRPC_FAULT_SERVER_ERROR_REQUESTED_METHOD_NOT_FOUND = -32601,
	SOUP_XMLRPC_FAULT_SERVER_ERROR_INVALID_METHOD_PARAMETERS = -32602,
	SOUP_XMLRPC_FAULT_SERVER_ERROR_INTERNAL_XML_RPC_ERROR = -32603,
	SOUP_XMLRPC_FAULT_APPLICATION_ERROR = -32500,
	SOUP_XMLRPC_FAULT_SYSTEM_ERROR = -32400,
	SOUP_XMLRPC_FAULT_TRANSPORT_ERROR = -32300
} SoupXMLRPCFault;
</programlisting>
<para>
</para></refsect2>

</refsect1>




</refentry>

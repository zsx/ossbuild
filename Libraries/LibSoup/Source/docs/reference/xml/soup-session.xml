<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupSession">
<refmeta>
<refentrytitle role="top_of_page" id="SoupSession.top_of_page">SoupSession</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupSession</refname>
<refpurpose>Soup session state object</refpurpose>
</refnamediv>

<refsynopsisdiv id="SoupSession.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="SoupSession-struct">SoupSession</link>;

<link linkend="void">void</link>                (<link linkend="SoupSessionCallback">*SoupSessionCallback</link>)              (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-session-queue-message">soup_session_queue_message</link>          (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupSessionCallback">SoupSessionCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-session-requeue-message">soup_session_requeue_message</link>        (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="guint">guint</link>               <link linkend="soup-session-send-message">soup_session_send_message</link>           (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-session-cancel-message">soup_session_cancel_message</link>         (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code);
<link linkend="void">void</link>                <link linkend="soup-session-abort">soup_session_abort</link>                  (<link linkend="SoupSession">SoupSession</link> *session);

<link linkend="void">void</link>                <link linkend="soup-session-pause-message">soup_session_pause_message</link>          (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-session-unpause-message">soup_session_unpause_message</link>        (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);

<link linkend="GMainContext">GMainContext</link> *      <link linkend="soup-session-get-async-context">soup_session_get_async_context</link>      (<link linkend="SoupSession">SoupSession</link> *session);

<link linkend="void">void</link>                <link linkend="soup-session-add-feature">soup_session_add_feature</link>            (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupSessionFeature">SoupSessionFeature</link> *feature);
<link linkend="void">void</link>                <link linkend="soup-session-add-feature-by-type">soup_session_add_feature_by_type</link>    (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);
<link linkend="void">void</link>                <link linkend="soup-session-remove-feature">soup_session_remove_feature</link>         (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupSessionFeature">SoupSessionFeature</link> *feature);
<link linkend="void">void</link>                <link linkend="soup-session-remove-feature-by-type">soup_session_remove_feature_by_type</link> (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);
<link linkend="SoupSessionFeature">SoupSessionFeature</link> * <link linkend="soup-session-get-feature">soup_session_get_feature</link>           (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);
<link linkend="GSList">GSList</link> *            <link linkend="soup-session-get-features">soup_session_get_features</link>           (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);

#define             <link linkend="SOUP-SESSION-PROXY-URI--CAPS">SOUP_SESSION_PROXY_URI</link>
#define             <link linkend="SOUP-SESSION-MAX-CONNS--CAPS">SOUP_SESSION_MAX_CONNS</link>
#define             <link linkend="SOUP-SESSION-MAX-CONNS-PER-HOST--CAPS">SOUP_SESSION_MAX_CONNS_PER_HOST</link>
#define             <link linkend="SOUP-SESSION-USE-NTLM--CAPS">SOUP_SESSION_USE_NTLM</link>
#define             <link linkend="SOUP-SESSION-SSL-CA-FILE--CAPS">SOUP_SESSION_SSL_CA_FILE</link>
#define             <link linkend="SOUP-SESSION-ASYNC-CONTEXT--CAPS">SOUP_SESSION_ASYNC_CONTEXT</link>
#define             <link linkend="SOUP-SESSION-TIMEOUT--CAPS">SOUP_SESSION_TIMEOUT</link>
#define             <link linkend="SOUP-SESSION-IDLE-TIMEOUT--CAPS">SOUP_SESSION_IDLE_TIMEOUT</link>
#define             <link linkend="SOUP-SESSION-USER-AGENT--CAPS">SOUP_SESSION_USER_AGENT</link>
#define             <link linkend="SOUP-SESSION-ADD-FEATURE--CAPS">SOUP_SESSION_ADD_FEATURE</link>
#define             <link linkend="SOUP-SESSION-ADD-FEATURE-BY-TYPE--CAPS">SOUP_SESSION_ADD_FEATURE_BY_TYPE</link>
#define             <link linkend="SOUP-SESSION-REMOVE-FEATURE-BY-TYPE--CAPS">SOUP_SESSION_REMOVE_FEATURE_BY_TYPE</link>
</synopsis>
</refsynopsisdiv>

<refsect1 id="SoupSession.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----SoupSession
         +----<link linkend="SoupSessionSync">SoupSessionSync</link>
         +----<link linkend="SoupSessionAsync">SoupSessionAsync</link>
</synopsis>
</refsect1>





<refsect1 id="SoupSession.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="SoupSession--add-feature">add-feature</link>&quot;              <link linkend="SoupSessionFeature">SoupSessionFeature</link>*   : Read / Write
  &quot;<link linkend="SoupSession--add-feature-by-type">add-feature-by-type</link>&quot;      <link linkend="GType">GType</link>*                : Read / Write
  &quot;<link linkend="SoupSession--async-context">async-context</link>&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only
  &quot;<link linkend="SoupSession--idle-timeout">idle-timeout</link>&quot;             <link linkend="guint">guint</link>                 : Read / Write
  &quot;<link linkend="SoupSession--max-conns">max-conns</link>&quot;                <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="SoupSession--max-conns-per-host">max-conns-per-host</link>&quot;       <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="SoupSession--proxy-uri">proxy-uri</link>&quot;                <link linkend="SoupURI">SoupURI</link>*              : Read / Write
  &quot;<link linkend="SoupSession--remove-feature-by-type">remove-feature-by-type</link>&quot;   <link linkend="GType">GType</link>*                : Read / Write
  &quot;<link linkend="SoupSession--ssl-ca-file">ssl-ca-file</link>&quot;              <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="SoupSession--timeout">timeout</link>&quot;                  <link linkend="guint">guint</link>                 : Read / Write
  &quot;<link linkend="SoupSession--use-ntlm">use-ntlm</link>&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="SoupSession--user-agent">user-agent</link>&quot;               <link linkend="gchar">gchar</link>*                : Read / Write
</synopsis>
</refsect1>

<refsect1 id="SoupSession.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="SoupSession-authenticate">authenticate</link>&quot;                                   : Run First
  &quot;<link linkend="SoupSession-request-queued">request-queued</link>&quot;                                 : Run First
  &quot;<link linkend="SoupSession-request-started">request-started</link>&quot;                                : Run First
  &quot;<link linkend="SoupSession-request-unqueued">request-unqueued</link>&quot;                               : Run First
</synopsis>
</refsect1>


<refsect1 id="SoupSession.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupSession"><type>SoupSession</type></link> is the object that controls client-side HTTP. A
<link linkend="SoupSession"><type>SoupSession</type></link> encapsulates all of the state that libsoup is keeping
on behalf of your program; cached HTTP connections, authentication
information, etc.
</para>
<para>
Most applications will only need a single <link linkend="SoupSession"><type>SoupSession</type></link>; the primary
reason you might need multiple sessions is if you need to have
multiple independent authentication contexts. (Eg, you are
connecting to a server and authenticating as two different users at
different times; the easiest way to ensure that each <link linkend="SoupMessage"><type>SoupMessage</type></link>
is sent with the authentication information you intended is to use
one session for the first user, and a second session for the other
user.)
</para>
<para>
<link linkend="SoupSession"><type>SoupSession</type></link> itself is an abstract class, with two subclasses. If
you are using the glib main loop, you will generally want to use
<link linkend="SoupSessionAsync"><type>SoupSessionAsync</type></link>, which uses non-blocking I/O and callbacks. On
the other hand, if your application is threaded and you want to do
synchronous I/O in a separate thread from the UI, use
<link linkend="SoupSessionSync"><type>SoupSessionSync</type></link>.</para>
<para>
</para>
</refsect1>

<refsect1 id="SoupSession.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SoupSession-struct" role="struct">
<title>SoupSession</title>
<indexterm zone="SoupSession-struct"><primary sortas="SoupSession">SoupSession</primary></indexterm><programlisting>typedef struct _SoupSession SoupSession;</programlisting>
<para>
</para></refsect2>
<refsect2 id="SoupSessionCallback" role="function">
<title>SoupSessionCallback ()</title>
<indexterm zone="SoupSessionCallback"><primary sortas="SoupSessionCallback">SoupSessionCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*SoupSessionCallback)              (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Prototype for the callback passed to <link linkend="soup-session-queue-message"><function>soup_session_queue_message()</function></link>,
qv.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> the session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the message that has finished
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the data passed to soup_session_queue_message
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-queue-message" role="function">
<title>soup_session_queue_message ()</title>
<indexterm zone="soup-session-queue-message"><primary sortas="soup_session_queue_message">soup_session_queue_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_queue_message          (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="SoupSessionCallback">SoupSessionCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Queues the message <parameter>msg</parameter> for sending. All messages are processed
while the glib main loop runs. If <parameter>msg</parameter> has been processed before,
any resources related to the time it was last sent are freed.
</para>
<para>
Upon message completion, the callback specified in <parameter>callback</parameter> will
be invoked (in the thread associated with <parameter>session</parameter>'s async
context). If after returning from this callback the message has not
been requeued, <parameter>msg</parameter> will be unreffed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the message to queue
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSessionCallback"><type>SoupSessionCallback</type></link> which will be called after the
message completes or when an unrecoverable error occurs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> a pointer passed to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-requeue-message" role="function">
<title>soup_session_requeue_message ()</title>
<indexterm zone="soup-session-requeue-message"><primary sortas="soup_session_requeue_message">soup_session_requeue_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_requeue_message        (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
This causes <parameter>msg</parameter> to be placed back on the queue to be attempted
again.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the message to requeue
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-send-message" role="function">
<title>soup_session_send_message ()</title>
<indexterm zone="soup-session-send-message"><primary sortas="soup_session_send_message">soup_session_send_message</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_session_send_message           (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Synchronously send <parameter>msg</parameter>. This call will not return until the
transfer is finished successfully or there is an unrecoverable
error.
</para>
<para>
<parameter>msg</parameter> is not freed upon return.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the message to send
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the HTTP status code of the response
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-cancel-message" role="function">
<title>soup_session_cancel_message ()</title>
<indexterm zone="soup-session-cancel-message"><primary sortas="soup_session_cancel_message">soup_session_cancel_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_cancel_message         (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="guint">guint</link> status_code);</programlisting>
<para>
Causes <parameter>session</parameter> to immediately finish processing <parameter>msg</parameter> (regardless
of its current state) with a final status_code of <parameter>status_code</parameter>. You
may call this at any time after handing <parameter>msg</parameter> off to <parameter>session</parameter>; if
<parameter>session</parameter> has started sending the request but has not yet received
the complete response, then it will close the request's connection.
Note that with non-idempotent requests (eg, <link linkend="POST--CAPS"><literal>POST</literal></link>, <link linkend="PUT--CAPS"><literal>PUT</literal></link>, <link linkend="DELETE--CAPS"><literal>DELETE</literal></link>)
it is possible that you might cancel the request after the server
acts on it, but before it returns a response, leaving the remote
resource in an unknown state.
</para>
<para>
If the message is cancelled while its response body is being read,
then the response body in <parameter>msg</parameter> will be left partially-filled-in.
The response headers, on the other hand, will always be either
empty or complete.
</para>
<para>
For messages queued with <link linkend="soup-session-queue-message"><function>soup_session_queue_message()</function></link> (and
cancelled from the same thread), the callback will be invoked
before <link linkend="soup-session-cancel-message"><function>soup_session_cancel_message()</function></link> returns.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the message to cancel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_code</parameter>&#160;:</term>
<listitem><simpara> status code to set on <parameter>msg</parameter> (generally
<link linkend="SOUP-STATUS-CANCELLED--CAPS"><literal>SOUP_STATUS_CANCELLED</literal></link>)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-abort" role="function">
<title>soup_session_abort ()</title>
<indexterm zone="soup-session-abort"><primary sortas="soup_session_abort">soup_session_abort</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_abort                  (<link linkend="SoupSession">SoupSession</link> *session);</programlisting>
<para>
Cancels all pending requests in <parameter>session</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> the session
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-pause-message" role="function">
<title>soup_session_pause_message ()</title>
<indexterm zone="soup-session-pause-message"><primary sortas="soup_session_pause_message">soup_session_pause_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_pause_message          (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Pauses HTTP I/O on <parameter>msg</parameter>. Call <link linkend="soup-session-unpause-message"><function>soup_session_unpause_message()</function></link> to
resume I/O.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link> currently running on <parameter>session</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-unpause-message" role="function">
<title>soup_session_unpause_message ()</title>
<indexterm zone="soup-session-unpause-message"><primary sortas="soup_session_unpause_message">soup_session_unpause_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_unpause_message        (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Resumes HTTP I/O on <parameter>msg</parameter>. Use this to resume after calling
<link linkend="soup-sessino-pause-message"><function>soup_sessino_pause_message()</function></link>.
</para>
<para>
If <parameter>msg</parameter> is being sent via blocking I/O, this will resume reading or
writing immediately. If <parameter>msg</parameter> is using non-blocking I/O, then
reading or writing won't resume until you return to the main loop.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link> currently running on <parameter>session</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-get-async-context" role="function">
<title>soup_session_get_async_context ()</title>
<indexterm zone="soup-session-get-async-context"><primary sortas="soup_session_get_async_context">soup_session_get_async_context</primary></indexterm><programlisting><link linkend="GMainContext">GMainContext</link> *      soup_session_get_async_context      (<link linkend="SoupSession">SoupSession</link> *session);</programlisting>
<para>
Gets <parameter>session</parameter>'s async_context. This does not add a ref to the
context, so you will need to ref it yourself if you want it to
outlive its session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <parameter>session</parameter>'s <link linkend="GMainContext"><type>GMainContext</type></link>, which may be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-session-add-feature" role="function" condition="since:2.24">
<title>soup_session_add_feature ()</title>
<indexterm zone="soup-session-add-feature" role="2.24"><primary sortas="soup_session_add_feature">soup_session_add_feature</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_add_feature            (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupSessionFeature">SoupSessionFeature</link> *feature);</programlisting>
<para>
Adds <parameter>feature</parameter>'s functionality to <parameter>session</parameter>. You can also add a
feature to the session at construct time by using the
<link linkend="SOUP-SESSION-ADD-FEATURE--CAPS"><literal>SOUP_SESSION_ADD_FEATURE</literal></link> property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature</parameter>&#160;:</term>
<listitem><simpara> an object that implements <link linkend="SoupSessionFeature"><type>SoupSessionFeature</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.24</para></refsect2>
<refsect2 id="soup-session-add-feature-by-type" role="function" condition="since:2.24">
<title>soup_session_add_feature_by_type ()</title>
<indexterm zone="soup-session-add-feature-by-type" role="2.24"><primary sortas="soup_session_add_feature_by_type">soup_session_add_feature_by_type</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_add_feature_by_type    (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);</programlisting>
<para>
Creates a new feature of type <parameter>feature_type</parameter> and adds it to
<parameter>session</parameter>. You can use this instead of <link linkend="soup-session-add-feature"><function>soup_session_add_feature()</function></link> in
the case wher you don't need to customize the new feature in any
way. You can also add a feature to the session at construct time by
using the <link linkend="SOUP-SESSION-ADD-FEATURE-BY-TYPE--CAPS"><literal>SOUP_SESSION_ADD_FEATURE_BY_TYPE</literal></link> property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature_type</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GType"><type>GType</type></link> of a class that implements <link linkend="SoupSessionFeature"><type>SoupSessionFeature</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.24</para></refsect2>
<refsect2 id="soup-session-remove-feature" role="function" condition="since:2.24">
<title>soup_session_remove_feature ()</title>
<indexterm zone="soup-session-remove-feature" role="2.24"><primary sortas="soup_session_remove_feature">soup_session_remove_feature</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_remove_feature         (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="SoupSessionFeature">SoupSessionFeature</link> *feature);</programlisting>
<para>
Removes <parameter>feature</parameter>'s functionality from <parameter>session</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature</parameter>&#160;:</term>
<listitem><simpara> a feature that has previously been added to <parameter>session</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.24</para></refsect2>
<refsect2 id="soup-session-remove-feature-by-type" role="function" condition="since:2.24">
<title>soup_session_remove_feature_by_type ()</title>
<indexterm zone="soup-session-remove-feature-by-type" role="2.24"><primary sortas="soup_session_remove_feature_by_type">soup_session_remove_feature_by_type</primary></indexterm><programlisting><link linkend="void">void</link>                soup_session_remove_feature_by_type (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);</programlisting>
<para>
Removes all features of type <parameter>feature_type</parameter> (or any subclass of
<parameter>feature_type</parameter>) from <parameter>session</parameter>. You can also remove standard features
from the session at construct time by using the
<link linkend="SOUP-SESSION-REMOVE-FEATURE-BY-TYPE--CAPS"><literal>SOUP_SESSION_REMOVE_FEATURE_BY_TYPE</literal></link> property.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature_type</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GType"><type>GType</type></link> of a class that implements <link linkend="SoupSessionFeature"><type>SoupSessionFeature</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.24</para></refsect2>
<refsect2 id="soup-session-get-feature" role="function" condition="since:2.26">
<title>soup_session_get_feature ()</title>
<indexterm zone="soup-session-get-feature" role="2.26"><primary sortas="soup_session_get_feature">soup_session_get_feature</primary></indexterm><programlisting><link linkend="SoupSessionFeature">SoupSessionFeature</link> * soup_session_get_feature           (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);</programlisting>
<para>
Gets the first feature in <parameter>session</parameter> of type <parameter>feature_type</parameter>. For
features where there may be more than one feature of a given type,
use <link linkend="soup-session-get-features"><function>soup_session_get_features()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature_type</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GType"><type>GType</type></link> of the feature to get
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="SoupSessionFeature"><type>SoupSessionFeature</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>. The feature is owned
by <parameter>session</parameter>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.26</para></refsect2>
<refsect2 id="soup-session-get-features" role="function" condition="since:2.26">
<title>soup_session_get_features ()</title>
<indexterm zone="soup-session-get-features" role="2.26"><primary sortas="soup_session_get_features">soup_session_get_features</primary></indexterm><programlisting><link linkend="GSList">GSList</link> *            soup_session_get_features           (<link linkend="SoupSession">SoupSession</link> *session,
                                                         <link linkend="GType">GType</link> feature_type);</programlisting>
<para>
Generates a list of <parameter>session</parameter>'s features of type <parameter>feature_type</parameter>. (If
you want to see all features, you can pass <link linkend="G-TYPE-SESSION-FEATURE--CAPS"><literal>G_TYPE_SESSION_FEATURE</literal></link>
for <parameter>feature_type</parameter>.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feature_type</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GType"><type>GType</type></link> of the class of features to get
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of features. You must free the list, but not
its contents

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.26</para></refsect2>
<refsect2 id="SOUP-SESSION-PROXY-URI--CAPS" role="macro">
<title>SOUP_SESSION_PROXY_URI</title>
<indexterm zone="SOUP-SESSION-PROXY-URI--CAPS"><primary sortas="SOUP_SESSION_PROXY_URI">SOUP_SESSION_PROXY_URI</primary></indexterm><programlisting>#define SOUP_SESSION_PROXY_URI          "proxy-uri"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--proxy-uri"><type>"proxy-uri"</type></link> property. (The HTTP
proxy to use for this session.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-MAX-CONNS--CAPS" role="macro">
<title>SOUP_SESSION_MAX_CONNS</title>
<indexterm zone="SOUP-SESSION-MAX-CONNS--CAPS"><primary sortas="SOUP_SESSION_MAX_CONNS">SOUP_SESSION_MAX_CONNS</primary></indexterm><programlisting>#define SOUP_SESSION_MAX_CONNS          "max-conns"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--max-conns"><type>"max-conns"</type></link> property. (The maximum
number of connections that the session can open at once.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-MAX-CONNS-PER-HOST--CAPS" role="macro">
<title>SOUP_SESSION_MAX_CONNS_PER_HOST</title>
<indexterm zone="SOUP-SESSION-MAX-CONNS-PER-HOST--CAPS"><primary sortas="SOUP_SESSION_MAX_CONNS_PER_HOST">SOUP_SESSION_MAX_CONNS_PER_HOST</primary></indexterm><programlisting>#define SOUP_SESSION_MAX_CONNS_PER_HOST "max-conns-per-host"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--max-conns-per-host"><type>"max-conns-per-host"</type></link> property.
(The maximum number of connections that the session can
open at once to a given host.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-USE-NTLM--CAPS" role="macro">
<title>SOUP_SESSION_USE_NTLM</title>
<indexterm zone="SOUP-SESSION-USE-NTLM--CAPS"><primary sortas="SOUP_SESSION_USE_NTLM">SOUP_SESSION_USE_NTLM</primary></indexterm><programlisting>#define SOUP_SESSION_USE_NTLM           "use-ntlm"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--use-ntlm"><type>"use-ntlm"</type></link> property. (Whether or
not to use NTLM authentication.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-SSL-CA-FILE--CAPS" role="macro">
<title>SOUP_SESSION_SSL_CA_FILE</title>
<indexterm zone="SOUP-SESSION-SSL-CA-FILE--CAPS"><primary sortas="SOUP_SESSION_SSL_CA_FILE">SOUP_SESSION_SSL_CA_FILE</primary></indexterm><programlisting>#define SOUP_SESSION_SSL_CA_FILE        "ssl-ca-file"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--ssl-ca-file"><type>"ssl-ca-file"</type></link> property. (File
containing SSL CA certificates.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-ASYNC-CONTEXT--CAPS" role="macro">
<title>SOUP_SESSION_ASYNC_CONTEXT</title>
<indexterm zone="SOUP-SESSION-ASYNC-CONTEXT--CAPS"><primary sortas="SOUP_SESSION_ASYNC_CONTEXT">SOUP_SESSION_ASYNC_CONTEXT</primary></indexterm><programlisting>#define SOUP_SESSION_ASYNC_CONTEXT      "async-context"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--async-context"><type>"async-context"</type></link> property. (The
session's <link linkend="GMainContext"><type>GMainContext</type></link>.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-TIMEOUT--CAPS" role="macro">
<title>SOUP_SESSION_TIMEOUT</title>
<indexterm zone="SOUP-SESSION-TIMEOUT--CAPS"><primary sortas="SOUP_SESSION_TIMEOUT">SOUP_SESSION_TIMEOUT</primary></indexterm><programlisting>#define SOUP_SESSION_TIMEOUT            "timeout"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--timeout"><type>"timeout"</type></link> property. (The timeout
in seconds for blocking socket I/O operations.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-IDLE-TIMEOUT--CAPS" role="macro" condition="since:2.4.1">
<title>SOUP_SESSION_IDLE_TIMEOUT</title>
<indexterm zone="SOUP-SESSION-IDLE-TIMEOUT--CAPS" role="2.4.1"><primary sortas="SOUP_SESSION_IDLE_TIMEOUT">SOUP_SESSION_IDLE_TIMEOUT</primary></indexterm><programlisting>#define SOUP_SESSION_IDLE_TIMEOUT       "idle-timeout"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--idle-timeout"><type>"idle-timeout"</type></link> property. (The idle
connection lifetime.)</para>
<para>
</para><para role="since">Since 2.4.1</para></refsect2>
<refsect2 id="SOUP-SESSION-USER-AGENT--CAPS" role="macro">
<title>SOUP_SESSION_USER_AGENT</title>
<indexterm zone="SOUP-SESSION-USER-AGENT--CAPS"><primary sortas="SOUP_SESSION_USER_AGENT">SOUP_SESSION_USER_AGENT</primary></indexterm><programlisting>#define SOUP_SESSION_USER_AGENT         "user-agent"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--user-agent"><type>"user-agent"</type></link> property, qv.</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-SESSION-ADD-FEATURE--CAPS" role="macro" condition="since:2.24">
<title>SOUP_SESSION_ADD_FEATURE</title>
<indexterm zone="SOUP-SESSION-ADD-FEATURE--CAPS" role="2.24"><primary sortas="SOUP_SESSION_ADD_FEATURE">SOUP_SESSION_ADD_FEATURE</primary></indexterm><programlisting>#define SOUP_SESSION_ADD_FEATURE            "add-feature"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--add-feature"><type>"add-feature"</type></link> property. (Shortcut
for calling <link linkend="soup-session-add-feature"><function>soup_session_add_feature()</function></link>.</para>
<para>
</para><para role="since">Since 2.24</para></refsect2>
<refsect2 id="SOUP-SESSION-ADD-FEATURE-BY-TYPE--CAPS" role="macro" condition="since:2.24">
<title>SOUP_SESSION_ADD_FEATURE_BY_TYPE</title>
<indexterm zone="SOUP-SESSION-ADD-FEATURE-BY-TYPE--CAPS" role="2.24"><primary sortas="SOUP_SESSION_ADD_FEATURE_BY_TYPE">SOUP_SESSION_ADD_FEATURE_BY_TYPE</primary></indexterm><programlisting>#define SOUP_SESSION_ADD_FEATURE_BY_TYPE    "add-feature-by-type"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--add-feature-by-type"><type>"add-feature-by-type"</type></link> property.
(Shortcut for calling <link linkend="soup-session-add-feature-by-type"><function>soup_session_add_feature_by_type()</function></link>.</para>
<para>
</para><para role="since">Since 2.24</para></refsect2>
<refsect2 id="SOUP-SESSION-REMOVE-FEATURE-BY-TYPE--CAPS" role="macro" condition="since:2.24">
<title>SOUP_SESSION_REMOVE_FEATURE_BY_TYPE</title>
<indexterm zone="SOUP-SESSION-REMOVE-FEATURE-BY-TYPE--CAPS" role="2.24"><primary sortas="SOUP_SESSION_REMOVE_FEATURE_BY_TYPE">SOUP_SESSION_REMOVE_FEATURE_BY_TYPE</primary></indexterm><programlisting>#define SOUP_SESSION_REMOVE_FEATURE_BY_TYPE "remove-feature-by-type"
</programlisting>
<para>
Alias for the <link linkend="SoupSession--remove-feature-by-type"><type>"remove-feature-by-type"</type></link>
property. (Shortcut for calling
<link linkend="soup-session-remove-feature-by-type"><function>soup_session_remove_feature_by_type()</function></link>.</para>
<para>
</para><para role="since">Since 2.24</para></refsect2>

</refsect1>
<refsect1 id="SoupSession.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="SoupSession--add-feature" role="property"><title>The <literal>&quot;add-feature&quot;</literal> property</title>
<indexterm zone="SoupSession--add-feature" role="2.24"><primary sortas="SoupSession:add-feature">SoupSession:add-feature</primary></indexterm><programlisting>  &quot;add-feature&quot;              <link linkend="SoupSessionFeature">SoupSessionFeature</link>*   : Read / Write</programlisting>
<para>
Add a feature object to the session. (Shortcut for calling
<link linkend="soup-session-add-feature"><function>soup_session_add_feature()</function></link>.)</para>
<para>
</para><para>Since 2.24</para>
</refsect2>
<refsect2 id="SoupSession--add-feature-by-type" role="property"><title>The <literal>&quot;add-feature-by-type&quot;</literal> property</title>
<indexterm zone="SoupSession--add-feature-by-type" role="2.24"><primary sortas="SoupSession:add-feature-by-type">SoupSession:add-feature-by-type</primary></indexterm><programlisting>  &quot;add-feature-by-type&quot;      <link linkend="GType">GType</link>*                : Read / Write</programlisting>
<para>
Add a feature object of the given type to the session.
(Shortcut for calling <link linkend="soup-session-add-feature-by-type"><function>soup_session_add_feature_by_type()</function></link>.)</para>
<para>
</para><para>Since 2.24</para>
</refsect2>
<refsect2 id="SoupSession--async-context" role="property"><title>The <literal>&quot;async-context&quot;</literal> property</title>
<indexterm zone="SoupSession--async-context"><primary sortas="SoupSession:async-context">SoupSession:async-context</primary></indexterm><programlisting>  &quot;async-context&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only</programlisting>
<para>The GMainContext to dispatch async I/O in.</para></refsect2>
<refsect2 id="SoupSession--idle-timeout" role="property"><title>The <literal>&quot;idle-timeout&quot;</literal> property</title>
<indexterm zone="SoupSession--idle-timeout" role="2.4.1"><primary sortas="SoupSession:idle-timeout">SoupSession:idle-timeout</primary></indexterm><programlisting>  &quot;idle-timeout&quot;             <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>
Connection lifetime when idle</para>
<para>
</para><para>Default value: 0</para>
<para>Since 2.4.1</para>
</refsect2>
<refsect2 id="SoupSession--max-conns" role="property"><title>The <literal>&quot;max-conns&quot;</literal> property</title>
<indexterm zone="SoupSession--max-conns"><primary sortas="SoupSession:max-conns">SoupSession:max-conns</primary></indexterm><programlisting>  &quot;max-conns&quot;                <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>The maximum number of connections that the session can open at once.</para><para>Allowed values: &gt;= 1</para>
<para>Default value: 10</para>
</refsect2>
<refsect2 id="SoupSession--max-conns-per-host" role="property"><title>The <literal>&quot;max-conns-per-host&quot;</literal> property</title>
<indexterm zone="SoupSession--max-conns-per-host"><primary sortas="SoupSession:max-conns-per-host">SoupSession:max-conns-per-host</primary></indexterm><programlisting>  &quot;max-conns-per-host&quot;       <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>The maximum number of connections that the session can open at once to a given host.</para><para>Allowed values: &gt;= 1</para>
<para>Default value: 2</para>
</refsect2>
<refsect2 id="SoupSession--proxy-uri" role="property"><title>The <literal>&quot;proxy-uri&quot;</literal> property</title>
<indexterm zone="SoupSession--proxy-uri"><primary sortas="SoupSession:proxy-uri">SoupSession:proxy-uri</primary></indexterm><programlisting>  &quot;proxy-uri&quot;                <link linkend="SoupURI">SoupURI</link>*              : Read / Write</programlisting>
<para>The HTTP Proxy to use for this session.</para></refsect2>
<refsect2 id="SoupSession--remove-feature-by-type" role="property"><title>The <literal>&quot;remove-feature-by-type&quot;</literal> property</title>
<indexterm zone="SoupSession--remove-feature-by-type" role="2.24"><primary sortas="SoupSession:remove-feature-by-type">SoupSession:remove-feature-by-type</primary></indexterm><programlisting>  &quot;remove-feature-by-type&quot;   <link linkend="GType">GType</link>*                : Read / Write</programlisting>
<para>
Remove feature objects from the session. (Shortcut for
calling <link linkend="soup-session-remove-feature-by-type"><function>soup_session_remove_feature_by_type()</function></link>.)</para>
<para>
</para><para>Since 2.24</para>
</refsect2>
<refsect2 id="SoupSession--ssl-ca-file" role="property"><title>The <literal>&quot;ssl-ca-file&quot;</literal> property</title>
<indexterm zone="SoupSession--ssl-ca-file"><primary sortas="SoupSession:ssl-ca-file">SoupSession:ssl-ca-file</primary></indexterm><programlisting>  &quot;ssl-ca-file&quot;              <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>File containing SSL CA certificates.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="SoupSession--timeout" role="property"><title>The <literal>&quot;timeout&quot;</literal> property</title>
<indexterm zone="SoupSession--timeout"><primary sortas="SoupSession:timeout">SoupSession:timeout</primary></indexterm><programlisting>  &quot;timeout&quot;                  <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>Value in seconds to timeout a blocking I/O.</para><para>Default value: 0</para>
</refsect2>
<refsect2 id="SoupSession--use-ntlm" role="property"><title>The <literal>&quot;use-ntlm&quot;</literal> property</title>
<indexterm zone="SoupSession--use-ntlm"><primary sortas="SoupSession:use-ntlm">SoupSession:use-ntlm</primary></indexterm><programlisting>  &quot;use-ntlm&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether or not to use NTLM authentication.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="SoupSession--user-agent" role="property"><title>The <literal>&quot;user-agent&quot;</literal> property</title>
<indexterm zone="SoupSession--user-agent"><primary sortas="SoupSession:user-agent">SoupSession:user-agent</primary></indexterm><programlisting>  &quot;user-agent&quot;               <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
If non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, the value to use for the "User-Agent" header
on <link linkend="SoupMessage"><type>SoupMessage</type></link><!-- -->s sent from this session.
</para>
<para>
RFC 2616 says: "The User-Agent request-header field
contains information about the user agent originating the
request. This is for statistical purposes, the tracing of
protocol violations, and automated recognition of user
agents for the sake of tailoring responses to avoid
particular user agent limitations. User agents SHOULD
include this field with requests."
</para>
<para>
The User-Agent header contains a list of one or more
product tokens, separated by whitespace, with the most
significant product token coming first. The tokens must be
brief, ASCII, and mostly alphanumeric (although "-", "_",
and "." are also allowed), and may optionally include a "/"
followed by a version string. You may also put comments,
enclosed in parentheses, between or after the tokens.
</para>
<para>
If you set a <link linkend="user-agent"><literal>user_agent</literal></link> property that has trailing
whitespace, <link linkend="SoupSession"><type>SoupSession</type></link> will append its own product token
(eg, "<literal>libsoup/2.3.2</literal>") to the end of the
header for you.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
</refsect1>

<refsect1 id="SoupSession.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="SoupSession-authenticate" role="signal"><title>The <literal>&quot;authenticate&quot;</literal> signal</title>
<indexterm zone="SoupSession-authenticate"><primary sortas="SoupSession::authenticate">SoupSession::authenticate</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSession">SoupSession</link> *session,
                                                        <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="SoupAuth">SoupAuth</link>    *auth,
                                                        <link linkend="gboolean">gboolean</link>     retrying,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted when the session requires authentication. If
credentials are available call <link linkend="soup-auth-authenticate"><function>soup_auth_authenticate()</function></link> on
<parameter>auth</parameter>. If these credentials fail, the signal will be
emitted again, with <parameter>retrying</parameter> set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, which will
continue until you return without calling
<link linkend="soup-auth-authenticate"><function>soup_auth_authenticate()</function></link> on <parameter>auth</parameter>.
</para>
<para>
Note that this may be emitted before <parameter>msg</parameter>'s body has been
fully read.
</para>
<para>
If you call <link linkend="soup-session-pause-message"><function>soup_session_pause_message()</function></link> on <parameter>msg</parameter> before
returning, then you can authenticate <parameter>auth</parameter> asynchronously
(as long as you <link linkend="g-object-ref"><function>g_object_ref()</function></link> it to make sure it doesn't
get destroyed), and then unpause <parameter>msg</parameter> when you are ready
for it to continue.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> the session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupMessage"><type>SoupMessage</type></link> being sent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupAuth"><type>SoupAuth</type></link> to authenticate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>retrying</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if this is the second (or later) attempt
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="SoupSession-request-queued" role="signal"><title>The <literal>&quot;request-queued&quot;</literal> signal</title>
<indexterm zone="SoupSession-request-queued" role="2.4.1"><primary sortas="SoupSession::request-queued">SoupSession::request-queued</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSession">SoupSession</link> *session,
                                                        <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted when a request is queued on <parameter>session</parameter>. (Note that
"queued" doesn't just mean <link linkend="soup-session-queue-message"><function>soup_session_queue_message()</function></link>;
<link linkend="soup-session-send-message"><function>soup_session_send_message()</function></link> implicitly queues the message
as well.)
</para>
<para>
When sending a request, first <link linkend="SoupSession-request-queued"><type>"request_queued"</type></link>
is emitted, indicating that the session has become aware of
the request.
</para>
<para>
Once a connection is available to send the request on, the
session emits <link linkend="SoupSession-request-started"><type>"request_started"</type></link>. Then, various
<link linkend="SoupMessage"><type>SoupMessage</type></link> signals are emitted as the message is
processed. If the message is requeued, it will emit
<link linkend="SoupMessage-restarted"><type>"restarted"</type></link>, which will then be followed by
another <link linkend="SoupSession-request-started"><type>"request_started"</type></link> and another set of
<link linkend="SoupMessage"><type>SoupMessage</type></link> signals when the message is re-sent.
</para>
<para>
Eventually, the message will emit <link linkend="SoupMessage-finished"><type>"finished"</type></link>.
Normally, this signals the completion of message
processing. However, it is possible that the application
will requeue the message from the "finished" handler (or
equivalently, from the <link linkend="soup-session-queue-message"><function>soup_session_queue_message()</function></link>
callback). In that case, the process will loop back to
<link linkend="SoupSession-request-started"><type>"request_started"</type></link>.
</para>
<para>
Eventually, a message will reach "finished" and not be
requeued. At that point, the session will emit
<link linkend="SoupSession-request-unqueued"><type>"request_unqueued"</type></link> to indicate that it is done
with the message.
</para>
<para>
To sum up: <link linkend="SoupSession-request-queued"><type>"request_queued"</type></link> and
<link linkend="SoupSession-request-unqueued"><type>"request_unqueued"</type></link> are guaranteed to be emitted
exactly once, but <link linkend="SoupSession-request-started"><type>"request_started"</type></link> and
<link linkend="SoupMessage-finished"><type>"finished"</type></link> (and all of the other <link linkend="SoupMessage"><type>SoupMessage</type></link>
signals) may be invoked multiple times for a given message.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> the session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the request that was queued
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 2.4.1</para></refsect2><refsect2 id="SoupSession-request-started" role="signal"><title>The <literal>&quot;request-started&quot;</literal> signal</title>
<indexterm zone="SoupSession-request-started"><primary sortas="SoupSession::request-started">SoupSession::request-started</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSession">SoupSession</link> *session,
                                                        <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="SoupSocket">SoupSocket</link>  *socket,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted just before a request is sent. See
<link linkend="SoupSession-request-queued"><type>"request_queued"</type></link> for a detailed description of
the message lifecycle within a session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> the session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the request being sent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>socket</parameter>&#160;:</term>
<listitem><simpara> the socket the request is being sent on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="SoupSession-request-unqueued" role="signal"><title>The <literal>&quot;request-unqueued&quot;</literal> signal</title>
<indexterm zone="SoupSession-request-unqueued" role="2.4.1"><primary sortas="SoupSession::request-unqueued">SoupSession::request-unqueued</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupSession">SoupSession</link> *session,
                                                        <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
Emitted when a request is removed from <parameter>session</parameter>'s queue,
indicating that <parameter>session</parameter> is done with it. See
<link linkend="SoupSession-request-queued"><type>"request_queued"</type></link> for a detailed description of the
message lifecycle within a session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> the session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the request that was unqueued
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist><para>Since 2.4.1</para></refsect2>
</refsect1>



</refentry>

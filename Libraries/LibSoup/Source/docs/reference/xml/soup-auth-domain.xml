<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupAuthDomain">
<refmeta>
<refentrytitle role="top_of_page" id="SoupAuthDomain.top_of_page">SoupAuthDomain</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupAuthDomain</refname>
<refpurpose>Server-side authentication</refpurpose>
</refnamediv>

<refsynopsisdiv id="SoupAuthDomain.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="SoupAuthDomain-struct">SoupAuthDomain</link>;

<link linkend="void">void</link>                <link linkend="soup-auth-domain-add-path">soup_auth_domain_add_path</link>           (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         const <link linkend="char">char</link> *path);
<link linkend="void">void</link>                <link linkend="soup-auth-domain-remove-path">soup_auth_domain_remove_path</link>        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         const <link linkend="char">char</link> *path);
<link linkend="gboolean">gboolean</link>            (<link linkend="SoupAuthDomainFilter">*SoupAuthDomainFilter</link>)             (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-auth-domain-set-filter">soup_auth_domain_set_filter</link>         (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupAuthDomainFilter">SoupAuthDomainFilter</link> filter,
                                                         <link linkend="gpointer">gpointer</link> filter_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);
const <link linkend="char">char</link> *        <link linkend="soup-auth-domain-get-realm">soup_auth_domain_get_realm</link>          (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain);

<link linkend="gboolean">gboolean</link>            (<link linkend="SoupAuthDomainGenericAuthCallback">*SoupAuthDomainGenericAuthCallback</link>)
                                                        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *username,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-auth-domain-set-generic-auth-callback">soup_auth_domain_set_generic_auth_callback</link>
                                                        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupAuthDomainGenericAuthCallback">SoupAuthDomainGenericAuthCallback</link> auth_callback,
                                                         <link linkend="gpointer">gpointer</link> auth_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-auth-domain-check-password">soup_auth_domain_check_password</link>     (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);

<link linkend="gboolean">gboolean</link>            <link linkend="soup-auth-domain-covers">soup_auth_domain_covers</link>             (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="char">char</link> *              <link linkend="soup-auth-domain-accepts">soup_auth_domain_accepts</link>            (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-auth-domain-challenge">soup_auth_domain_challenge</link>          (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);

#define             <link linkend="SOUP-AUTH-DOMAIN-REALM--CAPS">SOUP_AUTH_DOMAIN_REALM</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-PROXY--CAPS">SOUP_AUTH_DOMAIN_PROXY</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-ADD-PATH--CAPS">SOUP_AUTH_DOMAIN_ADD_PATH</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-REMOVE-PATH--CAPS">SOUP_AUTH_DOMAIN_REMOVE_PATH</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-FILTER--CAPS">SOUP_AUTH_DOMAIN_FILTER</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-FILTER-DATA--CAPS">SOUP_AUTH_DOMAIN_FILTER_DATA</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-GENERIC-AUTH-CALLBACK--CAPS">SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-GENERIC-AUTH-DATA--CAPS">SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA</link>
</synopsis>
</refsynopsisdiv>

<refsect1 id="SoupAuthDomain.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----SoupAuthDomain
         +----<link linkend="SoupAuthDomainBasic">SoupAuthDomainBasic</link>
         +----<link linkend="SoupAuthDomainDigest">SoupAuthDomainDigest</link>
</synopsis>
</refsect1>





<refsect1 id="SoupAuthDomain.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="SoupAuthDomain--add-path">add-path</link>&quot;                 <link linkend="gchar">gchar</link>*                : Write
  &quot;<link linkend="SoupAuthDomain--filter">filter</link>&quot;                   <link linkend="gpointer">gpointer</link>              : Read / Write
  &quot;<link linkend="SoupAuthDomain--filter-data">filter-data</link>&quot;              <link linkend="gpointer">gpointer</link>              : Read / Write
  &quot;<link linkend="SoupAuthDomain--generic-auth-callback">generic-auth-callback</link>&quot;    <link linkend="gpointer">gpointer</link>              : Read / Write
  &quot;<link linkend="SoupAuthDomain--generic-auth-data">generic-auth-data</link>&quot;        <link linkend="gpointer">gpointer</link>              : Read / Write
  &quot;<link linkend="SoupAuthDomain--proxy">proxy</link>&quot;                    <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only
  &quot;<link linkend="SoupAuthDomain--realm">realm</link>&quot;                    <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
  &quot;<link linkend="SoupAuthDomain--remove-path">remove-path</link>&quot;              <link linkend="gchar">gchar</link>*                : Write
</synopsis>
</refsect1>



<refsect1 id="SoupAuthDomain.description" role="desc">
<title role="desc.title">Description</title>
<para>
A <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link> manages authentication for all or part of a
<link linkend="SoupServer"><type>SoupServer</type></link>. To make a server require authentication, first create
an appropriate subclass of <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>, and then add it to the
server with <link linkend="soup-server-add-auth-domain"><function>soup_server_add_auth_domain()</function></link>.
</para>
<para>
In order for an auth domain to have any effect, you must add one or
more paths to it (via <link linkend="soup-auth-domain-add-path"><function>soup_auth_domain_add_path()</function></link> or the
<link linkend="SOUP-AUTH-DOMAIN-ADD-PATH--CAPS"><literal>SOUP_AUTH_DOMAIN_ADD_PATH</literal></link> property). To require authentication for
all requests, add the path "/".
</para>
<para>
If you need greater control over which requests should and
shouldn't be authenticated, add paths covering everything you
<emphasis>might</emphasis> want authenticated, and then use a
filter (<link linkend="soup-auth-domain-set-filter"><function>soup_auth_domain_set_filter()</function></link>) to bypass authentication for
those requests that don't need it.</para>
<para>
</para>
</refsect1>

<refsect1 id="SoupAuthDomain.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SoupAuthDomain-struct" role="struct">
<title>SoupAuthDomain</title>
<indexterm zone="SoupAuthDomain-struct"><primary sortas="SoupAuthDomain">SoupAuthDomain</primary></indexterm><programlisting>typedef struct _SoupAuthDomain SoupAuthDomain;</programlisting>
<para>
</para></refsect2>
<refsect2 id="soup-auth-domain-add-path" role="function">
<title>soup_auth_domain_add_path ()</title>
<indexterm zone="soup-auth-domain-add-path"><primary sortas="soup_auth_domain_add_path">soup_auth_domain_add_path</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_domain_add_path           (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         const <link linkend="char">char</link> *path);</programlisting>
<para>
Adds <parameter>path</parameter> to <parameter>domain</parameter>, such that requests under <parameter>path</parameter> on <parameter>domain</parameter>'s
server will require authentication (unless overridden by
<link linkend="soup-auth-domain-remove-path"><function>soup_auth_domain_remove_path()</function></link> or <link linkend="soup-auth-domain-set-filter"><function>soup_auth_domain_set_filter()</function></link>).
</para>
<para>
You can also add paths by setting the <link linkend="SOUP-AUTH-DOMAIN-ADD-PATH--CAPS"><literal>SOUP_AUTH_DOMAIN_ADD_PATH</literal></link>
property, which can also be used to add one or more paths at
construct time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to add to <parameter>domain</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-remove-path" role="function">
<title>soup_auth_domain_remove_path ()</title>
<indexterm zone="soup-auth-domain-remove-path"><primary sortas="soup_auth_domain_remove_path">soup_auth_domain_remove_path</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_domain_remove_path        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         const <link linkend="char">char</link> *path);</programlisting>
<para>
Removes <parameter>path</parameter> from <parameter>domain</parameter>, such that requests under <parameter>path</parameter> on
<parameter>domain</parameter>'s server will NOT require authentication.
</para>
<para>
This is not simply an undo-er for <link linkend="soup-auth-domain-add-path"><function>soup_auth_domain_add_path()</function></link>; it
can be used to "carve out" a subtree that does not require
authentication inside a hierarchy that does. Note also that unlike
with <link linkend="soup-auth-domain-add-path"><function>soup_auth_domain_add_path()</function></link>, this cannot be overridden by
adding a filter, as filters can only bypass authentication that
would otherwise be required, not require it where it would
otherwise be unnecessary.
</para>
<para>
You can also remove paths by setting the
<link linkend="SOUP-AUTH-DOMAIN-REMOVE-PATH--CAPS"><literal>SOUP_AUTH_DOMAIN_REMOVE_PATH</literal></link> property, which can also be used to
remove one or more paths at construct time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to remove from <parameter>domain</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SoupAuthDomainFilter" role="function">
<title>SoupAuthDomainFilter ()</title>
<indexterm zone="SoupAuthDomainFilter"><primary sortas="SoupAuthDomainFilter">SoupAuthDomainFilter</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*SoupAuthDomainFilter)             (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The prototype for a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link> filter; see
<link linkend="soup-auth-domain-set-filter"><function>soup_auth_domain_set_filter()</function></link> for details.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the data passed to <link linkend="soup-auth-domain-set-filter"><function>soup_auth_domain_set_filter()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>msg</parameter> requires authentication, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-set-filter" role="function">
<title>soup_auth_domain_set_filter ()</title>
<indexterm zone="soup-auth-domain-set-filter"><primary sortas="soup_auth_domain_set_filter">soup_auth_domain_set_filter</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_domain_set_filter         (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupAuthDomainFilter">SoupAuthDomainFilter</link> filter,
                                                         <link linkend="gpointer">gpointer</link> filter_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);</programlisting>
<para>
Adds <parameter>filter</parameter> as an authentication filter to <parameter>domain</parameter>. The filter
gets a chance to bypass authentication for certain requests that
would otherwise require it. Eg, it might check the message's path
in some way that is too complicated to do via the other methods, or
it might check the message's method, and allow GETs but not PUTs.
</para>
<para>
The filter function returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the request should still
require authentication, or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if authentication is unnecessary
for this request.
</para>
<para>
To help prevent security holes, your filter should return <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> by
default, and only return <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> under specifically-tested
circumstances, rather than the other way around. Eg, in the example
above, where you want to authenticate PUTs but not GETs, you should
check if the method is GET and return <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> in that case, and then
return <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> for all other methods (rather than returning <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> for
PUT and <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> for all other methods). This way if it turned out
(now or later) that some paths supported additional methods besides
GET and PUT, those methods would default to being NOT allowed for
unauthenticated users.
</para>
<para>
You can also set the filter by setting the <link linkend="SOUP-AUTH-DOMAIN-FILTER--CAPS"><literal>SOUP_AUTH_DOMAIN_FILTER</literal></link>
and <link linkend="SOUP-AUTH-DOMAIN-FILTER-DATA--CAPS"><literal>SOUP_AUTH_DOMAIN_FILTER_DATA</literal></link> properties, which can also be
used to set the filter at construct time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filter</parameter>&#160;:</term>
<listitem><simpara> the auth filter for <parameter>domain</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filter_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>filter</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dnotify</parameter>&#160;:</term>
<listitem><simpara> destroy notifier to free <parameter>filter_data</parameter> when <parameter>domain</parameter>
is destroyed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-get-realm" role="function">
<title>soup_auth_domain_get_realm ()</title>
<indexterm zone="soup-auth-domain-get-realm"><primary sortas="soup_auth_domain_get_realm">soup_auth_domain_get_realm</primary></indexterm><programlisting>const <link linkend="char">char</link> *        soup_auth_domain_get_realm          (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain);</programlisting>
<para>
Gets the realm name associated with <parameter>domain</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <parameter>domain</parameter>'s realm
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SoupAuthDomainGenericAuthCallback" role="function">
<title>SoupAuthDomainGenericAuthCallback ()</title>
<indexterm zone="SoupAuthDomainGenericAuthCallback"><primary sortas="SoupAuthDomainGenericAuthCallback">SoupAuthDomainGenericAuthCallback</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*SoupAuthDomainGenericAuthCallback)
                                                        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *username,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The prototype for a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link> generic authentication callback.
</para>
<para>
The callback should look up the user's password, call
<link linkend="soup-auth-domain-check-password"><function>soup_auth_domain_check_password()</function></link>, and use the return value from
that method as its own return value.
</para>
<para>
In general, for security reasons, it is preferable to use the
auth-domain-specific auth callbacks (eg,
<link linkend="SoupAuthDomainBasicAuthCallback"><type>SoupAuthDomainBasicAuthCallback</type></link> and
<link linkend="SoupAuthDomainDigestAuthCallback"><type>SoupAuthDomainDigestAuthCallback</type></link>), because they don't require
keeping a cleartext password database. Most users will use the same
password for many different sites, meaning if any site with a
cleartext password database is compromised, accounts on other
servers might be compromised as well. For many of the cases where
<link linkend="SoupServer"><type>SoupServer</type></link> is used, this is not really relevant, but it may still
be worth considering.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupMessage"><type>SoupMessage</type></link> being authenticated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> the username from <parameter>msg</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the data passed to
<link linkend="soup-auth-domain-set-generic-auth-callback"><function>soup_auth_domain_set_generic_auth_callback()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>msg</parameter> is authenticated, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-set-generic-auth-callback" role="function">
<title>soup_auth_domain_set_generic_auth_callback ()</title>
<indexterm zone="soup-auth-domain-set-generic-auth-callback"><primary sortas="soup_auth_domain_set_generic_auth_callback">soup_auth_domain_set_generic_auth_callback</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_domain_set_generic_auth_callback
                                                        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupAuthDomainGenericAuthCallback">SoupAuthDomainGenericAuthCallback</link> auth_callback,
                                                         <link linkend="gpointer">gpointer</link> auth_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);</programlisting>
<para>
Sets <parameter>auth_callback</parameter> as an authentication-handling callback for
<parameter>domain</parameter>. Whenever a request comes in to <parameter>domain</parameter> which cannot be
authenticated via a domain-specific auth callback (eg,
<link linkend="SoupAuthDomainDigestAuthCallback"><type>SoupAuthDomainDigestAuthCallback</type></link>), the generic auth callback
will be invoked. See <link linkend="SoupAuthDomainGenericAuthCallback"><type>SoupAuthDomainGenericAuthCallback</type></link> for information
on what the callback should do.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth_callback</parameter>&#160;:</term>
<listitem><simpara> the auth callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>auth_callback</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dnotify</parameter>&#160;:</term>
<listitem><simpara> destroy notifier to free <parameter>auth_data</parameter> when <parameter>domain</parameter>
is destroyed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-check-password" role="function">
<title>soup_auth_domain_check_password ()</title>
<indexterm zone="soup-auth-domain-check-password"><primary sortas="soup_auth_domain_check_password">soup_auth_domain_check_password</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_auth_domain_check_password     (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
Checks if <parameter>msg</parameter> authenticates to <parameter>domain</parameter> via <parameter>username</parameter> and
<parameter>password</parameter>. This would normally be called from a
<link linkend="SoupAuthDomainGenericAuthCallback"><type>SoupAuthDomainGenericAuthCallback</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> a username
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> a password
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether or not the message is authenticated
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-covers" role="function">
<title>soup_auth_domain_covers ()</title>
<indexterm zone="soup-auth-domain-covers"><primary sortas="soup_auth_domain_covers">soup_auth_domain_covers</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_auth_domain_covers             (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Checks if <parameter>domain</parameter> requires <parameter>msg</parameter> to be authenticated (according to
its paths and filter function). This does not actually look at
whether <parameter>msg</parameter> *is* authenticated, merely whether or not is needs to
be.
</para>
<para>
This is used by <link linkend="SoupServer"><type>SoupServer</type></link> internally and is probably of no use to
anyone else.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>domain</parameter> requires <parameter>msg</parameter> to be authenticated
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-accepts" role="function">
<title>soup_auth_domain_accepts ()</title>
<indexterm zone="soup-auth-domain-accepts"><primary sortas="soup_auth_domain_accepts">soup_auth_domain_accepts</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_auth_domain_accepts            (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Checks if <parameter>msg</parameter> contains appropriate authorization for <parameter>domain</parameter> to
accept it. Mirroring <link linkend="soup-auth-domain-covers"><function>soup_auth_domain_covers()</function></link>, this does not check
whether or not <parameter>domain</parameter> *cares* if <parameter>msg</parameter> is authorized.
</para>
<para>
This is used by <link linkend="SoupServer"><type>SoupServer</type></link> internally and is probably of no use to
anyone else.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the username that <parameter>msg</parameter> has authenticated as, if in
fact it has authenticated. <link linkend="NULL--CAPS"><literal>NULL</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-domain-challenge" role="function">
<title>soup_auth_domain_challenge ()</title>
<indexterm zone="soup-auth-domain-challenge"><primary sortas="soup_auth_domain_challenge">soup_auth_domain_challenge</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_domain_challenge          (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Adds a "WWW-Authenticate" or "Proxy-Authenticate" header to <parameter>msg</parameter>,
requesting that the client authenticate, and sets <parameter>msg</parameter>'s status
accordingly.
</para>
<para>
This is used by <link linkend="SoupServer"><type>SoupServer</type></link> internally and is probably of no use to
anyone else.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-REALM--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_REALM</title>
<indexterm zone="SOUP-AUTH-DOMAIN-REALM--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_REALM">SOUP_AUTH_DOMAIN_REALM</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_REALM       "realm"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--realm"><type>"realm"</type></link> property. (The realm of
this auth domain.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-PROXY--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_PROXY</title>
<indexterm zone="SOUP-AUTH-DOMAIN-PROXY--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_PROXY">SOUP_AUTH_DOMAIN_PROXY</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_PROXY       "proxy"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--proxy"><type>"proxy"</type></link> property. (Whether or
not this is a proxy auth domain.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-ADD-PATH--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_ADD_PATH</title>
<indexterm zone="SOUP-AUTH-DOMAIN-ADD-PATH--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_ADD_PATH">SOUP_AUTH_DOMAIN_ADD_PATH</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_ADD_PATH    "add-path"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--add-path"><type>"add-path"</type></link> property. (Shortcut
for calling <link linkend="soup-auth-domain-add-path"><function>soup_auth_domain_add_path()</function></link>.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-REMOVE-PATH--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_REMOVE_PATH</title>
<indexterm zone="SOUP-AUTH-DOMAIN-REMOVE-PATH--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_REMOVE_PATH">SOUP_AUTH_DOMAIN_REMOVE_PATH</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_REMOVE_PATH "remove-path"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--remove-path"><type>"remove-path"</type></link> property.
(Shortcut for calling <link linkend="soup-auth-domain-remove-path"><function>soup_auth_domain_remove_path()</function></link>.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-FILTER--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_FILTER</title>
<indexterm zone="SOUP-AUTH-DOMAIN-FILTER--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_FILTER">SOUP_AUTH_DOMAIN_FILTER</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_FILTER      "filter"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--filter"><type>"filter"</type></link> property. (The
<link linkend="SoupAuthDomainFilter"><type>SoupAuthDomainFilter</type></link> for the domain.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-FILTER-DATA--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_FILTER_DATA</title>
<indexterm zone="SOUP-AUTH-DOMAIN-FILTER-DATA--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_FILTER_DATA">SOUP_AUTH_DOMAIN_FILTER_DATA</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_FILTER_DATA "filter-data"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--filter-data"><type>"filter-data"</type></link> property. (Data
to pass to the <link linkend="SoupAuthDomainFilter"><type>SoupAuthDomainFilter</type></link>.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-GENERIC-AUTH-CALLBACK--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK</title>
<indexterm zone="SOUP-AUTH-DOMAIN-GENERIC-AUTH-CALLBACK--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK">SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_GENERIC_AUTH_CALLBACK "generic-auth-callback"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--auth-callback"><type>"auth-callback"</type></link> property.
(The <link linkend="SoupAuthDomainGenericAuthCallback"><type>SoupAuthDomainGenericAuthCallback</type></link>.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-DOMAIN-GENERIC-AUTH-DATA--CAPS" role="macro">
<title>SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA</title>
<indexterm zone="SOUP-AUTH-DOMAIN-GENERIC-AUTH-DATA--CAPS"><primary sortas="SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA">SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_GENERIC_AUTH_DATA     "generic-auth-data"
</programlisting>
<para>
Alias for the <link linkend="SoupAuthDomain--auth-data"><type>"auth-data"</type></link> property.
(The data to pass to the <link linkend="SoupAuthDomainGenericAuthCallback"><type>SoupAuthDomainGenericAuthCallback</type></link>.)</para>
<para>
</para></refsect2>

</refsect1>
<refsect1 id="SoupAuthDomain.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="SoupAuthDomain--add-path" role="property"><title>The <literal>&quot;add-path&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--add-path"><primary sortas="SoupAuthDomain:add-path">SoupAuthDomain:add-path</primary></indexterm><programlisting>  &quot;add-path&quot;                 <link linkend="gchar">gchar</link>*                : Write</programlisting>
<para>Add a path covered by this auth domain.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="SoupAuthDomain--filter" role="property"><title>The <literal>&quot;filter&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--filter"><primary sortas="SoupAuthDomain:filter">SoupAuthDomain:filter</primary></indexterm><programlisting>  &quot;filter&quot;                   <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>A filter for deciding whether or not to require authentication.</para></refsect2>
<refsect2 id="SoupAuthDomain--filter-data" role="property"><title>The <literal>&quot;filter-data&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--filter-data"><primary sortas="SoupAuthDomain:filter-data">SoupAuthDomain:filter-data</primary></indexterm><programlisting>  &quot;filter-data&quot;              <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>Data to pass to filter.</para></refsect2>
<refsect2 id="SoupAuthDomain--generic-auth-callback" role="property"><title>The <literal>&quot;generic-auth-callback&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--generic-auth-callback"><primary sortas="SoupAuthDomain:generic-auth-callback">SoupAuthDomain:generic-auth-callback</primary></indexterm><programlisting>  &quot;generic-auth-callback&quot;    <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>An authentication callback that can be used with any SoupAuthDomain subclass.</para></refsect2>
<refsect2 id="SoupAuthDomain--generic-auth-data" role="property"><title>The <literal>&quot;generic-auth-data&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--generic-auth-data"><primary sortas="SoupAuthDomain:generic-auth-data">SoupAuthDomain:generic-auth-data</primary></indexterm><programlisting>  &quot;generic-auth-data&quot;        <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>Data to pass to auth callback.</para></refsect2>
<refsect2 id="SoupAuthDomain--proxy" role="property"><title>The <literal>&quot;proxy&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--proxy"><primary sortas="SoupAuthDomain:proxy">SoupAuthDomain:proxy</primary></indexterm><programlisting>  &quot;proxy&quot;                    <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only</programlisting>
<para>Whether or not this is a proxy auth domain.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="SoupAuthDomain--realm" role="property"><title>The <literal>&quot;realm&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--realm"><primary sortas="SoupAuthDomain:realm">SoupAuthDomain:realm</primary></indexterm><programlisting>  &quot;realm&quot;                    <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>The realm of this auth domain.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="SoupAuthDomain--remove-path" role="property"><title>The <literal>&quot;remove-path&quot;</literal> property</title>
<indexterm zone="SoupAuthDomain--remove-path"><primary sortas="SoupAuthDomain:remove-path">SoupAuthDomain:remove-path</primary></indexterm><programlisting>  &quot;remove-path&quot;              <link linkend="gchar">gchar</link>*                : Write</programlisting>
<para>Remove a path covered by this auth domain.</para><para>Default value: NULL</para>
</refsect2>
</refsect1>



<refsect1 id="SoupAuthDomain.see-also">
<title>See Also</title>
#SoupServer
</refsect1>

</refentry>

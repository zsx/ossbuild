<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-24-SoupURI">
<refmeta>
<refentrytitle role="top_of_page" id="libsoup-24-SoupURI.top_of_page">SoupURI</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupURI</refname>
<refpurpose>URIs</refpurpose>
</refnamediv>

<refsynopsisdiv id="libsoup-24-SoupURI.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="SoupURI">SoupURI</link>;
<link linkend="SoupURI">SoupURI</link> *           <link linkend="soup-uri-new-with-base">soup_uri_new_with_base</link>              (<link linkend="SoupURI">SoupURI</link> *base,
                                                         const <link linkend="char">char</link> *uri_string);
<link linkend="SoupURI">SoupURI</link> *           <link linkend="soup-uri-new">soup_uri_new</link>                        (const <link linkend="char">char</link> *uri_string);
<link linkend="char">char</link> *              <link linkend="soup-uri-to-string">soup_uri_to_string</link>                  (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         <link linkend="gboolean">gboolean</link> just_path_and_query);

<link linkend="SoupURI">SoupURI</link> *           <link linkend="soup-uri-copy">soup_uri_copy</link>                       (<link linkend="SoupURI">SoupURI</link> *uri);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-uri-equal">soup_uri_equal</link>                      (<link linkend="SoupURI">SoupURI</link> *uri1,
                                                         <link linkend="SoupURI">SoupURI</link> *uri2);
<link linkend="void">void</link>                <link linkend="soup-uri-free">soup_uri_free</link>                       (<link linkend="SoupURI">SoupURI</link> *uri);

<link linkend="char">char</link> *              <link linkend="soup-uri-encode">soup_uri_encode</link>                     (const <link linkend="char">char</link> *part,
                                                         const <link linkend="char">char</link> *escape_extra);
<link linkend="char">char</link> *              <link linkend="soup-uri-decode">soup_uri_decode</link>                     (const <link linkend="char">char</link> *part);
<link linkend="char">char</link> *              <link linkend="soup-uri-normalize">soup_uri_normalize</link>                  (const <link linkend="char">char</link> *part,
                                                         const <link linkend="char">char</link> *unescape_extra);

#define             <link linkend="SOUP-URI-SCHEME-HTTP--CAPS">SOUP_URI_SCHEME_HTTP</link>
#define             <link linkend="SOUP-URI-SCHEME-HTTPS--CAPS">SOUP_URI_SCHEME_HTTPS</link>
<link linkend="gboolean">gboolean</link>            <link linkend="soup-uri-uses-default-port">soup_uri_uses_default_port</link>          (<link linkend="SoupURI">SoupURI</link> *uri);
#define             <link linkend="SOUP-URI-VALID-FOR-HTTP--CAPS">SOUP_URI_VALID_FOR_HTTP</link>             (uri)

<link linkend="void">void</link>                <link linkend="soup-uri-set-scheme">soup_uri_set_scheme</link>                 (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *scheme);
<link linkend="void">void</link>                <link linkend="soup-uri-set-user">soup_uri_set_user</link>                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *user);
<link linkend="void">void</link>                <link linkend="soup-uri-set-password">soup_uri_set_password</link>               (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *password);
<link linkend="void">void</link>                <link linkend="soup-uri-set-host">soup_uri_set_host</link>                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *host);
<link linkend="void">void</link>                <link linkend="soup-uri-set-port">soup_uri_set_port</link>                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         <link linkend="guint">guint</link> port);
<link linkend="void">void</link>                <link linkend="soup-uri-set-path">soup_uri_set_path</link>                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *path);
<link linkend="void">void</link>                <link linkend="soup-uri-set-query">soup_uri_set_query</link>                  (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *query);
<link linkend="void">void</link>                <link linkend="soup-uri-set-query-from-form">soup_uri_set_query_from_form</link>        (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         <link linkend="GHashTable">GHashTable</link> *form);
<link linkend="void">void</link>                <link linkend="soup-uri-set-query-from-fields">soup_uri_set_query_from_fields</link>      (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *first_field,
                                                         ...);
<link linkend="void">void</link>                <link linkend="soup-uri-set-fragment">soup_uri_set_fragment</link>               (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *fragment);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libsoup-24-SoupURI.description" role="desc">
<title role="desc.title">Description</title>
<para>
A <link linkend="SoupURI"><type>SoupURI</type></link> represents a (parsed) URI.
</para>
<para>
Many applications will not need to use <link linkend="SoupURI"><type>SoupURI</type></link> directly at all; on
the client side, <link linkend="soup-message-new"><function>soup_message_new()</function></link> takes a stringified URI, and on
the server side, the path and query components are provided for you
in the server callback.</para>
<para>
</para>
</refsect1>

<refsect1 id="libsoup-24-SoupURI.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SoupURI" role="struct">
<title>SoupURI</title>
<indexterm zone="SoupURI"><primary sortas="SoupURI">SoupURI</primary></indexterm><programlisting>typedef struct {
	const char *scheme;

	char       *user;
	char       *password;

	char       *host;
	guint       port;

	char       *path;
	char       *query;

	char       *fragment;
} SoupURI;
</programlisting>
<para>
A <link linkend="SoupURI"><type>SoupURI</type></link> represents a (parsed) URI. <link linkend="SoupURI"><type>SoupURI</type></link> supports RFC 3986
(URI Generic Syntax), and can parse any valid URI. However, libsoup
only uses "http" and "https" URIs internally; You can use
<link linkend="SOUP-URI-VALID-FOR-HTTP--CAPS"><function>SOUP_URI_VALID_FOR_HTTP()</function></link> to test if a <link linkend="SoupURI"><type>SoupURI</type></link> is a valid HTTP
URI.
</para>
<para>
<parameter>scheme</parameter> will always be set in any URI. It is an interned string and
is always all lowercase. (If you parse a URI with a non-lowercase
scheme, it will be converted to lowercase.) The macros
<link linkend="SOUP-URI-SCHEME-HTTP--CAPS"><literal>SOUP_URI_SCHEME_HTTP</literal></link> and <link linkend="SOUP-URI-SCHEME-HTTPS--CAPS"><literal>SOUP_URI_SCHEME_HTTPS</literal></link> provide the
interned values for "http" and "https" and can be compared against
URI <parameter>scheme</parameter> values.
</para>
<para>
<parameter>user</parameter> and <parameter>password</parameter> are parsed as defined in the older URI specs
(ie, separated by a colon; RFC 3986 only talks about a single
"userinfo" field). Note that <parameter>password</parameter> is not included in the
output of <link linkend="soup-uri-to-string"><function>soup_uri_to_string()</function></link>. libsoup does not normally use these
fields; authentication is handled via <link linkend="SoupSession"><type>SoupSession</type></link> signals.
</para>
<para>
<parameter>host</parameter> contains the hostname, and <parameter>port</parameter> the port specified in the
URI. If the URI doesn't contain a hostname, <parameter>host</parameter> will be <link linkend="NULL--CAPS"><literal>NULL</literal></link>,
and if it doesn't specify a port, <parameter>port</parameter> may be 0. However, for
"http" and "https" URIs, <parameter>host</parameter> is guaranteed to be non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>
(trying to parse an http URI with no <parameter>host</parameter> will return <link linkend="NULL--CAPS"><literal>NULL</literal></link>), and
<parameter>port</parameter> will always be non-0 (because libsoup knows the default value
to use when it is not specified in the URI).
</para>
<para>
<parameter>path</parameter> is always non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>. For http/https URIs, <parameter>path</parameter> will never be
an empty string either; if the input URI has no path, the parsed
<link linkend="SoupURI"><type>SoupURI</type></link> will have a <parameter>path</parameter> of "/".
</para>
<para>
<parameter>query</parameter> and <parameter>fragment</parameter> are optional for all URI types.
<link linkend="soup-form-decode-urlencoded"><function>soup_form_decode_urlencoded()</function></link> may be useful for parsing <parameter>query</parameter>.
</para>
<para>
Note that <parameter>path</parameter>, <parameter>query</parameter>, and <parameter>fragment</parameter> may contain
%<!-- -->-encoded characters. <link linkend="soup-uri-new"><function>soup_uri_new()</function></link> calls
<link linkend="soup-uri-normalize"><function>soup_uri_normalize()</function></link> on them, but not <link linkend="soup-uri-decode"><function>soup_uri_decode()</function></link>. This is
necessary to ensure that <link linkend="soup-uri-to-string"><function>soup_uri_to_string()</function></link> will generate a URI
that has exactly the same meaning as the original. (In theory,
<link linkend="SoupURI"><type>SoupURI</type></link> should leave <parameter>user</parameter>, <parameter>password</parameter>, and <parameter>host</parameter> partially-encoded
as well, but this would be more annoying than useful.)</para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term>const&#160;<link linkend="char">char</link>&#160;*<structfield>scheme</structfield>;</term>
<listitem><simpara> the URI scheme (eg, "http")
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>user</structfield>;</term>
<listitem><simpara> a username, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>password</structfield>;</term>
<listitem><simpara> a password, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>host</structfield>;</term>
<listitem><simpara> the hostname or IP address
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint">guint</link>&#160;<structfield>port</structfield>;</term>
<listitem><simpara> the port number on <parameter>host</parameter>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>path</structfield>;</term>
<listitem><simpara> the path on <parameter>host</parameter>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>query</structfield>;</term>
<listitem><simpara> a query for <parameter>path</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>fragment</structfield>;</term>
<listitem><simpara> a fragment identifier within <parameter>path</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-new-with-base" role="function">
<title>soup_uri_new_with_base ()</title>
<indexterm zone="soup-uri-new-with-base"><primary sortas="soup_uri_new_with_base">soup_uri_new_with_base</primary></indexterm><programlisting><link linkend="SoupURI">SoupURI</link> *           soup_uri_new_with_base              (<link linkend="SoupURI">SoupURI</link> *base,
                                                         const <link linkend="char">char</link> *uri_string);</programlisting>
<para>
Parses <parameter>uri_string</parameter> relative to <parameter>base</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>base</parameter>&#160;:</term>
<listitem><simpara> a base URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri_string</parameter>&#160;:</term>
<listitem><simpara> the URI
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a parsed <link linkend="SoupURI"><type>SoupURI</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-new" role="function">
<title>soup_uri_new ()</title>
<indexterm zone="soup-uri-new"><primary sortas="soup_uri_new">soup_uri_new</primary></indexterm><programlisting><link linkend="SoupURI">SoupURI</link> *           soup_uri_new                        (const <link linkend="char">char</link> *uri_string);</programlisting>
<para>
Parses an absolute URI.
</para>
<para>
You can also pass <link linkend="NULL--CAPS"><literal>NULL</literal></link> for <parameter>uri_string</parameter> if you want to get back an
"empty" <link linkend="SoupURI"><type>SoupURI</type></link> that you can fill in by hand. (You will need to
call at least <link linkend="soup-uri-set-scheme"><function>soup_uri_set_scheme()</function></link> and <link linkend="soup-uri-set-path"><function>soup_uri_set_path()</function></link>, since
those fields are required.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri_string</parameter>&#160;:</term>
<listitem><simpara> a URI
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-to-string" role="function">
<title>soup_uri_to_string ()</title>
<indexterm zone="soup-uri-to-string"><primary sortas="soup_uri_to_string">soup_uri_to_string</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_uri_to_string                  (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         <link linkend="gboolean">gboolean</link> just_path_and_query);</programlisting>
<para>
Returns a string representing <parameter>uri</parameter>.
</para>
<para>
If <parameter>just_path_and_query</parameter> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, this concatenates the path and query
together. That is, it constructs the string that would be needed in
the Request-Line of an HTTP request for <parameter>uri</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>just_path_and_query</parameter>&#160;:</term>
<listitem><simpara> if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, output just the path and query portions
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string representing <parameter>uri</parameter>, which the caller must free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-copy" role="function">
<title>soup_uri_copy ()</title>
<indexterm zone="soup-uri-copy"><primary sortas="soup_uri_copy">soup_uri_copy</primary></indexterm><programlisting><link linkend="SoupURI">SoupURI</link> *           soup_uri_copy                       (<link linkend="SoupURI">SoupURI</link> *uri);</programlisting>
<para>
Copies <parameter>uri</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a copy of <parameter>uri</parameter>, which must be freed with <link linkend="soup-uri-free"><function>soup_uri_free()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-equal" role="function">
<title>soup_uri_equal ()</title>
<indexterm zone="soup-uri-equal"><primary sortas="soup_uri_equal">soup_uri_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_uri_equal                      (<link linkend="SoupURI">SoupURI</link> *uri1,
                                                         <link linkend="SoupURI">SoupURI</link> *uri2);</programlisting>
<para>
Tests whether or not <parameter>uri1</parameter> and <parameter>uri2</parameter> are equal in all parts</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri1</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri2</parameter>&#160;:</term>
<listitem><simpara> another <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-free" role="function">
<title>soup_uri_free ()</title>
<indexterm zone="soup-uri-free"><primary sortas="soup_uri_free">soup_uri_free</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_free                       (<link linkend="SoupURI">SoupURI</link> *uri);</programlisting>
<para>
Frees <parameter>uri</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-encode" role="function">
<title>soup_uri_encode ()</title>
<indexterm zone="soup-uri-encode"><primary sortas="soup_uri_encode">soup_uri_encode</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_uri_encode                     (const <link linkend="char">char</link> *part,
                                                         const <link linkend="char">char</link> *escape_extra);</programlisting>
<para>
This %<!-- -->-encodes the given URI part and returns the escaped
version in allocated memory, which the caller must free when it is
done.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>part</parameter>&#160;:</term>
<listitem><simpara> a URI part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>escape_extra</parameter>&#160;:</term>
<listitem><simpara> additional reserved characters to escape (or <link linkend="NULL--CAPS"><literal>NULL</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the encoded URI part
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-decode" role="function">
<title>soup_uri_decode ()</title>
<indexterm zone="soup-uri-decode"><primary sortas="soup_uri_decode">soup_uri_decode</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_uri_decode                     (const <link linkend="char">char</link> *part);</programlisting>
<para>
Fully %<!-- -->-decodes <parameter>part</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>part</parameter>&#160;:</term>
<listitem><simpara> a URI part
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the decoded URI part, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if an invalid percent
code was encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-normalize" role="function">
<title>soup_uri_normalize ()</title>
<indexterm zone="soup-uri-normalize"><primary sortas="soup_uri_normalize">soup_uri_normalize</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_uri_normalize                  (const <link linkend="char">char</link> *part,
                                                         const <link linkend="char">char</link> *unescape_extra);</programlisting>
<para>
%<!-- -->-decodes any "unreserved" characters (or characters in
<parameter>unescape_extra</parameter>) in <parameter>part</parameter>.
</para>
<para>
"Unreserved" characters are those that are not allowed to be used
for punctuation according to the URI spec. For example, letters are
unreserved, so <link linkend="soup-uri-normalize"><function>soup_uri_normalize()</function></link> will turn
<literal>http://example.com/foo/b%<!-- -->61r</literal> into
<literal>http://example.com/foo/bar</literal>, which is guaranteed
to mean the same thing. However, "/" is "reserved", so
<literal>http://example.com/foo%<!-- -->2Fbar</literal> would not
be changed, because it might mean something different to the
server.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>part</parameter>&#160;:</term>
<listitem><simpara> a URI part
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unescape_extra</parameter>&#160;:</term>
<listitem><simpara> reserved characters to unescape (or <link linkend="NULL--CAPS"><literal>NULL</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the normalized URI part, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if an invalid percent
code was encountered.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-URI-SCHEME-HTTP--CAPS" role="macro">
<title>SOUP_URI_SCHEME_HTTP</title>
<indexterm zone="SOUP-URI-SCHEME-HTTP--CAPS"><primary sortas="SOUP_URI_SCHEME_HTTP">SOUP_URI_SCHEME_HTTP</primary></indexterm><programlisting>#define SOUP_URI_SCHEME_HTTP  (_SOUP_URI_SCHEME_HTTP ? _SOUP_URI_SCHEME_HTTP : (_SOUP_URI_SCHEME_HTTP = g_intern_static_string ("http")))
</programlisting>
<para>
"http" as an interned string. This can be compared directly against
the value of a <link linkend="SoupURI"><type>SoupURI</type></link>'s <structfield>scheme</structfield></para>
<para>
</para></refsect2>
<refsect2 id="SOUP-URI-SCHEME-HTTPS--CAPS" role="macro">
<title>SOUP_URI_SCHEME_HTTPS</title>
<indexterm zone="SOUP-URI-SCHEME-HTTPS--CAPS"><primary sortas="SOUP_URI_SCHEME_HTTPS">SOUP_URI_SCHEME_HTTPS</primary></indexterm><programlisting>#define SOUP_URI_SCHEME_HTTPS (_SOUP_URI_SCHEME_HTTPS ? _SOUP_URI_SCHEME_HTTPS : (_SOUP_URI_SCHEME_HTTPS = g_intern_static_string ("https")))
</programlisting>
<para>
"https" as an interned string. This can be compared directly
against the value of a <link linkend="SoupURI"><type>SoupURI</type></link>'s <structfield>scheme</structfield></para>
<para>
</para></refsect2>
<refsect2 id="soup-uri-uses-default-port" role="function">
<title>soup_uri_uses_default_port ()</title>
<indexterm zone="soup-uri-uses-default-port"><primary sortas="soup_uri_uses_default_port">soup_uri_uses_default_port</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_uri_uses_default_port          (<link linkend="SoupURI">SoupURI</link> *uri);</programlisting>
<para>
Tests if <parameter>uri</parameter> uses the default port for its scheme. (Eg, 80 for
http.) (This only works for http and https; libsoup does not know
the default ports of other protocols.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-URI-VALID-FOR-HTTP--CAPS" role="macro" condition="since:2.24">
<title>SOUP_URI_VALID_FOR_HTTP()</title>
<indexterm zone="SOUP-URI-VALID-FOR-HTTP--CAPS" role="2.24"><primary sortas="SOUP_URI_VALID_FOR_HTTP">SOUP_URI_VALID_FOR_HTTP</primary></indexterm><programlisting>#define   SOUP_URI_VALID_FOR_HTTP(uri) ((uri) &amp;&amp; ((uri)-&gt;scheme == SOUP_URI_SCHEME_HTTP || (uri)-&gt;scheme == SOUP_URI_SCHEME_HTTPS) &amp;&amp; (uri)-&gt;host)
</programlisting>
<para>
Tests if <parameter>uri</parameter> is a valid <link linkend="SoupURI"><type>SoupURI</type></link> for HTTP communication; that is, if
it can be used to construct a <link linkend="SoupMessage"><type>SoupMessage</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.24</para></refsect2>
<refsect2 id="soup-uri-set-scheme" role="function">
<title>soup_uri_set_scheme ()</title>
<indexterm zone="soup-uri-set-scheme"><primary sortas="soup_uri_set_scheme">soup_uri_set_scheme</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_scheme                 (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *scheme);</programlisting>
<para>
Sets <parameter>uri</parameter>'s scheme to <parameter>scheme</parameter>. This will also set <parameter>uri</parameter>'s port to
the default port for <parameter>scheme</parameter>, if known.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scheme</parameter>&#160;:</term>
<listitem><simpara> the URI scheme
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-user" role="function">
<title>soup_uri_set_user ()</title>
<indexterm zone="soup-uri-set-user"><primary sortas="soup_uri_set_user">soup_uri_set_user</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_user                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *user);</programlisting>
<para>
Sets <parameter>uri</parameter>'s user to <parameter>user</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user</parameter>&#160;:</term>
<listitem><simpara> the username, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-password" role="function">
<title>soup_uri_set_password ()</title>
<indexterm zone="soup-uri-set-password"><primary sortas="soup_uri_set_password">soup_uri_set_password</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_password               (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
Sets <parameter>uri</parameter>'s password to <parameter>password</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> the password, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-host" role="function">
<title>soup_uri_set_host ()</title>
<indexterm zone="soup-uri-set-host"><primary sortas="soup_uri_set_host">soup_uri_set_host</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_host                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *host);</programlisting>
<para>
Sets <parameter>uri</parameter>'s host to <parameter>host</parameter>.
</para>
<para>
If <parameter>host</parameter> is an IPv6 IP address, it should not include the brackets
required by the URI syntax; they will be added automatically when
converting <parameter>uri</parameter> to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>host</parameter>&#160;:</term>
<listitem><simpara> the hostname or IP address, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-port" role="function">
<title>soup_uri_set_port ()</title>
<indexterm zone="soup-uri-set-port"><primary sortas="soup_uri_set_port">soup_uri_set_port</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_port                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         <link linkend="guint">guint</link> port);</programlisting>
<para>
Sets <parameter>uri</parameter>'s port to <parameter>port</parameter>. If <parameter>port</parameter> is 0, <parameter>uri</parameter> will not have an
explicitly-specified port.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&#160;:</term>
<listitem><simpara> the port, or 0
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-path" role="function">
<title>soup_uri_set_path ()</title>
<indexterm zone="soup-uri-set-path"><primary sortas="soup_uri_set_path">soup_uri_set_path</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_path                   (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *path);</programlisting>
<para>
Sets <parameter>uri</parameter>'s path to <parameter>path</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-query" role="function">
<title>soup_uri_set_query ()</title>
<indexterm zone="soup-uri-set-query"><primary sortas="soup_uri_set_query">soup_uri_set_query</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_query                  (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *query);</programlisting>
<para>
Sets <parameter>uri</parameter>'s query to <parameter>query</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&#160;:</term>
<listitem><simpara> the query
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-query-from-form" role="function">
<title>soup_uri_set_query_from_form ()</title>
<indexterm zone="soup-uri-set-query-from-form"><primary sortas="soup_uri_set_query_from_form">soup_uri_set_query_from_form</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_query_from_form        (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         <link linkend="GHashTable">GHashTable</link> *form);</programlisting>
<para>
Sets <parameter>uri</parameter>'s query to the result of encoding <parameter>form</parameter> according to the
HTML form rules. See <link linkend="soup-form-encode-hash"><function>soup_form_encode_hash()</function></link> for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>form</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> containing HTML form information
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-query-from-fields" role="function">
<title>soup_uri_set_query_from_fields ()</title>
<indexterm zone="soup-uri-set-query-from-fields"><primary sortas="soup_uri_set_query_from_fields">soup_uri_set_query_from_fields</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_query_from_fields      (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *first_field,
                                                         ...);</programlisting>
<para>
Sets <parameter>uri</parameter>'s query to the result of encoding the given form fields
and values according to the * HTML form rules. See
<link linkend="soup-form-encode"><function>soup_form_encode()</function></link> for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_field</parameter>&#160;:</term>
<listitem><simpara> name of the first form field to encode into query
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> value of <parameter>first_field</parameter>, followed by additional field names
and values, terminated by <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-uri-set-fragment" role="function">
<title>soup_uri_set_fragment ()</title>
<indexterm zone="soup-uri-set-fragment"><primary sortas="soup_uri_set_fragment">soup_uri_set_fragment</primary></indexterm><programlisting><link linkend="void">void</link>                soup_uri_set_fragment               (<link linkend="SoupURI">SoupURI</link> *uri,
                                                         const <link linkend="char">char</link> *fragment);</programlisting>
<para>
Sets <parameter>uri</parameter>'s fragment to <parameter>fragment</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupURI"><type>SoupURI</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fragment</parameter>&#160;:</term>
<listitem><simpara> the fragment
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>

<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupAuth">
<refmeta>
<refentrytitle role="top_of_page" id="SoupAuth.top_of_page">SoupAuth</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupAuth</refname>
<refpurpose>HTTP client-side authentication support</refpurpose>
</refnamediv>

<refsynopsisdiv id="SoupAuth.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="SoupAuth-struct">SoupAuth</link>;
<link linkend="SoupAuth">SoupAuth</link> *          <link linkend="soup-auth-new">soup_auth_new</link>                       (<link linkend="GType">GType</link> type,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *auth_header);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-auth-update">soup_auth_update</link>                    (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *auth_header);

<link linkend="gboolean">gboolean</link>            <link linkend="soup-auth-is-for-proxy">soup_auth_is_for_proxy</link>              (<link linkend="SoupAuth">SoupAuth</link> *auth);
const <link linkend="char">char</link> *        <link linkend="soup-auth-get-scheme-name">soup_auth_get_scheme_name</link>           (<link linkend="SoupAuth">SoupAuth</link> *auth);
const <link linkend="char">char</link> *        <link linkend="soup-auth-get-host">soup_auth_get_host</link>                  (<link linkend="SoupAuth">SoupAuth</link> *auth);
const <link linkend="char">char</link> *        <link linkend="soup-auth-get-realm">soup_auth_get_realm</link>                 (<link linkend="SoupAuth">SoupAuth</link> *auth);
<link linkend="char">char</link> *              <link linkend="soup-auth-get-info">soup_auth_get_info</link>                  (<link linkend="SoupAuth">SoupAuth</link> *auth);

<link linkend="void">void</link>                <link linkend="soup-auth-authenticate">soup_auth_authenticate</link>              (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-auth-is-authenticated">soup_auth_is_authenticated</link>          (<link linkend="SoupAuth">SoupAuth</link> *auth);

<link linkend="char">char</link> *              <link linkend="soup-auth-get-authorization">soup_auth_get_authorization</link>         (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="GSList">GSList</link> *            <link linkend="soup-auth-get-protection-space">soup_auth_get_protection_space</link>      (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="SoupURI">SoupURI</link> *source_uri);
<link linkend="void">void</link>                <link linkend="soup-auth-free-protection-space">soup_auth_free_protection_space</link>     (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="GSList">GSList</link> *space);

#define             <link linkend="SOUP-AUTH-SCHEME-NAME--CAPS">SOUP_AUTH_SCHEME_NAME</link>
#define             <link linkend="SOUP-AUTH-REALM--CAPS">SOUP_AUTH_REALM</link>
#define             <link linkend="SOUP-AUTH-HOST--CAPS">SOUP_AUTH_HOST</link>
#define             <link linkend="SOUP-AUTH-IS-FOR-PROXY--CAPS">SOUP_AUTH_IS_FOR_PROXY</link>
#define             <link linkend="SOUP-AUTH-IS-AUTHENTICATED--CAPS">SOUP_AUTH_IS_AUTHENTICATED</link>
</synopsis>
</refsynopsisdiv>

<refsect1 id="SoupAuth.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----SoupAuth
</synopsis>
</refsect1>





<refsect1 id="SoupAuth.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="SoupAuth--host">host</link>&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
  &quot;<link linkend="SoupAuth--is-authenticated">is-authenticated</link>&quot;         <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="SoupAuth--is-for-proxy">is-for-proxy</link>&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only
  &quot;<link linkend="SoupAuth--realm">realm</link>&quot;                    <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
  &quot;<link linkend="SoupAuth--scheme-name">scheme-name</link>&quot;              <link linkend="gchar">gchar</link>*                : Read
</synopsis>
</refsect1>



<refsect1 id="SoupAuth.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupAuth"><type>SoupAuth</type></link> objects store the authentication data associated with a
given bit of web space. They are created automatically by
<link linkend="SoupSession"><type>SoupSession</type></link>.</para>
<para>
</para>
</refsect1>

<refsect1 id="SoupAuth.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SoupAuth-struct" role="struct">
<title>SoupAuth</title>
<indexterm zone="SoupAuth-struct"><primary sortas="SoupAuth">SoupAuth</primary></indexterm><programlisting>typedef struct _SoupAuth SoupAuth;</programlisting>
<para>
The abstract base class for handling authentication. Specific HTTP
Authentication mechanisms are implemented by its subclasses, but
applications never need to be aware of the specific subclasses
being used.</para>
<para>
</para></refsect2>
<refsect2 id="soup-auth-new" role="function">
<title>soup_auth_new ()</title>
<indexterm zone="soup-auth-new"><primary sortas="soup_auth_new">soup_auth_new</primary></indexterm><programlisting><link linkend="SoupAuth">SoupAuth</link> *          soup_auth_new                       (<link linkend="GType">GType</link> type,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *auth_header);</programlisting>
<para>
Creates a new <link linkend="SoupAuth"><type>SoupAuth</type></link> of type <parameter>type</parameter> with the information from
<parameter>msg</parameter> and <parameter>auth_header</parameter>.
</para>
<para>
This is called by <link linkend="SoupSession"><type>SoupSession</type></link>; you will normally not create auths
yourself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the type of auth to create (a subtype of <link linkend="SoupAuth"><type>SoupAuth</type></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupMessage"><type>SoupMessage</type></link> the auth is being created for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth_header</parameter>&#160;:</term>
<listitem><simpara> the WWW-Authenticate/Proxy-Authenticate header
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="SoupAuth"><type>SoupAuth</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if it could not be
created
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-update" role="function">
<title>soup_auth_update ()</title>
<indexterm zone="soup-auth-update"><primary sortas="soup_auth_update">soup_auth_update</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_auth_update                    (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *auth_header);</programlisting>
<para>
Updates <parameter>auth</parameter> with the information from <parameter>msg</parameter> and <parameter>auth_header</parameter>,
possibly un-authenticating it. As with <link linkend="soup-auth-new"><function>soup_auth_new()</function></link>, this is
normally only used by <link linkend="SoupSession"><type>SoupSession</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupMessage"><type>SoupMessage</type></link> <parameter>auth</parameter> is being updated for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth_header</parameter>&#160;:</term>
<listitem><simpara> the WWW-Authenticate/Proxy-Authenticate header
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>auth</parameter> is still a valid (but potentially
unauthenticated) <link linkend="SoupAuth"><type>SoupAuth</type></link>. <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if something about <parameter>auth_params</parameter>
could not be parsed or incorporated into <parameter>auth</parameter> at all.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-is-for-proxy" role="function">
<title>soup_auth_is_for_proxy ()</title>
<indexterm zone="soup-auth-is-for-proxy"><primary sortas="soup_auth_is_for_proxy">soup_auth_is_for_proxy</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_auth_is_for_proxy              (<link linkend="SoupAuth">SoupAuth</link> *auth);</programlisting>
<para>
Tests whether or not <parameter>auth</parameter> is associated with a proxy server rather
than an "origin" server.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-get-scheme-name" role="function">
<title>soup_auth_get_scheme_name ()</title>
<indexterm zone="soup-auth-get-scheme-name"><primary sortas="soup_auth_get_scheme_name">soup_auth_get_scheme_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        soup_auth_get_scheme_name           (<link linkend="SoupAuth">SoupAuth</link> *auth);</programlisting>
<para>
Returns <parameter>auth</parameter>'s scheme name. (Eg, "Basic", "Digest", or "NTLM")</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the scheme name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-get-host" role="function">
<title>soup_auth_get_host ()</title>
<indexterm zone="soup-auth-get-host"><primary sortas="soup_auth_get_host">soup_auth_get_host</primary></indexterm><programlisting>const <link linkend="char">char</link> *        soup_auth_get_host                  (<link linkend="SoupAuth">SoupAuth</link> *auth);</programlisting>
<para>
Returns the host that <parameter>auth</parameter> is associated with.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the hostname
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-get-realm" role="function">
<title>soup_auth_get_realm ()</title>
<indexterm zone="soup-auth-get-realm"><primary sortas="soup_auth_get_realm">soup_auth_get_realm</primary></indexterm><programlisting>const <link linkend="char">char</link> *        soup_auth_get_realm                 (<link linkend="SoupAuth">SoupAuth</link> *auth);</programlisting>
<para>
Returns <parameter>auth</parameter>'s realm. This is an identifier that distinguishes
separate authentication spaces on a given server, and may be some
string that is meaningful to the user. (Although it is probably not
localized.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the realm name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-get-info" role="function">
<title>soup_auth_get_info ()</title>
<indexterm zone="soup-auth-get-info"><primary sortas="soup_auth_get_info">soup_auth_get_info</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_auth_get_info                  (<link linkend="SoupAuth">SoupAuth</link> *auth);</programlisting>
<para>
Gets an opaque identifier for <parameter>auth</parameter>, for use as a hash key or the
like. <link linkend="SoupAuth"><type>SoupAuth</type></link> objects from the same server with the same
identifier refer to the same authentication domain (eg, the URLs
associated with them take the same usernames and passwords).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the identifier
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-authenticate" role="function">
<title>soup_auth_authenticate ()</title>
<indexterm zone="soup-auth-authenticate"><primary sortas="soup_auth_authenticate">soup_auth_authenticate</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_authenticate              (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
Call this on an auth to authenticate it; normally this will cause
the auth's message to be requeued with the new authentication info.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> the username provided by the user or client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> the password provided by the user or client
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-is-authenticated" role="function">
<title>soup_auth_is_authenticated ()</title>
<indexterm zone="soup-auth-is-authenticated"><primary sortas="soup_auth_is_authenticated">soup_auth_is_authenticated</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_auth_is_authenticated          (<link linkend="SoupAuth">SoupAuth</link> *auth);</programlisting>
<para>
Tests if <parameter>auth</parameter> has been given a username and password</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>auth</parameter> has been given a username and password
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-get-authorization" role="function">
<title>soup_auth_get_authorization ()</title>
<indexterm zone="soup-auth-get-authorization"><primary sortas="soup_auth_get_authorization">soup_auth_get_authorization</primary></indexterm><programlisting><link linkend="char">char</link> *              soup_auth_get_authorization         (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Generates an appropriate "Authorization" header for <parameter>msg</parameter>. (The
session will only call this if <link linkend="soup-auth-is-authenticated"><function>soup_auth_is_authenticated()</function></link>
returned <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="SoupMessage"><type>SoupMessage</type></link> to be authorized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the "Authorization" header, which must be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-get-protection-space" role="function">
<title>soup_auth_get_protection_space ()</title>
<indexterm zone="soup-auth-get-protection-space"><primary sortas="soup_auth_get_protection_space">soup_auth_get_protection_space</primary></indexterm><programlisting><link linkend="GSList">GSList</link> *            soup_auth_get_protection_space      (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="SoupURI">SoupURI</link> *source_uri);</programlisting>
<para>
Returns a list of paths on the server which <parameter>auth</parameter> extends over.
(All subdirectories of these paths are also assumed to be part
of <parameter>auth</parameter>'s protection space, unless otherwise discovered not to
be.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>source_uri</parameter>&#160;:</term>
<listitem><simpara> the URI of the request that <parameter>auth</parameter> was generated in
response to.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the list of paths, which must be freed with
<link linkend="soup-auth-free-protection-space"><function>soup_auth_free_protection_space()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="soup-auth-free-protection-space" role="function">
<title>soup_auth_free_protection_space ()</title>
<indexterm zone="soup-auth-free-protection-space"><primary sortas="soup_auth_free_protection_space">soup_auth_free_protection_space</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_free_protection_space     (<link linkend="SoupAuth">SoupAuth</link> *auth,
                                                         <link linkend="GSList">GSList</link> *space);</programlisting>
<para>
Frees <parameter>space</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="SoupAuth"><type>SoupAuth</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>space</parameter>&#160;:</term>
<listitem><simpara> the return value from <link linkend="soup-auth-get-protection-space"><function>soup_auth_get_protection_space()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SOUP-AUTH-SCHEME-NAME--CAPS" role="macro">
<title>SOUP_AUTH_SCHEME_NAME</title>
<indexterm zone="SOUP-AUTH-SCHEME-NAME--CAPS"><primary sortas="SOUP_AUTH_SCHEME_NAME">SOUP_AUTH_SCHEME_NAME</primary></indexterm><programlisting>#define SOUP_AUTH_SCHEME_NAME      "scheme-name"
</programlisting>
<para>
An alias for the <link linkend="SoupAuth--scheme"><type>"scheme"</type></link> property. (The
authentication scheme name.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-REALM--CAPS" role="macro">
<title>SOUP_AUTH_REALM</title>
<indexterm zone="SOUP-AUTH-REALM--CAPS"><primary sortas="SOUP_AUTH_REALM">SOUP_AUTH_REALM</primary></indexterm><programlisting>#define SOUP_AUTH_REALM            "realm"
</programlisting>
<para>
An alias for the <link linkend="SoupAuth--realm"><type>"realm"</type></link> property. (The
authentication realm.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-HOST--CAPS" role="macro">
<title>SOUP_AUTH_HOST</title>
<indexterm zone="SOUP-AUTH-HOST--CAPS"><primary sortas="SOUP_AUTH_HOST">SOUP_AUTH_HOST</primary></indexterm><programlisting>#define SOUP_AUTH_HOST             "host"
</programlisting>
<para>
An alias for the <link linkend="SoupAuth--host"><type>"host"</type></link> property. (The
host being authenticated to.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-IS-FOR-PROXY--CAPS" role="macro">
<title>SOUP_AUTH_IS_FOR_PROXY</title>
<indexterm zone="SOUP-AUTH-IS-FOR-PROXY--CAPS"><primary sortas="SOUP_AUTH_IS_FOR_PROXY">SOUP_AUTH_IS_FOR_PROXY</primary></indexterm><programlisting>#define SOUP_AUTH_IS_FOR_PROXY     "is-for-proxy"
</programlisting>
<para>
An alias for the <link linkend="SoupAuth--is-for-proxy"><type>"is-for-proxy"</type></link> property. (Whether
or not the auth is for a proxy server.)</para>
<para>
</para></refsect2>
<refsect2 id="SOUP-AUTH-IS-AUTHENTICATED--CAPS" role="macro">
<title>SOUP_AUTH_IS_AUTHENTICATED</title>
<indexterm zone="SOUP-AUTH-IS-AUTHENTICATED--CAPS"><primary sortas="SOUP_AUTH_IS_AUTHENTICATED">SOUP_AUTH_IS_AUTHENTICATED</primary></indexterm><programlisting>#define SOUP_AUTH_IS_AUTHENTICATED "is-authenticated"
</programlisting>
<para>
An alias for the <link linkend="SoupAuth--is-authenticated"><type>"is-authenticated"</type></link> property.
(Whether or not the auth has been authenticated.)</para>
<para>
</para></refsect2>

</refsect1>
<refsect1 id="SoupAuth.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="SoupAuth--host" role="property"><title>The <literal>&quot;host&quot;</literal> property</title>
<indexterm zone="SoupAuth--host"><primary sortas="SoupAuth:host">SoupAuth:host</primary></indexterm><programlisting>  &quot;host&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>Authentication host.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="SoupAuth--is-authenticated" role="property"><title>The <literal>&quot;is-authenticated&quot;</literal> property</title>
<indexterm zone="SoupAuth--is-authenticated"><primary sortas="SoupAuth:is-authenticated">SoupAuth:is-authenticated</primary></indexterm><programlisting>  &quot;is-authenticated&quot;         <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>Whether or not the auth is authenticated.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="SoupAuth--is-for-proxy" role="property"><title>The <literal>&quot;is-for-proxy&quot;</literal> property</title>
<indexterm zone="SoupAuth--is-for-proxy"><primary sortas="SoupAuth:is-for-proxy">SoupAuth:is-for-proxy</primary></indexterm><programlisting>  &quot;is-for-proxy&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only</programlisting>
<para>Whether or not the auth is for a proxy server.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="SoupAuth--realm" role="property"><title>The <literal>&quot;realm&quot;</literal> property</title>
<indexterm zone="SoupAuth--realm"><primary sortas="SoupAuth:realm">SoupAuth:realm</primary></indexterm><programlisting>  &quot;realm&quot;                    <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>Authentication realm.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="SoupAuth--scheme-name" role="property"><title>The <literal>&quot;scheme-name&quot;</literal> property</title>
<indexterm zone="SoupAuth--scheme-name"><primary sortas="SoupAuth:scheme-name">SoupAuth:scheme-name</primary></indexterm><programlisting>  &quot;scheme-name&quot;              <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>Authentication scheme name.</para><para>Default value: NULL</para>
</refsect2>
</refsect1>



<refsect1 id="SoupAuth.see-also">
<title>See Also</title>
#SoupSession
</refsect1>

</refentry>

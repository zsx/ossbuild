<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GCancellable">
<refmeta>
<refentrytitle role="top_of_page" id="GCancellable.top_of_page">GCancellable</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GCancellable</refname>
<refpurpose>Thread-safe Operation Cancellation Stack</refpurpose>
</refnamediv>

<refsynopsisdiv id="GCancellable.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gio/gio.h&gt;

                    <link linkend="GCancellable-struct">GCancellable</link>;
<link linkend="GCancellable">GCancellable</link> *      <link linkend="g-cancellable-new">g_cancellable_new</link>                   (void);
<link linkend="gboolean">gboolean</link>            <link linkend="g-cancellable-is-cancelled">g_cancellable_is_cancelled</link>          (<link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="gboolean">gboolean</link>            <link linkend="g-cancellable-set-error-if-cancelled">g_cancellable_set_error_if_cancelled</link>
                                                        (<link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="int">int</link>                 <link linkend="g-cancellable-get-fd">g_cancellable_get_fd</link>                (<link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="void">void</link>                <link linkend="g-cancellable-make-pollfd">g_cancellable_make_pollfd</link>           (<link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GPollFD">GPollFD</link> *pollfd);
<link linkend="GCancellable">GCancellable</link> *      <link linkend="g-cancellable-get-current">g_cancellable_get_current</link>           (void);
<link linkend="void">void</link>                <link linkend="g-cancellable-pop-current">g_cancellable_pop_current</link>           (<link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="void">void</link>                <link linkend="g-cancellable-push-current">g_cancellable_push_current</link>          (<link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="void">void</link>                <link linkend="g-cancellable-reset">g_cancellable_reset</link>                 (<link linkend="GCancellable">GCancellable</link> *cancellable);
<link linkend="void">void</link>                <link linkend="g-cancellable-cancel">g_cancellable_cancel</link>                (<link linkend="GCancellable">GCancellable</link> *cancellable);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GCancellable.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GCancellable
</synopsis>
</refsect1>






<refsect1 id="GCancellable.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="GCancellable-cancelled">cancelled</link>&quot;                                      : Run Last
</synopsis>
</refsect1>


<refsect1 id="GCancellable.description" role="desc">
<title role="desc.title">Description</title>
<para>
GCancellable is a thread-safe operation cancellation stack used 
throughout GIO to allow for cancellation of synchronous and
asynchronous operations.</para>
<para>
</para>
</refsect1>

<refsect1 id="GCancellable.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GCancellable-struct" role="struct">
<title>GCancellable</title>
<indexterm zone="GCancellable-struct"><primary sortas="Cancellable">GCancellable</primary></indexterm><programlisting>typedef struct _GCancellable GCancellable;</programlisting>
<para>
Allows actions to be cancelled.</para>
<para>
</para></refsect2>
<refsect2 id="g-cancellable-new" role="function">
<title>g_cancellable_new ()</title>
<indexterm zone="g-cancellable-new"><primary sortas="cancellable_new">g_cancellable_new</primary></indexterm><programlisting><link linkend="GCancellable">GCancellable</link> *      g_cancellable_new                   (void);</programlisting>
<para>
Creates a new <link linkend="GCancellable"><type>GCancellable</type></link> object.
</para>
<para>
Applications that want to start one or more operations
that should be cancellable should create a <link linkend="GCancellable"><type>GCancellable</type></link>
and pass it to the operations.
</para>
<para>
One <link linkend="GCancellable"><type>GCancellable</type></link> can be used in multiple consecutive
operations, but not in multiple concurrent operations.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-is-cancelled" role="function">
<title>g_cancellable_is_cancelled ()</title>
<indexterm zone="g-cancellable-is-cancelled"><primary sortas="cancellable_is_cancelled">g_cancellable_is_cancelled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_cancellable_is_cancelled          (<link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Checks if a cancellable job has been cancelled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link> or NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>cancellable</parameter> is cancelled, 
FALSE if called with <link linkend="NULL--CAPS"><literal>NULL</literal></link> or if item is not cancelled. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-set-error-if-cancelled" role="function">
<title>g_cancellable_set_error_if_cancelled ()</title>
<indexterm zone="g-cancellable-set-error-if-cancelled"><primary sortas="cancellable_set_error_if_cancelled">g_cancellable_set_error_if_cancelled</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_cancellable_set_error_if_cancelled
                                                        (<link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
If the <parameter>cancellable</parameter> is cancelled, sets the error to notify
that the operation was cancelled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GError"><type>GError</type></link> to append error state to.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>cancellable</parameter> was cancelled, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if it was not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-get-fd" role="function">
<title>g_cancellable_get_fd ()</title>
<indexterm zone="g-cancellable-get-fd"><primary sortas="cancellable_get_fd">g_cancellable_get_fd</primary></indexterm><programlisting><link linkend="int">int</link>                 g_cancellable_get_fd                (<link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Gets the file descriptor for a cancellable job. This can be used to
implement cancellable operations on Unix systems. The returned fd will
turn readable when <parameter>cancellable</parameter> is cancelled.
</para>
<para>
See also <link linkend="g-cancellable-make-pollfd"><function>g_cancellable_make_pollfd()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A valid file descriptor. <link linkend="1--CAPS"><literal>-1</literal></link> if the file descriptor 
is not supported, or on errors. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-make-pollfd" role="function">
<title>g_cancellable_make_pollfd ()</title>
<indexterm zone="g-cancellable-make-pollfd"><primary sortas="cancellable_make_pollfd">g_cancellable_make_pollfd</primary></indexterm><programlisting><link linkend="void">void</link>                g_cancellable_make_pollfd           (<link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GPollFD">GPollFD</link> *pollfd);</programlisting>
<para>
Creates a <link linkend="GPollFD"><type>GPollFD</type></link> corresponding to <parameter>cancellable</parameter>; this can be passed
to <link linkend="g-poll"><function>g_poll()</function></link> and used to poll for cancellation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pollfd</parameter>&#160;:</term>
<listitem><simpara> a pointer to a <link linkend="GPollFD"><type>GPollFD</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-get-current" role="function">
<title>g_cancellable_get_current ()</title>
<indexterm zone="g-cancellable-get-current"><primary sortas="cancellable_get_current">g_cancellable_get_current</primary></indexterm><programlisting><link linkend="GCancellable">GCancellable</link> *      g_cancellable_get_current           (void);</programlisting>
<para>
Gets the top cancellable from the stack.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link> from the top of the stack, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
if the stack is empty. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-pop-current" role="function">
<title>g_cancellable_pop_current ()</title>
<indexterm zone="g-cancellable-pop-current"><primary sortas="cancellable_pop_current">g_cancellable_pop_current</primary></indexterm><programlisting><link linkend="void">void</link>                g_cancellable_pop_current           (<link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Pops <parameter>cancellable</parameter> off the cancellable stack (verifying that <parameter>cancellable</parameter> 
is on the top of the stack).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-push-current" role="function">
<title>g_cancellable_push_current ()</title>
<indexterm zone="g-cancellable-push-current"><primary sortas="cancellable_push_current">g_cancellable_push_current</primary></indexterm><programlisting><link linkend="void">void</link>                g_cancellable_push_current          (<link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Pushes <parameter>cancellable</parameter> onto the cancellable stack. The current
cancllable can then be recieved using <link linkend="g-cancellable-get-current"><function>g_cancellable_get_current()</function></link>.
</para>
<para>
This is useful when implementing cancellable operations in
code that does not allow you to pass down the cancellable object.
</para>
<para>
This is typically called automatically by e.g. <link linkend="GFile"><type>GFile</type></link> operations,
so you rarely have to call this yourself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-reset" role="function">
<title>g_cancellable_reset ()</title>
<indexterm zone="g-cancellable-reset"><primary sortas="cancellable_reset">g_cancellable_reset</primary></indexterm><programlisting><link linkend="void">void</link>                g_cancellable_reset                 (<link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Resets <parameter>cancellable</parameter> to its uncancelled state.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-cancellable-cancel" role="function">
<title>g_cancellable_cancel ()</title>
<indexterm zone="g-cancellable-cancel"><primary sortas="cancellable_cancel">g_cancellable_cancel</primary></indexterm><programlisting><link linkend="void">void</link>                g_cancellable_cancel                (<link linkend="GCancellable">GCancellable</link> *cancellable);</programlisting>
<para>
Will set <parameter>cancellable</parameter> to cancelled, and will emit the
<link linkend="GCancellable-cancelled"><type>"cancelled"</type></link> signal. (However, see the warning about
race conditions in the documentation for that signal if you are
planning to connect to it.)
</para>
<para>
This function is thread-safe. In other words, you can safely call
it from a thread other than the one running the operation that was
passed the <parameter>cancellable</parameter>.
</para>
<para>
The convention within gio is that cancelling an asynchronous
operation causes it to complete asynchronously. That is, if you
cancel the operation from the same thread in which it is running,
then the operation's <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> will not be invoked until
the application returns to the main loop.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="GCancellable.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GCancellable-cancelled" role="signal"><title>The <literal>&quot;cancelled&quot;</literal> signal</title>
<indexterm zone="GCancellable-cancelled"><primary sortas="Cancellable::cancelled">GCancellable::cancelled</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GCancellable">GCancellable</link> *cancellable,
                                                        <link linkend="gpointer">gpointer</link>      user_data)        : Run Last</programlisting>
<para>
Emitted when the operation has been cancelled.
</para>
<para>
Can be used by implementations of cancellable operations. If the
operation is cancelled from another thread, the signal will be
emitted in the thread that cancelled the operation, not the
thread that is running the operation.
</para>
<para>
Note that disconnecting from this signal (or any signal) in a
multi-threaded program is prone to race conditions, and it is
possible that a signal handler may be invoked even
<emphasis>after</emphasis> a call to
<link linkend="g-signal-handler-disconnect"><function>g_signal_handler_disconnect()</function></link> for that handler has already
returned. Therefore, code such as the following is wrong in a
multi-threaded program:
</para>
<para>
<informalexample><programlisting>
    my_data = my_data_new (...);
    id = g_signal_connect (cancellable, "cancelled",
                           G_CALLBACK (cancelled_handler), my_data);
    /<!-- -->* cancellable operation here... *<!-- -->/

    g_signal_handler_disconnect (cancellable, id);
    my_data_free (my_data);  /<!-- -->* WRONG! *<!-- -->/
    /<!-- -->* if g_cancellable_cancel() is called from another
     * thread, cancelled_handler() may be running at this point,
     * so it's not safe to free my_data.
     *<!-- -->/
</programlisting></informalexample>
</para>
<para>
The correct way to free data (or otherwise clean up temporary
state) in this situation is to use <link linkend="g-signal-connect-data"><function>g_signal_connect_data()</function></link> (or
<link linkend="g-signal-connect-closure"><function>g_signal_connect_closure()</function></link>) to connect to the signal, and do the
cleanup from a <link linkend="GClosureNotify"><type>GClosureNotify</type></link>, which will not be called until
after the signal handler is both removed and not running:
</para>
<para>
<informalexample><programlisting>
static void
cancelled_disconnect_notify (gpointer my_data, GClosure *closure)
{
  my_data_free (my_data);
}

...

    my_data = my_data_new (...);
    id = g_signal_connect_data (cancellable, "cancelled",
                                G_CALLBACK (cancelled_handler), my_data,
                                cancelled_disconnect_notify, 0);

    /<!-- -->* cancellable operation here... *<!-- -->/

    g_signal_handler_disconnect (cancellable, id);
    /<!-- -->* cancelled_disconnect_notify() may or may not have
     * already been called at this point, so the code has to treat
     * my_data as though it has been freed.
     *<!-- -->/
</programlisting></informalexample></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GCancellable"><type>GCancellable</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>

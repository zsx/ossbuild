<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GFileEnumerator">
<refmeta>
<refentrytitle role="top_of_page" id="GFileEnumerator.top_of_page">GFileEnumerator</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GIO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GFileEnumerator</refname>
<refpurpose>Enumerated Files Routines</refpurpose>
</refnamediv>

<refsynopsisdiv id="GFileEnumerator.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gio/gio.h&gt;

                    <link linkend="GFileEnumerator-struct">GFileEnumerator</link>;
<link linkend="GFileInfo">GFileInfo</link> *         <link linkend="g-file-enumerator-next-file">g_file_enumerator_next_file</link>         (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="g-file-enumerator-close">g_file_enumerator_close</link>             (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="g-file-enumerator-next-files-async">g_file_enumerator_next_files_async</link>  (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="int">int</link> num_files,
                                                         <link linkend="int">int</link> io_priority,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="GList">GList</link> *             <link linkend="g-file-enumerator-next-files-finish">g_file_enumerator_next_files_finish</link> (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>                <link linkend="g-file-enumerator-close-async">g_file_enumerator_close_async</link>       (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="int">int</link> io_priority,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="g-file-enumerator-close-finish">g_file_enumerator_close_finish</link>      (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="g-file-enumerator-is-closed">g_file_enumerator_is_closed</link>         (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator);
<link linkend="gboolean">gboolean</link>            <link linkend="g-file-enumerator-has-pending">g_file_enumerator_has_pending</link>       (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator);
<link linkend="void">void</link>                <link linkend="g-file-enumerator-set-pending">g_file_enumerator_set_pending</link>       (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="gboolean">gboolean</link> pending);
<link linkend="GFile">GFile</link> *             <link linkend="g-file-enumerator-get-container">g_file_enumerator_get_container</link>     (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GFileEnumerator.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GFileEnumerator
</synopsis>
</refsect1>





<refsect1 id="GFileEnumerator.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="GFileEnumerator--container">container</link>&quot;                <link linkend="GFile">GFile</link>*                : Write / Construct Only
</synopsis>
</refsect1>



<refsect1 id="GFileEnumerator.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> allows you to operate on a set of <link linkend="GFile"><type>GFile</type></link><!-- -->s, 
returning a <link linkend="GFileInfo"><type>GFileInfo</type></link> structure for each file enumerated (e.g. 
<link linkend="g-file-enumerate-children"><function>g_file_enumerate_children()</function></link> will return a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> for each 
of the children within a directory).
</para>
<para>
To get the next file's information from a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>, use 
<link linkend="g-file-enumerator-next-file"><function>g_file_enumerator_next_file()</function></link> or its asynchronous version, 
<link linkend="g-file-enumerator-next-file-async"><function>g_file_enumerator_next_file_async()</function></link>. Note that the asynchronous 
version will return a list of <link linkend="GFileInfo"><type>GFileInfo</type></link><!---->s, whereas the 
synchronous will only return the next file in the enumerator.
</para>
<para>
To close a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>, use <link linkend="g-file-enumerator-close"><function>g_file_enumerator_close()</function></link>, or 
its asynchronous version, <link linkend="g-file-enumerator-close-async"><function>g_file_enumerator_close_async()</function></link>. Once 
a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> is closed, no further actions may be performed 
on it, and it should be freed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.</para>
<para>
</para>
</refsect1>

<refsect1 id="GFileEnumerator.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GFileEnumerator-struct" role="struct">
<title>GFileEnumerator</title>
<indexterm zone="GFileEnumerator-struct"><primary sortas="FileEnumerator">GFileEnumerator</primary></indexterm><programlisting>typedef struct _GFileEnumerator GFileEnumerator;</programlisting>
<para>
A per matched file iterator.</para>
<para>
</para><variablelist role="struct">
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-next-file" role="function">
<title>g_file_enumerator_next_file ()</title>
<indexterm zone="g-file-enumerator-next-file"><primary sortas="file_enumerator_next_file">g_file_enumerator_next_file</primary></indexterm><programlisting><link linkend="GFileInfo">GFileInfo</link> *         g_file_enumerator_next_file         (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Returns information for the next file in the enumerated object.
Will block until the information is available. The <link linkend="GFileInfo"><type>GFileInfo</type></link> 
returned from this function will contain attributes that match the 
attribute string that was passed when the <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link> was created.
</para>
<para>
On error, returns <link linkend="NULL--CAPS"><literal>NULL</literal></link> and sets <parameter>error</parameter> to the error. If the
enumerator is at the end, <link linkend="NULL--CAPS"><literal>NULL</literal></link> will be returned and <parameter>error</parameter> will
be unset.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> location to store the error occuring, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GFileInfo"><type>GFileInfo</type></link> or <link linkend="NULL--CAPS"><literal>NULL</literal></link> on error or end of enumerator.
   Free the returned object with <link linkend="g-object-unref"><function>g_object_unref()</function></link> when no longer needed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-close" role="function">
<title>g_file_enumerator_close ()</title>
<indexterm zone="g-file-enumerator-close"><primary sortas="file_enumerator_close">g_file_enumerator_close</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_file_enumerator_close             (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Releases all resources used by this enumerator, making the
enumerator return <link linkend="G-IO-ERROR-CLOSED--CAPS"><literal>G_IO_ERROR_CLOSED</literal></link> on all calls.
</para>
<para>
This will be automatically called when the last reference
is dropped, but you might want to call this function to make 
sure resources are released as early as possible.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> location to store the error occuring, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> on success or <link linkend="FALSE--CAPS"><type>FALSE</type></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-next-files-async" role="function">
<title>g_file_enumerator_next_files_async ()</title>
<indexterm zone="g-file-enumerator-next-files-async"><primary sortas="file_enumerator_next_files_async">g_file_enumerator_next_files_async</primary></indexterm><programlisting><link linkend="void">void</link>                g_file_enumerator_next_files_async  (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="int">int</link> num_files,
                                                         <link linkend="int">int</link> io_priority,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Request information for a number of files from the enumerator asynchronously.
When all i/o for the operation is finished the <parameter>callback</parameter> will be called with
the requested information. 
</para>
<para>
The callback can be called with less than <parameter>num_files</parameter> files in case of error
or at the end of the enumerator. In case of a partial error the callback will
be called with any succeeding items and no error, and on the next request the
error will be reported. If a request is cancelled the callback will be called
with <link linkend="G-IO-ERROR-CANCELLED--CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link>.
</para>
<para>
During an async request no other sync and async calls are allowed, and will
result in <link linkend="G-IO-ERROR-PENDING--CAPS"><literal>G_IO_ERROR_PENDING</literal></link> errors. 
</para>
<para>
Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is <link linkend="G-PRIORITY-DEFAULT--CAPS"><literal>G_PRIORITY_DEFAULT</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_files</parameter>&#160;:</term>
<listitem><simpara> the number of file info objects to request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>io_priority</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="gioscheduler">io priority</link> 
    of the request. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the data to pass to callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-next-files-finish" role="function">
<title>g_file_enumerator_next_files_finish ()</title>
<indexterm zone="g-file-enumerator-next-files-finish"><primary sortas="file_enumerator_next_files_finish">g_file_enumerator_next_files_finish</primary></indexterm><programlisting><link linkend="GList">GList</link> *             g_file_enumerator_next_files_finish (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes the asynchronous operation started with <link linkend="g-file-enumerator-next-files-async"><function>g_file_enumerator_next_files_async()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> location to store the error occuring, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to 
ignore.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="GList"><type>GList</type></link> of <link linkend="GFileInfo"><type>GFileInfo</type></link><!---->s. You must free the list with 
    <link linkend="g-list-free"><function>g_list_free()</function></link> and unref the infos with g_object_unref when you're 
    done with them.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-close-async" role="function">
<title>g_file_enumerator_close_async ()</title>
<indexterm zone="g-file-enumerator-close-async"><primary sortas="file_enumerator_close_async">g_file_enumerator_close_async</primary></indexterm><programlisting><link linkend="void">void</link>                g_file_enumerator_close_async       (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="int">int</link> io_priority,
                                                         <link linkend="GCancellable">GCancellable</link> *cancellable,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Asynchronously closes the file enumerator. 
</para>
<para>
If <parameter>cancellable</parameter> is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED--CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be returned in 
<link linkend="g-file-enumerator-close-finish"><function>g_file_enumerator_close_finish()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>io_priority</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="io-priority">I/O priority</link> 
    of the request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cancellable</parameter>&#160;:</term>
<listitem><simpara> optional <link linkend="GCancellable"><type>GCancellable</type></link> object, <link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the request is satisfied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the data to pass to callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-close-finish" role="function">
<title>g_file_enumerator_close_finish ()</title>
<indexterm zone="g-file-enumerator-close-finish"><primary sortas="file_enumerator_close_finish">g_file_enumerator_close_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_file_enumerator_close_finish      (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *result,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes closing a file enumerator, started from <link linkend="g-file-enumerator-close-async"><function>g_file_enumerator_close_async()</function></link>.
</para>
<para>
If the file enumerator was already closed when <link linkend="g-file-enumerator-close-async"><function>g_file_enumerator_close_async()</function></link> 
was called, then this function will report <link linkend="G-IO-ERROR-CLOSED--CAPS"><literal>G_IO_ERROR_CLOSED</literal></link> in <parameter>error</parameter>, and 
return <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>. If the file enumerator had pending operation when the close 
operation was started, then this function will report <link linkend="G-IO-ERROR-PENDING--CAPS"><literal>G_IO_ERROR_PENDING</literal></link>, and
return <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.  If <parameter>cancellable</parameter> was not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, then the operation may have been 
cancelled by triggering the cancellable object from another thread. If the operation
was cancelled, the error <link linkend="G-IO-ERROR-CANCELLED--CAPS"><literal>G_IO_ERROR_CANCELLED</literal></link> will be set, and <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> will be 
returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GError"><type>GError</type></link> location to store the error occuring, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to 
ignore.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the close operation has finished successfully.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-is-closed" role="function">
<title>g_file_enumerator_is_closed ()</title>
<indexterm zone="g-file-enumerator-is-closed"><primary sortas="file_enumerator_is_closed">g_file_enumerator_is_closed</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_file_enumerator_is_closed         (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator);</programlisting>
<para>
Checks if the file enumerator has been closed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the <parameter>enumerator</parameter> is closed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-has-pending" role="function">
<title>g_file_enumerator_has_pending ()</title>
<indexterm zone="g-file-enumerator-has-pending"><primary sortas="file_enumerator_has_pending">g_file_enumerator_has_pending</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g_file_enumerator_has_pending       (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator);</programlisting>
<para>
Checks if the file enumerator has pending operations.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the <parameter>enumerator</parameter> has pending operations.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-set-pending" role="function">
<title>g_file_enumerator_set_pending ()</title>
<indexterm zone="g-file-enumerator-set-pending"><primary sortas="file_enumerator_set_pending">g_file_enumerator_set_pending</primary></indexterm><programlisting><link linkend="void">void</link>                g_file_enumerator_set_pending       (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator,
                                                         <link linkend="gboolean">gboolean</link> pending);</programlisting>
<para>
Sets the file enumerator as having pending operations.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pending</parameter>&#160;:</term>
<listitem><simpara> a boolean value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g-file-enumerator-get-container" role="function" condition="since:2.18.">
<title>g_file_enumerator_get_container ()</title>
<indexterm zone="g-file-enumerator-get-container" role="2.18."><primary sortas="file_enumerator_get_container">g_file_enumerator_get_container</primary></indexterm><programlisting><link linkend="GFile">GFile</link> *             g_file_enumerator_get_container     (<link linkend="GFileEnumerator">GFileEnumerator</link> *enumerator);</programlisting>
<para>
Get the <link linkend="GFile"><type>GFile</type></link> container which is being enumerated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>enumerator</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GFileEnumerator"><type>GFileEnumerator</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GFile"><type>GFile</type></link> which is being enumerated.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.18.</para></refsect2>

</refsect1>
<refsect1 id="GFileEnumerator.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GFileEnumerator--container" role="property"><title>The <literal>&quot;container&quot;</literal> property</title>
<indexterm zone="GFileEnumerator--container"><primary sortas="FileEnumerator:container">GFileEnumerator:container</primary></indexterm><programlisting>  &quot;container&quot;                <link linkend="GFile">GFile</link>*                : Write / Construct Only</programlisting>
<para>The container that is being enumerated.</para></refsect2>
</refsect1>




</refentry>

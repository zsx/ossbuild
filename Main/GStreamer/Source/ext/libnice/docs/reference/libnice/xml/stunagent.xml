<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libnice-StunAgent">
<refmeta>
<refentrytitle role="top_of_page" id="libnice-StunAgent.top_of_page">StunAgent</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBNICE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>StunAgent</refname>
<refpurpose>STUN agent for building and validating STUN messages</refpurpose>
</refnamediv>
<refsect1 id="libnice-StunAgent.stability-level">
<title>Stability Level</title>
Stable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="libnice-StunAgent.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;stun/stunagent.h&gt;

typedef             <link linkend="StunAgent">StunAgent</link>;
enum                <link linkend="StunCompatibility">StunCompatibility</link>;
enum                <link linkend="StunAgentUsageFlags">StunAgentUsageFlags</link>;
enum                <link linkend="StunValidationStatus">StunValidationStatus</link>;
<link linkend="bool">bool</link>                (<link linkend="StunMessageIntegrityValidate">*StunMessageIntegrityValidate</link>)     (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *message,
                                                         <link linkend="uint8-t">uint8_t</link> *username,
                                                         <link linkend="uint16-t">uint16_t</link> username_len,
                                                         <link linkend="uint8-t">uint8_t</link> **password,
                                                         <link linkend="size-t">size_t</link> *password_len,
                                                         <link linkend="void">void</link> *user_data);
                    <link linkend="StunDefaultValidaterData">StunDefaultValidaterData</link>;
<link linkend="void">void</link>                <link linkend="stun-agent-init">stun_agent_init</link>                     (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         const <link linkend="uint16-t">uint16_t</link> *known_attributes,
                                                         <link linkend="StunCompatibility">StunCompatibility</link> compatibility,
                                                         <link linkend="StunAgentUsageFlags">StunAgentUsageFlags</link> usage_flags);
<link linkend="StunValidationStatus">StunValidationStatus</link>  <link linkend="stun-agent-validate">stun_agent_validate</link>               (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         const <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         <link linkend="StunMessageIntegrityValidate">StunMessageIntegrityValidate</link> validater,
                                                         <link linkend="void">void</link> *validater_data);
<link linkend="bool">bool</link>                <link linkend="stun-agent-default-validater">stun_agent_default_validater</link>        (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *message,
                                                         <link linkend="uint8-t">uint8_t</link> *username,
                                                         <link linkend="uint16-t">uint16_t</link> username_len,
                                                         <link linkend="uint8-t">uint8_t</link> **password,
                                                         <link linkend="size-t">size_t</link> *password_len,
                                                         <link linkend="void">void</link> *user_data);
<link linkend="bool">bool</link>                <link linkend="stun-agent-init-request">stun_agent_init_request</link>             (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         <link linkend="StunMethod">StunMethod</link> m);
<link linkend="bool">bool</link>                <link linkend="stun-agent-init-indication">stun_agent_init_indication</link>          (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         <link linkend="StunMethod">StunMethod</link> m);
<link linkend="bool">bool</link>                <link linkend="stun-agent-init-response">stun_agent_init_response</link>            (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="StunMessage">StunMessage</link> *request);
<link linkend="bool">bool</link>                <link linkend="stun-agent-init-error">stun_agent_init_error</link>               (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="StunMessage">StunMessage</link> *request,
                                                         <link linkend="StunError">StunError</link> err);
<link linkend="size-t">size_t</link>              <link linkend="stun-agent-build-unknown-attributes-error">stun_agent_build_unknown_attributes_error</link>
                                                        (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="StunMessage">StunMessage</link> *request);
<link linkend="size-t">size_t</link>              <link linkend="stun-agent-finish-message">stun_agent_finish_message</link>           (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         const <link linkend="uint8-t">uint8_t</link> *key,
                                                         <link linkend="size-t">size_t</link> key_len);
<link linkend="bool">bool</link>                <link linkend="stun-agent-forget-transaction">stun_agent_forget_transaction</link>       (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunTransactionId">StunTransactionId</link> id);
<link linkend="void">void</link>                <link linkend="stun-debug-enable">stun_debug_enable</link>                   (void);
<link linkend="void">void</link>                <link linkend="stun-debug-disable">stun_debug_disable</link>                  (void);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libnice-StunAgent.description" role="desc">
<title role="desc.title">Description</title>
<para>
The STUN Agent allows you to create and validate STUN messages easily.
It's main purpose is to make sure the building and validation methods used
are compatible with the RFC you create it with. It also tracks the transaction
ids of the requests you send, so you can validate if a STUN response you
received should be processed by that agent or not.</para>
<para>
</para>
</refsect1>

<refsect1 id="libnice-StunAgent.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="StunAgent" role="typedef">
<title>StunAgent</title>
<indexterm zone="StunAgent"><primary sortas="StunAgent">StunAgent</primary></indexterm><para>
An opaque structure representing the STUN agent.</para>
<para>
</para></refsect2>
<refsect2 id="StunCompatibility" role="enum">
<title>enum StunCompatibility</title>
<indexterm zone="StunCompatibility"><primary sortas="StunCompatibility">StunCompatibility</primary></indexterm><programlisting>typedef enum {
  STUN_COMPATIBILITY_RFC3489,
  STUN_COMPATIBILITY_RFC5389,
  STUN_COMPATIBILITY_WLM2009,
  STUN_COMPATIBILITY_LAST = STUN_COMPATIBILITY_WLM2009
} StunCompatibility;
</programlisting>
<para>
Enum that specifies the STUN compatibility mode of the <link linkend="StunAgent"><type>StunAgent</type></link></para>
<para>
</para><variablelist role="enum">
<varlistentry id="STUN-COMPATIBILITY-RFC3489--CAPS" role="constant">
<term><literal>STUN_COMPATIBILITY_RFC3489</literal></term>
<listitem><simpara> Use the STUN specifications compatible with
RFC 3489
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-COMPATIBILITY-RFC5389--CAPS" role="constant">
<term><literal>STUN_COMPATIBILITY_RFC5389</literal></term>
<listitem><simpara> Use the STUN specifications compatible with
RFC 5389
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-COMPATIBILITY-WLM2009--CAPS" role="constant">
<term><literal>STUN_COMPATIBILITY_WLM2009</literal></term>
<listitem><simpara> Use the STUN specifications compatible with
Windows Live Messenger 2009 (a mix between RFC3489 and RFC5389, as well as
a special usecase against a typo in their code)
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-COMPATIBILITY-LAST--CAPS" role="constant">
<term><literal>STUN_COMPATIBILITY_LAST</literal></term>
<listitem><simpara> Dummy last compatibility mode
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="StunAgentUsageFlags" role="enum">
<title>enum StunAgentUsageFlags</title>
<indexterm zone="StunAgentUsageFlags"><primary sortas="StunAgentUsageFlags">StunAgentUsageFlags</primary></indexterm><programlisting>typedef enum {
  STUN_AGENT_USAGE_SHORT_TERM_CREDENTIALS    = (1 &lt;&lt; 0),
  STUN_AGENT_USAGE_LONG_TERM_CREDENTIALS     = (1 &lt;&lt; 1),
  STUN_AGENT_USAGE_USE_FINGERPRINT           = (1 &lt;&lt; 2),
  STUN_AGENT_USAGE_ADD_SOFTWARE              = (1 &lt;&lt; 3),
  STUN_AGENT_USAGE_IGNORE_CREDENTIALS        = (1 &lt;&lt; 4),
  STUN_AGENT_USAGE_NO_INDICATION_AUTH        = (1 &lt;&lt; 5),
  STUN_AGENT_USAGE_FORCE_VALIDATER           = (1 &lt;&lt; 6),
} StunAgentUsageFlags;
</programlisting>
<para>
This enum defines a bitflag usages for a <link linkend="StunAgent"><type>StunAgent</type></link> and they will define how
the agent should behave, independently of the compatibility mode it uses.
<para> See also: <link linkend="stun-agent-init"><function>stun_agent_init()</function></link> </para>
<para> See also: <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link> </para></para>
<para>
</para><variablelist role="enum">
<varlistentry id="STUN-AGENT-USAGE-SHORT-TERM-CREDENTIALS--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_SHORT_TERM_CREDENTIALS</literal></term>
<listitem><simpara> The agent should be using the short
term credentials mechanism for authenticating STUN messages
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-AGENT-USAGE-LONG-TERM-CREDENTIALS--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_LONG_TERM_CREDENTIALS</literal></term>
<listitem><simpara> The agent should be using the long
term credentials mechanism for authenticating STUN messages
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-AGENT-USAGE-USE-FINGERPRINT--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_USE_FINGERPRINT</literal></term>
<listitem><simpara> The agent should add the FINGERPRINT
attribute to the STUN messages it creates.
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-AGENT-USAGE-ADD-SOFTWARE--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_ADD_SOFTWARE</literal></term>
<listitem><simpara> The agent should add the SOFTWARE attribute
to the STUN messages it creates
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-AGENT-USAGE-IGNORE-CREDENTIALS--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_IGNORE_CREDENTIALS</literal></term>
<listitem><simpara> The agent should ignore any credentials
in the STUN messages it receives (the MESSAGE-INTEGRITY attribute
will never be validated by <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link>)
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-AGENT-USAGE-NO-INDICATION-AUTH--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_NO_INDICATION_AUTH</literal></term>
<listitem><simpara> The agent should ignore credentials
in the STUN messages it receives if the <link linkend="StunClass"><type>StunClass</type></link> of the message is
<link linkend="STUN-INDICATION--CAPS"><type>STUN_INDICATION</type></link> (some implementation require <link linkend="STUN-INDICATION--CAPS"><type>STUN_INDICATION</type></link> messages to
be authenticated, while others never add a MESSAGE-INTEGRITY attribute to a
<link linkend="STUN-INDICATION--CAPS"><type>STUN_INDICATION</type></link> message)
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-AGENT-USAGE-FORCE-VALIDATER--CAPS" role="constant">
<term><literal>STUN_AGENT_USAGE_FORCE_VALIDATER</literal></term>
<listitem><simpara> The agent should always try to validate
the password of a STUN message, even if it already knows what the password
should be (a response to a previously created request). This means that the
<link linkend="StunMessageIntegrityValidate"><type>StunMessageIntegrityValidate</type></link> callback will always be called when there is
a MESSAGE-INTEGRITY attribute.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="StunValidationStatus" role="enum">
<title>enum StunValidationStatus</title>
<indexterm zone="StunValidationStatus"><primary sortas="StunValidationStatus">StunValidationStatus</primary></indexterm><programlisting>typedef enum {
  STUN_VALIDATION_SUCCESS,
  STUN_VALIDATION_NOT_STUN,
  STUN_VALIDATION_INCOMPLETE_STUN,
  STUN_VALIDATION_BAD_REQUEST,
  STUN_VALIDATION_UNAUTHORIZED_BAD_REQUEST,
  STUN_VALIDATION_UNAUTHORIZED,
  STUN_VALIDATION_UNMATCHED_RESPONSE,
  STUN_VALIDATION_UNKNOWN_REQUEST_ATTRIBUTE,
  STUN_VALIDATION_UNKNOWN_ATTRIBUTE,
} StunValidationStatus;
</programlisting>
<para>
This enum is used as the return value of <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link> and represents
the status result of the validation of a STUN message.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="STUN-VALIDATION-SUCCESS--CAPS" role="constant">
<term><literal>STUN_VALIDATION_SUCCESS</literal></term>
<listitem><simpara> The message is validated
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-NOT-STUN--CAPS" role="constant">
<term><literal>STUN_VALIDATION_NOT_STUN</literal></term>
<listitem><simpara> This is not a valid STUN message
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-INCOMPLETE-STUN--CAPS" role="constant">
<term><literal>STUN_VALIDATION_INCOMPLETE_STUN</literal></term>
<listitem><simpara> The message seems to be valid but incomplete
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-BAD-REQUEST--CAPS" role="constant">
<term><literal>STUN_VALIDATION_BAD_REQUEST</literal></term>
<listitem><simpara> The message does not have the cookie or the
fingerprint while the agent needs it with its usage
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-UNAUTHORIZED-BAD-REQUEST--CAPS" role="constant">
<term><literal>STUN_VALIDATION_UNAUTHORIZED_BAD_REQUEST</literal></term>
<listitem><simpara> The message is valid but
unauthorized with no username and message-integrity attributes.
A BAD_REQUEST error must be generated
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-UNAUTHORIZED--CAPS" role="constant">
<term><literal>STUN_VALIDATION_UNAUTHORIZED</literal></term>
<listitem><simpara> The message is valid but unauthorized as
the username/password do not match.
An UNAUTHORIZED error must be generated
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-UNMATCHED-RESPONSE--CAPS" role="constant">
<term><literal>STUN_VALIDATION_UNMATCHED_RESPONSE</literal></term>
<listitem><simpara> The message is valid but this is a
response/error that doesn't match a previously sent request
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-UNKNOWN-REQUEST-ATTRIBUTE--CAPS" role="constant">
<term><literal>STUN_VALIDATION_UNKNOWN_REQUEST_ATTRIBUTE</literal></term>
<listitem><simpara> The message is valid but
contains one or more unknown comprehension attributes.
<link linkend="stun-agent-build-unknown-attributes-error"><function>stun_agent_build_unknown_attributes_error()</function></link> should be called
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-VALIDATION-UNKNOWN-ATTRIBUTE--CAPS" role="constant">
<term><literal>STUN_VALIDATION_UNKNOWN_ATTRIBUTE</literal></term>
<listitem><simpara> The message is valid but contains one
or more unknown comprehension attributes. This is a response, or error,
or indication message and no error response should be sent
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="StunMessageIntegrityValidate" role="function">
<title>StunMessageIntegrityValidate ()</title>
<indexterm zone="StunMessageIntegrityValidate"><primary sortas="StunMessageIntegrityValidate">StunMessageIntegrityValidate</primary></indexterm><programlisting><link linkend="bool">bool</link>                (*StunMessageIntegrityValidate)     (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *message,
                                                         <link linkend="uint8-t">uint8_t</link> *username,
                                                         <link linkend="uint16-t">uint16_t</link> username_len,
                                                         <link linkend="uint8-t">uint8_t</link> **password,
                                                         <link linkend="size-t">size_t</link> *password_len,
                                                         <link linkend="void">void</link> *user_data);</programlisting>
<para>
This is the prototype for the <parameter>validater</parameter> argument of the <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link>
function.
<para> See also: <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link> </para></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> being validated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> The username found in the <parameter>message</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>username</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> The password associated with that username. This argument is a
pointer to a byte array that must be set by the validater function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>password</parameter> which must also be set by the
validater function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> Data to give the function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the authentication was successful,
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the authentication failed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="StunDefaultValidaterData" role="struct">
<title>StunDefaultValidaterData</title>
<indexterm zone="StunDefaultValidaterData"><primary sortas="StunDefaultValidaterData">StunDefaultValidaterData</primary></indexterm><programlisting>typedef struct {
  uint8_t *username;
  size_t username_len;
  uint8_t *password;
  size_t password_len;
} StunDefaultValidaterData;
</programlisting>
<para>
This structure is used as an element of the user_data to the
<link linkend="stun-agent-default-validater"><function>stun_agent_default_validater()</function></link> function for authenticating a STUN
message during validationg.
<para> See also: <link linkend="stun-agent-default-validater"><function>stun_agent_default_validater()</function></link> </para></para>
<para>
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="uint8-t">uint8_t</link>&#160;*<structfield>username</structfield>;</term>
<listitem><simpara> The username
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="size-t">size_t</link>&#160;<structfield>username_len</structfield>;</term>
<listitem><simpara> The length of the <parameter>username</parameter>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="uint8-t">uint8_t</link>&#160;*<structfield>password</structfield>;</term>
<listitem><simpara> The password
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="size-t">size_t</link>&#160;<structfield>password_len</structfield>;</term>
<listitem><simpara> The length of the <parameter>password</parameter>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-init" role="function">
<title>stun_agent_init ()</title>
<indexterm zone="stun-agent-init"><primary sortas="stun_agent_init">stun_agent_init</primary></indexterm><programlisting><link linkend="void">void</link>                stun_agent_init                     (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         const <link linkend="uint16-t">uint16_t</link> *known_attributes,
                                                         <link linkend="StunCompatibility">StunCompatibility</link> compatibility,
                                                         <link linkend="StunAgentUsageFlags">StunAgentUsageFlags</link> usage_flags);</programlisting>
<para>
This function must be called to initialize an agent before it is being used.
</para>
<para>
 <note>
   <para>
    The <parameter>known_attributes</parameter> data must exist in memory as long as the <parameter>agent</parameter> is used
    </para>
    <para>
    If the <link linkend="STUN-AGENT-USAGE-SHORT-TERM-CREDENTIALS--CAPS"><type>STUN_AGENT_USAGE_SHORT_TERM_CREDENTIALS</type></link> and
    <link linkend="STUN-AGENT-USAGE-LONG-TERM-CREDENTIALS--CAPS"><type>STUN_AGENT_USAGE_LONG_TERM_CREDENTIALS</type></link> usage flags are not set, then the
    agent will default in using the short term credentials mechanism
    </para>
    <para>
    The <link linkend="STUN-AGENT-USAGE-USE-FINGERPRINT--CAPS"><type>STUN_AGENT_USAGE_USE_FINGERPRINT</type></link> and <link linkend="STUN-AGENT-USAGE-ADD-SOFTWARE--CAPS"><type>STUN_AGENT_USAGE_ADD_SOFTWARE</type></link>
    usage flags are only valid if the <link linkend="STUN-COMPATIBILITY-RFC5389--CAPS"><type>STUN_COMPATIBILITY_RFC5389</type></link> or
    <link linkend="STUN-COMPATIBILITY-WLM2009--CAPS"><type>STUN_COMPATIBILITY_WLM2009</type></link> <parameter>compatibility</parameter> is used
    </para>
 </note></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link> to initialize
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>known_attributes</parameter>&#160;:</term>
<listitem><simpara> An array of <link linkend="uint16-t"><type>uint16_t</type></link> specifying which attributes should
be known by the agent. Any STUN message received that contains a mandatory
attribute that is not in this array will yield a
<link linkend="STUN-VALIDATION-UNKNOWN-REQUEST-ATTRIBUTE--CAPS"><type>STUN_VALIDATION_UNKNOWN_REQUEST_ATTRIBUTE</type></link> or a
<link linkend="STUN-VALIDATION-UNKNOWN-ATTRIBUTE--CAPS"><type>STUN_VALIDATION_UNKNOWN_ATTRIBUTE</type></link> error when calling <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>compatibility</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunCompatibility"><type>StunCompatibility</type></link> to use for this agent. This will affect
how the agent builds and validates the STUN messages
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage_flags</parameter>&#160;:</term>
<listitem><simpara> A bitflag using <link linkend="StunAgentUsageFlags"><type>StunAgentUsageFlags</type></link> values to define which
STUN usages the agent should use.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-validate" role="function">
<title>stun_agent_validate ()</title>
<indexterm zone="stun-agent-validate"><primary sortas="stun_agent_validate">stun_agent_validate</primary></indexterm><programlisting><link linkend="StunValidationStatus">StunValidationStatus</link>  stun_agent_validate               (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         const <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         <link linkend="StunMessageIntegrityValidate">StunMessageIntegrityValidate</link> validater,
                                                         <link linkend="void">void</link> *validater_data);</programlisting>
<para>
This function is used to validate an inbound STUN message and transform its
data buffer into a <link linkend="StunMessage"><type>StunMessage</type></link>. It will take care of various validation
algorithms to make sure that the STUN message is valid and correctly
authenticated.
<para> See also: <link linkend="stun-agent-default-validater"><function>stun_agent_default_validater()</function></link> </para></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The data buffer of the STUN message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>validater</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="StunMessageIntegrityValidate"><type>StunMessageIntegrityValidate</type></link> function callback that will
be called if the agent needs to validate a MESSAGE-INTEGRITY attribute. It
will only be called if the agent finds a message that needs authentication
and a USERNAME is present in the STUN message, but no password is known.
The validater will not be called if the <link linkend="STUN-AGENT-USAGE-IGNORE-CREDENTIALS--CAPS"><type>STUN_AGENT_USAGE_IGNORE_CREDENTIALS</type></link>
usage flag is set on the agent, and it will always be called if the
<link linkend="STUN-AGENT-USAGE-FORCE-VALIDATER--CAPS"><type>STUN_AGENT_USAGE_FORCE_VALIDATER</type></link> usage flag is set on the agent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>validater_data</parameter>&#160;:</term>
<listitem><simpara> A user data to give to the <parameter>validater</parameter> callback when it gets
called.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="StunValidationStatus"><type>StunValidationStatus</type></link>
 <note>
   <para>
   if the return value is different from <link linkend="STUN-VALIDATION-NOT-STUN--CAPS"><type>STUN_VALIDATION_NOT_STUN</type></link> or
   <link linkend="STUN-VALIDATION-INCOMPLETE-STUN--CAPS"><type>STUN_VALIDATION_INCOMPLETE_STUN</type></link>, then the <parameter>msg</parameter> argument will contain a valid
   STUN message that can be used.
   This means that you can use the <parameter>msg</parameter> variable as the <parameter>request</parameter> argument to
   functions like <link linkend="stun-agent-init-error"><function>stun_agent_init_error()</function></link> or
   <link linkend="stun-agent-build-unknown-attributes-error"><function>stun_agent_build_unknown_attributes_error()</function></link>.
   If the return value is <link linkend="STUN-VALIDATION-BAD-REQUEST--CAPS"><type>STUN_VALIDATION_BAD_REQUEST</type></link>,
   <link linkend="STUN-VALIDATION-UNAUTHORIZED--CAPS"><type>STUN_VALIDATION_UNAUTHORIZED</type></link> or <link linkend="STUN-VALIDATION-UNAUTHORIZED-BAD-REQUEST--CAPS"><type>STUN_VALIDATION_UNAUTHORIZED_BAD_REQUEST</type></link>
   then the <parameter>key</parameter> in the <link linkend="StunMessage"><type>StunMessage</type></link> will not be set, so that error responses
   will not have a MESSAGE-INTEGRITY attribute.
   </para>
 </note>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-default-validater" role="function">
<title>stun_agent_default_validater ()</title>
<indexterm zone="stun-agent-default-validater"><primary sortas="stun_agent_default_validater">stun_agent_default_validater</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_agent_default_validater        (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *message,
                                                         <link linkend="uint8-t">uint8_t</link> *username,
                                                         <link linkend="uint16-t">uint16_t</link> username_len,
                                                         <link linkend="uint8-t">uint8_t</link> **password,
                                                         <link linkend="size-t">size_t</link> *password_len,
                                                         <link linkend="void">void</link> *user_data);</programlisting>
<para>
This is a helper function to be used with <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link>. If no
complicated processing of the username needs to be done, this function can
be used with <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link> to quickly and easily match the username
of a STUN message with its password. Its <parameter>user_data</parameter> argument must be an array
of <link linkend="StunDefaultValidaterData"><type>StunDefaultValidaterData</type></link> which will allow us to map a username to a
password
<para> See also: <link linkend="stun-agent-validate"><function>stun_agent_validate()</function></link> </para></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> being validated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> The username found in the <parameter>message</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>username</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> The password associated with that username. This argument is a
pointer to a byte array that must be set by the validater function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>password</parameter> which must also be set by the
validater function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> This must be an array of <link linkend="StunDefaultValidaterData"><type>StunDefaultValidaterData</type></link> structures.
The last element in the array must have a username set to NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the authentication was successful,
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the authentication failed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-init-request" role="function">
<title>stun_agent_init_request ()</title>
<indexterm zone="stun-agent-init-request"><primary sortas="stun_agent_init_request">stun_agent_init_request</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_agent_init_request             (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         <link linkend="StunMethod">StunMethod</link> m);</programlisting>
<para>
Creates a new STUN message of class <link linkend="STUN-REQUEST--CAPS"><type>STUN_REQUEST</type></link> and with the method <parameter>m</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The buffer to use in the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMethod"><type>StunMethod</type></link> of the request
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the message was initialized correctly, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-init-indication" role="function">
<title>stun_agent_init_indication ()</title>
<indexterm zone="stun-agent-init-indication"><primary sortas="stun_agent_init_indication">stun_agent_init_indication</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_agent_init_indication          (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         <link linkend="StunMethod">StunMethod</link> m);</programlisting>
<para>
Creates a new STUN message of class <link linkend="STUN-INDICATION--CAPS"><type>STUN_INDICATION</type></link> and with the method <parameter>m</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The buffer to use in the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMethod"><type>StunMethod</type></link> of the indication
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the message was initialized correctly, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-init-response" role="function">
<title>stun_agent_init_response ()</title>
<indexterm zone="stun-agent-init-response"><primary sortas="stun_agent_init_response">stun_agent_init_response</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_agent_init_response            (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="StunMessage">StunMessage</link> *request);</programlisting>
<para>
Creates a new STUN message of class <link linkend="STUN-RESPONSE--CAPS"><type>STUN_RESPONSE</type></link> and with the same method
and transaction ID as the message <parameter>request</parameter>. This will also copy the pointer
to the key that was used to authenticate the request, so you won't need to
specify the key with <link linkend="stun-agent-finish-message"><function>stun_agent_finish_message()</function></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The buffer to use in the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> of class <link linkend="STUN-REQUEST--CAPS"><type>STUN_REQUEST</type></link> that this response is for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the message was initialized correctly, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-init-error" role="function">
<title>stun_agent_init_error ()</title>
<indexterm zone="stun-agent-init-error"><primary sortas="stun_agent_init_error">stun_agent_init_error</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_agent_init_error               (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="StunMessage">StunMessage</link> *request,
                                                         <link linkend="StunError">StunError</link> err);</programlisting>
<para>
Creates a new STUN message of class <link linkend="STUN-ERROR--CAPS"><type>STUN_ERROR</type></link> and with the same method
and transaction ID as the message <parameter>request</parameter>. This will also copy the pointer
to the key that was used to authenticate the request (if authenticated),
so you won't need to specify the key with <link linkend="stun-agent-finish-message"><function>stun_agent_finish_message()</function></link>.
It will then add the ERROR-CODE attribute with code <parameter>err</parameter> and the associated
string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The buffer to use in the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> of class <link linkend="STUN-REQUEST--CAPS"><type>STUN_REQUEST</type></link> that this error response
is for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunError"><type>StunError</type></link> to put in the ERROR-CODE attribute of the error response
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the message was initialized correctly, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-build-unknown-attributes-error" role="function">
<title>stun_agent_build_unknown_attributes_error ()</title>
<indexterm zone="stun-agent-build-unknown-attributes-error"><primary sortas="stun_agent_build_unknown_attributes_error">stun_agent_build_unknown_attributes_error</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              stun_agent_build_unknown_attributes_error
                                                        (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="StunMessage">StunMessage</link> *request);</programlisting>
<para>
Creates a new STUN message of class <link linkend="STUN-ERROR--CAPS"><type>STUN_ERROR</type></link> and with the same method
and transaction ID as the message <parameter>request</parameter>.  It will then add the ERROR-CODE
attribute with code <link linkend="STUN-ERROR-UNKNOWN-ATTRIBUTE--CAPS"><type>STUN_ERROR_UNKNOWN_ATTRIBUTE</type></link> and add all the unknown
mandatory attributes from the <parameter>request</parameter> STUN message in the
<link linkend="STUN-ATTRIBUTE-UNKNOWN-ATTRIBUTES--CAPS"><type>STUN_ATTRIBUTE_UNKNOWN_ATTRIBUTES</type></link> attribute, it will then finish the message
by calling <link linkend="stun-agent-finish-message"><function>stun_agent_finish_message()</function></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The buffer to use in the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> of class <link linkend="STUN-REQUEST--CAPS"><type>STUN_REQUEST</type></link> that this response is for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The size of the message built
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-finish-message" role="function">
<title>stun_agent_finish_message ()</title>
<indexterm zone="stun-agent-finish-message"><primary sortas="stun_agent_finish_message">stun_agent_finish_message</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              stun_agent_finish_message           (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         const <link linkend="uint8-t">uint8_t</link> *key,
                                                         <link linkend="size-t">size_t</link> key_len);</programlisting>
<para>
This function will 'finish' a message and make it ready to be sent. It will
add the MESSAGE-INTEGRITY and FINGERPRINT attributes if necessary. If the
STUN message has a <link linkend="STUN-REQUEST--CAPS"><type>STUN_REQUEST</type></link> class, it will save the transaction id of
the message in the agent for future matching of the response.
<para>See also: <link linkend="stun-agent-forget-transaction"><function>stun_agent_forget_transaction()</function></link></para></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to finish
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The key to use for the MESSAGE-INTEGRITY attribute
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_len</parameter>&#160;:</term>
<listitem><simpara> The length of the <parameter>key</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The final size of the message built or 0 if an error occured
<note>
     <para>
       The return value must always be checked. a value of 0 means the either
       the buffer's size is too small to contain the finishing attributes
       (MESSAGE-INTEGRITY, FINGERPRINT), or that there is no more free slots
       for saving the sent id in the agent's state.
     </para>
     <para>
       Everytime <link linkend="stun-agent-finish-message"><function>stun_agent_finish_message()</function></link> is called for a <link linkend="STUN-REQUEST--CAPS"><type>STUN_REQUEST</type></link>
       message, you must make sure to call <link linkend="stun-agent-forget-transaction"><function>stun_agent_forget_transaction()</function></link> in
       case the response times out and is never received. This is to avoid
       filling up the <link linkend="StunAgent"><type>StunAgent</type></link>'s sent ids state preventing any further
       use of the <link linkend="stun-agent-finish-message"><function>stun_agent_finish_message()</function></link>
     </para>
   </note>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-agent-forget-transaction" role="function">
<title>stun_agent_forget_transaction ()</title>
<indexterm zone="stun-agent-forget-transaction"><primary sortas="stun_agent_forget_transaction">stun_agent_forget_transaction</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_agent_forget_transaction       (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunTransactionId">StunTransactionId</link> id);</programlisting>
<para>
This function is used to make the <link linkend="StunAgent"><type>StunAgent</type></link> forget about a previously
created transaction.
<para>
This function should be called when a STUN request was previously
created with <link linkend="stun-agent-finish-message"><function>stun_agent_finish_message()</function></link> and for which no response was ever
received (timed out). The <link linkend="StunAgent"><type>StunAgent</type></link> keeps a list of the sent transactions
in order to validate the responses received. If the response is never received
this will allow the <link linkend="StunAgent"><type>StunAgent</type></link> to forget about the timed out transaction and
free its slot for future transactions.
</para></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunTransactionId"><type>StunTransactionId</type></link> of the transaction to forget
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the transaction was found, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-debug-enable" role="function">
<title>stun_debug_enable ()</title>
<indexterm zone="stun-debug-enable"><primary sortas="stun_debug_enable">stun_debug_enable</primary></indexterm><programlisting><link linkend="void">void</link>                stun_debug_enable                   (void);</programlisting>
<para>
Enable debug messages to stderr</para>
<para>
</para></refsect2>
<refsect2 id="stun-debug-disable" role="function">
<title>stun_debug_disable ()</title>
<indexterm zone="stun-debug-disable"><primary sortas="stun_debug_disable">stun_debug_disable</primary></indexterm><programlisting><link linkend="void">void</link>                stun_debug_disable                  (void);</programlisting>
<para>
Disable debug messages to stderr</para>
<para>
</para></refsect2>

</refsect1>



<refsect1 id="libnice-StunAgent.see-also">
<title>See Also</title>
#StunMessage
</refsect1>

</refentry>

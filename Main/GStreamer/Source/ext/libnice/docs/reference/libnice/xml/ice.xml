<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libnice-ICE">
<refmeta>
<refentrytitle role="top_of_page" id="libnice-ICE.top_of_page">ICE</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBNICE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ICE</refname>
<refpurpose>STUN ICE Usage</refpurpose>
</refnamediv>
<refsect1 id="libnice-ICE.stability-level">
<title>Stability Level</title>
Stable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="libnice-ICE.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;stun/usages/ice.h&gt;

enum                <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link>;
enum                <link linkend="StunUsageIceReturn">StunUsageIceReturn</link>;
<link linkend="size-t">size_t</link>              <link linkend="stun-usage-ice-conncheck-create">stun_usage_ice_conncheck_create</link>     (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="uint8-t">uint8_t</link> *username,
                                                         const <link linkend="size-t">size_t</link> username_len,
                                                         const <link linkend="uint8-t">uint8_t</link> *password,
                                                         const <link linkend="size-t">size_t</link> password_len,
                                                         <link linkend="bool">bool</link> cand_use,
                                                         <link linkend="bool">bool</link> controlling,
                                                         <link linkend="uint32-t">uint32_t</link> priority,
                                                         <link linkend="uint64-t">uint64_t</link> tie,
                                                         <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link> compatibility);
<link linkend="StunUsageIceReturn">StunUsageIceReturn</link>  <link linkend="stun-usage-ice-conncheck-process">stun_usage_ice_conncheck_process</link>    (<link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="struct-sockaddr">struct sockaddr</link> *addr,
                                                         <link linkend="socklen-t">socklen_t</link> *addrlen,
                                                         <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link> compatibility);
<link linkend="StunUsageIceReturn">StunUsageIceReturn</link>  <link linkend="stun-usage-ice-conncheck-create-reply">stun_usage_ice_conncheck_create_reply</link>
                                                        (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *req,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buf,
                                                         <link linkend="size-t">size_t</link> *plen,
                                                         const <link linkend="struct-sockaddr">struct sockaddr</link> *src,
                                                         <link linkend="socklen-t">socklen_t</link> srclen,
                                                         <link linkend="bool">bool</link> *control,
                                                         <link linkend="uint64-t">uint64_t</link> tie,
                                                         <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link> compatibility);
<link linkend="uint32-t">uint32_t</link>            <link linkend="stun-usage-ice-conncheck-priority">stun_usage_ice_conncheck_priority</link>   (const <link linkend="StunMessage">StunMessage</link> *msg);
<link linkend="bool">bool</link>                <link linkend="stun-usage-ice-conncheck-use-candidate">stun_usage_ice_conncheck_use_candidate</link>
                                                        (const <link linkend="StunMessage">StunMessage</link> *msg);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libnice-ICE.description" role="desc">
<title role="desc.title">Description</title>
<para>
The STUN ICE usage allows for easily creating and parsing STUN Binding
requests and responses used for ICE connectivity checks. The API allows you
to create a connectivity check message, parse a response or create a reply
to an incoming connectivity check request.</para>
<para>
</para>
</refsect1>

<refsect1 id="libnice-ICE.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="StunUsageIceCompatibility" role="enum">
<title>enum StunUsageIceCompatibility</title>
<indexterm zone="StunUsageIceCompatibility"><primary sortas="StunUsageIceCompatibility">StunUsageIceCompatibility</primary></indexterm><programlisting>typedef enum {
  STUN_USAGE_ICE_COMPATIBILITY_DRAFT19,
  STUN_USAGE_ICE_COMPATIBILITY_GOOGLE,
  STUN_USAGE_ICE_COMPATIBILITY_MSN,
} StunUsageIceCompatibility;
</programlisting>
<para>
This enum defines which compatibility modes this ICE usage can use</para>
<para>
</para><variablelist role="enum">
<varlistentry id="STUN-USAGE-ICE-COMPATIBILITY-DRAFT19--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_COMPATIBILITY_DRAFT19</literal></term>
<listitem><simpara> The ICE compatibility with draft 19
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-COMPATIBILITY-GOOGLE--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_COMPATIBILITY_GOOGLE</literal></term>
<listitem><simpara> The ICE compatibility with Google's
implementation of ICE
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-COMPATIBILITY-MSN--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_COMPATIBILITY_MSN</literal></term>
<listitem><simpara> The ICE compatibility with MSN's
implementation of ICE
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="StunUsageIceReturn" role="enum">
<title>enum StunUsageIceReturn</title>
<indexterm zone="StunUsageIceReturn"><primary sortas="StunUsageIceReturn">StunUsageIceReturn</primary></indexterm><programlisting>typedef enum {
  STUN_USAGE_ICE_RETURN_SUCCESS,
  STUN_USAGE_ICE_RETURN_ERROR,
  STUN_USAGE_ICE_RETURN_INVALID,
  STUN_USAGE_ICE_RETURN_ROLE_CONFLICT,
  STUN_USAGE_ICE_RETURN_INVALID_REQUEST,
  STUN_USAGE_ICE_RETURN_INVALID_METHOD,
  STUN_USAGE_ICE_RETURN_MEMORY_ERROR,
  STUN_USAGE_ICE_RETURN_INVALID_ADDRESS,
  STUN_USAGE_ICE_RETURN_NO_MAPPED_ADDRESS,
} StunUsageIceReturn;
</programlisting>
<para>
Return value of <link linkend="stun-usage-ice-conncheck-process"><function>stun_usage_ice_conncheck_process()</function></link> and
<link linkend="stun-usage-ice-conncheck-create-reply"><function>stun_usage_ice_conncheck_create_reply()</function></link> which allows you to see what
status the function call returned.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="STUN-USAGE-ICE-RETURN-SUCCESS--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_SUCCESS</literal></term>
<listitem><simpara> The function succeeded
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-ERROR--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_ERROR</literal></term>
<listitem><simpara> There was an unspecified error
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-INVALID--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_INVALID</literal></term>
<listitem><simpara> The message is invalid for processing
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-ROLE-CONFLICT--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_ROLE_CONFLICT</literal></term>
<listitem><simpara> A role conflict was detected
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-INVALID-REQUEST--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_INVALID_REQUEST</literal></term>
<listitem><simpara> The message is an not a request
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-INVALID-METHOD--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_INVALID_METHOD</literal></term>
<listitem><simpara> The method of the request is invalid
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-MEMORY-ERROR--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_MEMORY_ERROR</literal></term>
<listitem><simpara> The buffer size is too small to hold
the STUN reply
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-INVALID-ADDRESS--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_INVALID_ADDRESS</literal></term>
<listitem><simpara> The mapped address argument has
an invalid address family
</simpara></listitem>
</varlistentry>
<varlistentry id="STUN-USAGE-ICE-RETURN-NO-MAPPED-ADDRESS--CAPS" role="constant">
<term><literal>STUN_USAGE_ICE_RETURN_NO_MAPPED_ADDRESS</literal></term>
<listitem><simpara> The response is valid but no
MAPPED-ADDRESS or XOR-MAPPED-ADDRESS attribute was found
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-usage-ice-conncheck-create" role="function">
<title>stun_usage_ice_conncheck_create ()</title>
<indexterm zone="stun-usage-ice-conncheck-create"><primary sortas="stun_usage_ice_conncheck_create">stun_usage_ice_conncheck_create</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              stun_usage_ice_conncheck_create     (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buffer,
                                                         <link linkend="size-t">size_t</link> buffer_len,
                                                         const <link linkend="uint8-t">uint8_t</link> *username,
                                                         const <link linkend="size-t">size_t</link> username_len,
                                                         const <link linkend="uint8-t">uint8_t</link> *password,
                                                         const <link linkend="size-t">size_t</link> password_len,
                                                         <link linkend="bool">bool</link> cand_use,
                                                         <link linkend="bool">bool</link> controlling,
                                                         <link linkend="uint32-t">uint32_t</link> priority,
                                                         <link linkend="uint64-t">uint64_t</link> tie,
                                                         <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link> compatibility);</programlisting>
<para>
Builds an ICE connectivity check STUN message.
If the compatibility is not <link linkend="STUN-USAGE-ICE-COMPATIBILITY-DRAFT19--CAPS"><type>STUN_USAGE_ICE_COMPATIBILITY_DRAFT19</type></link>, the
<parameter>cand_use</parameter>, <parameter>controlling</parameter>, <parameter>priority</parameter> and <parameter>tie</parameter> arguments are not used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link> to use to build the request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The buffer to use for creating the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer_len</parameter>&#160;:</term>
<listitem><simpara> The size of the <parameter>buffer</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> The username to use in the request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>username</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> The key to use for building the MESSAGE-INTEGRITY
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_len</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>password</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cand_use</parameter>&#160;:</term>
<listitem><simpara> Set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to append the USE-CANDIDATE flag to the request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>controlling</parameter>&#160;:</term>
<listitem><simpara> Set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if you are the controlling agent or set to
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if you are the controlled agent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priority</parameter>&#160;:</term>
<listitem><simpara> The value of the PRIORITY attribute
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tie</parameter>&#160;:</term>
<listitem><simpara> The value of the tie-breaker to put in the ICE-CONTROLLED or
ICE-CONTROLLING attribute
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>compatibility</parameter>&#160;:</term>
<listitem><simpara> The compatibility mode to use for building the conncheck
request
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The length of the message built.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-usage-ice-conncheck-process" role="function">
<title>stun_usage_ice_conncheck_process ()</title>
<indexterm zone="stun-usage-ice-conncheck-process"><primary sortas="stun_usage_ice_conncheck_process">stun_usage_ice_conncheck_process</primary></indexterm><programlisting><link linkend="StunUsageIceReturn">StunUsageIceReturn</link>  stun_usage_ice_conncheck_process    (<link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="struct-sockaddr">struct sockaddr</link> *addr,
                                                         <link linkend="socklen-t">socklen_t</link> *addrlen,
                                                         <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link> compatibility);</programlisting>
<para>
Process an ICE connectivity check STUN message and retreive the
mapped address from the message
<para> See also <link linkend="stun-usage-ice-conncheck-priority"><function>stun_usage_ice_conncheck_priority()</function></link> and
<link linkend="stun-usage-ice-conncheck-use-candidate"><function>stun_usage_ice_conncheck_use_candidate()</function></link> </para></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to process
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>addr</parameter>&#160;:</term>
<listitem><simpara> A pointer to a <link linkend="sockaddr"><type>sockaddr</type></link> structure to fill with the mapped address
that the STUN connectivity check response contains
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>addrlen</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>addr</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>compatibility</parameter>&#160;:</term>
<listitem><simpara> The compatibility mode to use for processing the conncheck
response
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="StunUsageIceReturn"><type>StunUsageIceReturn</type></link> value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-usage-ice-conncheck-create-reply" role="function">
<title>stun_usage_ice_conncheck_create_reply ()</title>
<indexterm zone="stun-usage-ice-conncheck-create-reply"><primary sortas="stun_usage_ice_conncheck_create_reply">stun_usage_ice_conncheck_create_reply</primary></indexterm><programlisting><link linkend="StunUsageIceReturn">StunUsageIceReturn</link>  stun_usage_ice_conncheck_create_reply
                                                        (<link linkend="StunAgent">StunAgent</link> *agent,
                                                         <link linkend="StunMessage">StunMessage</link> *req,
                                                         <link linkend="StunMessage">StunMessage</link> *msg,
                                                         <link linkend="uint8-t">uint8_t</link> *buf,
                                                         <link linkend="size-t">size_t</link> *plen,
                                                         const <link linkend="struct-sockaddr">struct sockaddr</link> *src,
                                                         <link linkend="socklen-t">socklen_t</link> srclen,
                                                         <link linkend="bool">bool</link> *control,
                                                         <link linkend="uint64-t">uint64_t</link> tie,
                                                         <link linkend="StunUsageIceCompatibility">StunUsageIceCompatibility</link> compatibility);</programlisting>
<para>
Tries to parse a STUN connectivity check request and builds a
response accordingly.
 <note>
   <para>
     In case of error, the <parameter>msg</parameter> is filled with the appropriate error response
     to be sent and the value of <parameter>plen</parameter> is set to the size of that message.
     If <parameter>plen</parameter> has a size of 0, then no error response should be sent.
   </para>
 </note></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>agent</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunAgent"><type>StunAgent</type></link> to use to build the response
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req</parameter>&#160;:</term>
<listitem><simpara> The original STUN request to reply to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to build
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> The buffer to use for creating the <link linkend="StunMessage"><type>StunMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>plen</parameter>&#160;:</term>
<listitem><simpara> A pointer containing the size of the <parameter>buffer</parameter> on input.
Will contain the length of the message built on output.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> A pointer to a <link linkend="sockaddr"><type>sockaddr</type></link> structure containing the source address from
which the request was received. Will be used as the mapped address in the
response
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>srclen</parameter>&#160;:</term>
<listitem><simpara> The length of <parameter>addr</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> Set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if you are the controlling agent or set to
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if you are the controlled agent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tie</parameter>&#160;:</term>
<listitem><simpara> The value of the tie-breaker to put in the ICE-CONTROLLED or
ICE-CONTROLLING attribute
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>compatibility</parameter>&#160;:</term>
<listitem><simpara> The compatibility mode to use for building the conncheck
response
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="StunUsageIceReturn"><type>StunUsageIceReturn</type></link> value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-usage-ice-conncheck-priority" role="function">
<title>stun_usage_ice_conncheck_priority ()</title>
<indexterm zone="stun-usage-ice-conncheck-priority"><primary sortas="stun_usage_ice_conncheck_priority">stun_usage_ice_conncheck_priority</primary></indexterm><programlisting><link linkend="uint32-t">uint32_t</link>            stun_usage_ice_conncheck_priority   (const <link linkend="StunMessage">StunMessage</link> *msg);</programlisting>
<para>
Extracts the priority from a STUN message.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to parse
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> host byte order priority, or 0 if not specified.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="stun-usage-ice-conncheck-use-candidate" role="function">
<title>stun_usage_ice_conncheck_use_candidate ()</title>
<indexterm zone="stun-usage-ice-conncheck-use-candidate"><primary sortas="stun_usage_ice_conncheck_use_candidate">stun_usage_ice_conncheck_use_candidate</primary></indexterm><programlisting><link linkend="bool">bool</link>                stun_usage_ice_conncheck_use_candidate
                                                        (const <link linkend="StunMessage">StunMessage</link> *msg);</programlisting>
<para>
Extracts the USE-CANDIDATE attribute flag from a STUN message.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="StunMessage"><type>StunMessage</type></link> to parse
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the flag is set, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Splash.java
 *
 * Created on Feb 16, 2010, 2:08:58 AM
 */

package simple;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.gstreamer.swing.VideoPlayer;
import ossbuild.extract.ResourceCallback;
import ossbuild.extract.ResourceProgressListenerAdapter;
import ossbuild.extract.Resources;
import ossbuild.gstreamer.Native;

/**
 *
 * @author David
 */
public class Splash extends javax.swing.JDialog {

	//<editor-fold defaultstate="collapsed" desc="Boilerplate">
    /** Creates new form Splash */
    public Splash(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        border = new javax.swing.JPanel();
        lbl = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Loading...");
        setMinimumSize(new java.awt.Dimension(306, 100));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        border.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("controlShadow")));
        border.setLayout(new java.awt.GridBagLayout());

        lbl.setText("Loading...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        border.add(lbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        border.add(progress, gridBagConstraints);

        title.setFont(title.getFont().deriveFont(title.getFont().getSize()+8f));
        title.setText("OSSBuild GStreamer Example");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 12, 0);
        border.add(title, gridBagConstraints);

        getContentPane().add(border, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		init();
	}//GEN-LAST:event_formWindowOpened

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Splash dialog = new Splash(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel border;
    private javax.swing.JLabel lbl;
    private javax.swing.JProgressBar progress;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
	//</editor-fold>
	
	private void init() {
		
		try {
			Native.initialize(
				new ResourceProgressListenerAdapter() {
					@Override
					public void report(final int totalNumberOfResources, final int totalNumberOfPackages, final long totalNumberOfBytes, final long numberOfBytesCompleted, final int numberOfResourcesCompleted, final int numberOfPackagesCompleted, final long startTime, final long duration, final String message) {
						SwingUtilities.invokeLater(new Runnable() {
							@Override
							public void run() {
								double percent = ((double)numberOfResourcesCompleted / (double)totalNumberOfResources);
								progress.setValue(progress.getMinimum() + (int)(Math.abs(progress.getMaximum() - progress.getMinimum()) * percent));

								if (numberOfResourcesCompleted != totalNumberOfResources) {
									lbl.setText(message);
								}
							}
						});
					}

					@Override
					public void end(boolean success, int totalNumberOfResources, int totalNumberOfPackages, long totalNumberOfBytes, long numberOfBytesCompleted, int numberOfResourcesCompleted, int numberOfPackagesCompleted, long startTime, long endTime) {
						if (success) {
							SwingUtilities.invokeLater(new Runnable() {
								@Override
								public void run() {
									lbl.setText("Initializing GStreamer...");
									progress.setIndeterminate(true);
								}
							});
						}
					}
				},

				new ResourceCallback() {
					@Override
					protected void completed(Resources rsrcs, Object t) {
						try {
							Thread.currentThread().sleep(2000);

							Splash.this.setVisible(false);
							Splash.this.dispose();

							final JFileChooser choose = new JFileChooser();
							choose.setDialogTitle("Select Media File");
							choose.setMultiSelectionEnabled(true);
							final int result = choose.showOpenDialog(Splash.this);

							if (result == JFileChooser.CANCEL_OPTION)
								System.exit(0);

							for(int i = 0; i < 2; ++i) {
								SwingUtilities.invokeLater(new Runnable() {
									@Override
									public void run() {
										final List<URI> playList = new LinkedList<URI>();
										for (File f : choose.getSelectedFiles())
											playList.add(f.toURI());

										JFrame frame = new JFrame("Swing Test");

										final VideoPlayer player = new VideoPlayer(playList.get(0));
										player.setPreferredSize(new Dimension(640, 480));
										player.setControlsVisible(true);
										player.getMediaPlayer().setPlaylist(playList);
										frame.add(player, BorderLayout.CENTER);

										player.getMediaPlayer().play();
										frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
										frame.pack();
										frame.setVisible(true);
									}
								});
							}
						} catch (InterruptedException ex) {
						}
					}
				}
			);
		} catch(Throwable t) {
			setVisible(false);
			dispose();
			JOptionPane.showMessageDialog(this, "Unable to extract and load GStreamer libraries for this platform or JVM.");
			System.exit(1);
		}
	}
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_structure_to_string (IntPtr handle);

public override string ToString () {
  IntPtr raw_ret = gst_structure_to_string (Handle);
  string ret = Gst.GLib.Marshaller.PtrToStringGFree (raw_ret);
  return ret;
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern int gst_structure_n_fields (IntPtr raw);

public int Size {
  get {
    int raw_ret = gst_structure_n_fields (Handle);
    int ret = raw_ret;
    return ret;
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern bool gst_tag_list_copy_value (ref Gst.GLib.Value dest, IntPtr list, IntPtr tag);
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_tag_list_get_value_index (IntPtr raw, IntPtr tag, uint index);

public object this[string tag, uint index] {
  get {
    IntPtr raw_string = Gst.GLib.Marshaller.StringToPtrGStrdup (tag);
    IntPtr raw_ret = gst_tag_list_get_value_index (Handle, raw_string, index);
    Gst.GLib.Marshaller.Free (raw_string);

    if (raw_ret == IntPtr.Zero)
      return null;

    Gst.GLib.Value v = (Gst.GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (Gst.GLib.Value));

    return (object) v.Val;
  }
}

public object this[string tag] {
  get {
    Gst.GLib.Value v = Gst.GLib.Value.Empty;
    bool success;

    IntPtr raw_string = Gst.GLib.Marshaller.StringToPtrGStrdup (tag);
    success = gst_tag_list_copy_value (ref v, Handle, raw_string);
    Gst.GLib.Marshaller.Free (raw_string);

    if (!success)
      return null;

    object ret = (object) v.Val;
    v.Dispose ();

    return ret;
  }
}

public void Add (Gst.TagMergeMode mode, string tag, object value) {
  if (!Tag.Exists (tag))
    throw new ArgumentException (String.Format ("Invalid tag name '{0}'", tag));

  Gst.GLib.Value v = new Gst.GLib.Value (value);
  IntPtr raw_v = Gst.GLib.Marshaller.StructureToPtrAlloc (v);

  IntPtr raw_string = Gst.GLib.Marshaller.StringToPtrGStrdup (tag);
  gst_tag_list_add_value (Handle, (int) mode, raw_string, raw_v);
  Marshal.FreeHGlobal (raw_v);
  v.Dispose ();
  Gst.GLib.Marshaller.Free (raw_string);
}

public void Add (Gst.TagMergeMode mode, params object[] parameters) {
  if (parameters.Length % 2 != 0)
    throw new ArgumentException ();

  for (int i = 0; i < parameters.Length; i += 2) {
    if (parameters[i].GetType () != typeof (string))
      throw new ArgumentException ();

    Add (mode, parameters[i] as string, parameters[i+1]);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_structure_nth_field_name (IntPtr raw, uint index);

private string NthFieldName (uint index) {
  IntPtr raw_ret = gst_structure_nth_field_name (Handle, index);
  string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
  return ret;
}

public string[] Tags {
  get {
    string[] tags = new string[Size];
    for (uint i = 0; i < Size; i++)
      tags[i] = NthFieldName (i);

    return tags;
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_structure_get_value (IntPtr raw, IntPtr fieldname);

public Gst.List GetTag (string tag) {
  IntPtr raw_string = Gst.GLib.Marshaller.StringToPtrGStrdup (tag);
  IntPtr raw_ret = gst_structure_get_value (Handle, raw_string);
  Gst.GLib.Marshaller.Free (raw_string);
  Gst.GLib.Value ret = (Gst.GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (Gst.GLib.Value));

  object o = ret.Val;

  if (o.GetType () == typeof (Gst.List))
    return (Gst.List) o;

  return new Gst.List (new object[] { o });
}


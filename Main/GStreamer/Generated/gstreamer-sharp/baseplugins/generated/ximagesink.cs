using System;
using System.Collections;
using System.Runtime.InteropServices;
using Gst.GLib;
using Gst;
using Gst.Interfaces;

namespace Gst.BasePlugins {
#region Autogenerated code
	[GTypeName ("GstXImageSink")]
	public sealed class XImageSink : Gst.Video.VideoSink, Gst.ImplementsInterface, Gst.Interfaces.Navigation, Gst.Interfaces.XOverlay {
		public XImageSink (IntPtr raw) : base (raw) { }

		[DllImport("libgstreamer-0.10.dll") ]
		static extern IntPtr gst_element_factory_make (IntPtr element, IntPtr name);

		public XImageSink (string name) : base (IntPtr.Zero) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_element = Gst.GLib.Marshaller.StringToPtrGStrdup ("ximagesink");
			Raw = gst_element_factory_make (native_element, native_name);
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_element);
			if (Raw == IntPtr.Zero)
				throw new Exception ("Failed to instantiate element \"ximagesink\"");
		}

		public XImageSink () : this ((string) null) { }

		public static XImageSink Make (string name) {
			return Gst.ElementFactory.Make ("ximagesink", name) as XImageSink;
		}

		public static XImageSink Make () { return Make (null); } 

		[Gst.GLib.Property ("show-preroll-frame")]
		public bool ShowPrerollFrame {
			get {
				Gst.GLib.Value val = GetProperty ("show-preroll-frame");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "show-preroll-frame");
				val.Val = value;
				SetProperty ("show-preroll-frame", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("display")]
		public string Display {
			get {
				Gst.GLib.Value val = GetProperty ("display");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "display");
				val.Val = value;
				SetProperty ("display", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("synchronous")]
		public bool Synchronous {
			get {
				Gst.GLib.Value val = GetProperty ("synchronous");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "synchronous");
				val.Val = value;
				SetProperty ("synchronous", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("pixel-aspect-ratio")]
		public string PixelAspectRatio {
			get {
				Gst.GLib.Value val = GetProperty ("pixel-aspect-ratio");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "pixel-aspect-ratio");
				val.Val = value;
				SetProperty ("pixel-aspect-ratio", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("force-aspect-ratio")]
		public bool ForceAspectRatio {
			get {
				Gst.GLib.Value val = GetProperty ("force-aspect-ratio");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "force-aspect-ratio");
				val.Val = value;
				SetProperty ("force-aspect-ratio", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("handle-events")]
		public bool HandleEvents {
			get {
				Gst.GLib.Value val = GetProperty ("handle-events");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "handle-events");
				val.Val = value;
				SetProperty ("handle-events", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("handle-expose")]
		public bool HandleExpose {
			get {
				Gst.GLib.Value val = GetProperty ("handle-expose");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "handle-expose");
				val.Val = value;
				SetProperty ("handle-expose", val);
				val.Dispose ();
			}
		}


#endregion
#region Customized code
#line 1 "GstImplementsInterface.cs"
		[DllImport("libgstreamer-0.10.dll")]
		static extern bool gst_element_implements_interface(IntPtr raw, IntPtr iface_type);

		bool Gst.ImplementsInterface.Supported(GLib.GType iface_type) {
			bool raw_ret = gst_element_implements_interface(Handle, iface_type.Val);
			bool ret = raw_ret;
			return ret;
		}


#endregion
#region Customized code
#line 1 "GstNavigation.cs"
		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_event(IntPtr raw, IntPtr structure);

		[DllImport("libgstreamer-0.10.dll")]
		static extern IntPtr gst_structure_copy (IntPtr raw);

		void Gst.Interfaces.Navigation.SendEvent(Gst.Structure structure) {
			gst_navigation_send_event(Handle, structure == null ? IntPtr.Zero : gst_structure_copy (structure.Handle));
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_mouse_event(IntPtr raw, IntPtr evnt, int button, double x, double y);

		void Gst.Interfaces.Navigation.SendMouseEvent(string evnt, int button, double x, double y) {
			IntPtr native_evnt = GLib.Marshaller.StringToPtrGStrdup (evnt);
			gst_navigation_send_mouse_event(Handle, native_evnt, button, x, y);
			GLib.Marshaller.Free (native_evnt);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_key_event(IntPtr raw, IntPtr evnt, IntPtr key);

		void Gst.Interfaces.Navigation.SendKeyEvent(string evnt, string key) {
			IntPtr native_evnt = GLib.Marshaller.StringToPtrGStrdup (evnt);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gst_navigation_send_key_event(Handle, native_evnt, native_key);
			GLib.Marshaller.Free (native_evnt);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_command(IntPtr raw, int command);

		void Gst.Interfaces.Navigation.SendCommand(Gst.Interfaces.NavigationCommand command) {
			gst_navigation_send_command(Handle, (int) command);
		}


#endregion
#region Customized code
#line 1 "GstXOverlay.cs"
		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_expose(IntPtr raw);

		void Gst.Interfaces.XOverlay.Expose() {
			gst_x_overlay_expose(Handle);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_handle_events(IntPtr raw, bool handle_events);

		void Gst.Interfaces.XOverlay.HandleEvents(bool handle_events) {
			gst_x_overlay_handle_events(Handle, handle_events);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_got_xwindow_id(IntPtr raw, UIntPtr xwindow_id);

		void Gst.Interfaces.XOverlay.GotXwindowId(ulong xwindow_id) {
			gst_x_overlay_got_xwindow_id(Handle, new UIntPtr (xwindow_id));
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_prepare_xwindow_id(IntPtr raw);

		void Gst.Interfaces.XOverlay.PrepareXwindowId() {
			gst_x_overlay_prepare_xwindow_id(Handle);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_set_xwindow_id(IntPtr raw, UIntPtr xwindow_id);

		ulong Gst.Interfaces.XOverlay.XwindowId { 
			set {
				gst_x_overlay_set_xwindow_id(Handle, new UIntPtr (value));
			}
		}


#endregion
	}

}

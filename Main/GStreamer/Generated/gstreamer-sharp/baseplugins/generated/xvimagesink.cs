using System;
using System.Collections;
using System.Runtime.InteropServices;
using Gst.GLib;
using Gst;
using Gst.Interfaces;

namespace Gst.BasePlugins {
#region Autogenerated code
	[GTypeName ("GstXvImageSink")]
	public sealed class XvImageSink : Gst.Video.VideoSink, Gst.ImplementsInterface, Gst.Interfaces.Navigation, Gst.Interfaces.XOverlay, Gst.Interfaces.ColorBalance, Gst.Interfaces.PropertyProbe {
		public XvImageSink (IntPtr raw) : base (raw) { }

		[DllImport("libgstreamer-0.10.dll") ]
		static extern IntPtr gst_element_factory_make (IntPtr element, IntPtr name);

		public XvImageSink (string name) : base (IntPtr.Zero) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_element = Gst.GLib.Marshaller.StringToPtrGStrdup ("xvimagesink");
			Raw = gst_element_factory_make (native_element, native_name);
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_element);
			if (Raw == IntPtr.Zero)
				throw new Exception ("Failed to instantiate element \"xvimagesink\"");
		}

		public XvImageSink () : this ((string) null) { }

		public static XvImageSink Make (string name) {
			return Gst.ElementFactory.Make ("xvimagesink", name) as XvImageSink;
		}

		public static XvImageSink Make () { return Make (null); } 

		[Gst.GLib.Property ("show-preroll-frame")]
		public bool ShowPrerollFrame {
			get {
				Gst.GLib.Value val = GetProperty ("show-preroll-frame");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "show-preroll-frame");
				val.Val = value;
				SetProperty ("show-preroll-frame", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("contrast")]
		public int Contrast {
			get {
				Gst.GLib.Value val = GetProperty ("contrast");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "contrast");
				val.Val = value;
				SetProperty ("contrast", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("brightness")]
		public int Brightness {
			get {
				Gst.GLib.Value val = GetProperty ("brightness");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "brightness");
				val.Val = value;
				SetProperty ("brightness", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("hue")]
		public int Hue {
			get {
				Gst.GLib.Value val = GetProperty ("hue");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "hue");
				val.Val = value;
				SetProperty ("hue", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("saturation")]
		public int Saturation {
			get {
				Gst.GLib.Value val = GetProperty ("saturation");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "saturation");
				val.Val = value;
				SetProperty ("saturation", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("display")]
		public string Display {
			get {
				Gst.GLib.Value val = GetProperty ("display");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "display");
				val.Val = value;
				SetProperty ("display", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("synchronous")]
		public bool Synchronous {
			get {
				Gst.GLib.Value val = GetProperty ("synchronous");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "synchronous");
				val.Val = value;
				SetProperty ("synchronous", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("pixel-aspect-ratio")]
		public string PixelAspectRatio {
			get {
				Gst.GLib.Value val = GetProperty ("pixel-aspect-ratio");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "pixel-aspect-ratio");
				val.Val = value;
				SetProperty ("pixel-aspect-ratio", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("force-aspect-ratio")]
		public bool ForceAspectRatio {
			get {
				Gst.GLib.Value val = GetProperty ("force-aspect-ratio");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "force-aspect-ratio");
				val.Val = value;
				SetProperty ("force-aspect-ratio", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("handle-events")]
		public bool HandleEvents {
			get {
				Gst.GLib.Value val = GetProperty ("handle-events");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "handle-events");
				val.Val = value;
				SetProperty ("handle-events", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("device")]
		public string Device {
			get {
				Gst.GLib.Value val = GetProperty ("device");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "device");
				val.Val = value;
				SetProperty ("device", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("device-name")]
		public string DeviceName {
			get {
				Gst.GLib.Value val = GetProperty ("device-name");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
		}

		[Gst.GLib.Property ("handle-expose")]
		public bool HandleExpose {
			get {
				Gst.GLib.Value val = GetProperty ("handle-expose");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "handle-expose");
				val.Val = value;
				SetProperty ("handle-expose", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("double-buffer")]
		public bool DoubleBuffer {
			get {
				Gst.GLib.Value val = GetProperty ("double-buffer");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "double-buffer");
				val.Val = value;
				SetProperty ("double-buffer", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("autopaint-colorkey")]
		public bool AutopaintColorkey {
			get {
				Gst.GLib.Value val = GetProperty ("autopaint-colorkey");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "autopaint-colorkey");
				val.Val = value;
				SetProperty ("autopaint-colorkey", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("colorkey")]
		public int Colorkey {
			get {
				Gst.GLib.Value val = GetProperty ("colorkey");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "colorkey");
				val.Val = value;
				SetProperty ("colorkey", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("draw-borders")]
		public bool DrawBorders {
			get {
				Gst.GLib.Value val = GetProperty ("draw-borders");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "draw-borders");
				val.Val = value;
				SetProperty ("draw-borders", val);
				val.Dispose ();
			}
		}


#endregion
#region Customized code
#line 1 "GstImplementsInterface.cs"
		[DllImport("libgstreamer-0.10.dll")]
		static extern bool gst_element_implements_interface(IntPtr raw, IntPtr iface_type);

		bool Gst.ImplementsInterface.Supported(GLib.GType iface_type) {
			bool raw_ret = gst_element_implements_interface(Handle, iface_type.Val);
			bool ret = raw_ret;
			return ret;
		}


#endregion
#region Customized code
#line 1 "GstNavigation.cs"
		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_event(IntPtr raw, IntPtr structure);

		[DllImport("libgstreamer-0.10.dll")]
		static extern IntPtr gst_structure_copy (IntPtr raw);

		void Gst.Interfaces.Navigation.SendEvent(Gst.Structure structure) {
			gst_navigation_send_event(Handle, structure == null ? IntPtr.Zero : gst_structure_copy (structure.Handle));
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_mouse_event(IntPtr raw, IntPtr evnt, int button, double x, double y);

		void Gst.Interfaces.Navigation.SendMouseEvent(string evnt, int button, double x, double y) {
			IntPtr native_evnt = GLib.Marshaller.StringToPtrGStrdup (evnt);
			gst_navigation_send_mouse_event(Handle, native_evnt, button, x, y);
			GLib.Marshaller.Free (native_evnt);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_key_event(IntPtr raw, IntPtr evnt, IntPtr key);

		void Gst.Interfaces.Navigation.SendKeyEvent(string evnt, string key) {
			IntPtr native_evnt = GLib.Marshaller.StringToPtrGStrdup (evnt);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gst_navigation_send_key_event(Handle, native_evnt, native_key);
			GLib.Marshaller.Free (native_evnt);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_navigation_send_command(IntPtr raw, int command);

		void Gst.Interfaces.Navigation.SendCommand(Gst.Interfaces.NavigationCommand command) {
			gst_navigation_send_command(Handle, (int) command);
		}


#endregion
#region Customized code
#line 1 "GstXOverlay.cs"
		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_expose(IntPtr raw);

		void Gst.Interfaces.XOverlay.Expose() {
			gst_x_overlay_expose(Handle);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_handle_events(IntPtr raw, bool handle_events);

		void Gst.Interfaces.XOverlay.HandleEvents(bool handle_events) {
			gst_x_overlay_handle_events(Handle, handle_events);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_got_xwindow_id(IntPtr raw, UIntPtr xwindow_id);

		void Gst.Interfaces.XOverlay.GotXwindowId(ulong xwindow_id) {
			gst_x_overlay_got_xwindow_id(Handle, new UIntPtr (xwindow_id));
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_prepare_xwindow_id(IntPtr raw);

		void Gst.Interfaces.XOverlay.PrepareXwindowId() {
			gst_x_overlay_prepare_xwindow_id(Handle);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_x_overlay_set_xwindow_id(IntPtr raw, UIntPtr xwindow_id);

		ulong Gst.Interfaces.XOverlay.XwindowId { 
			set {
				gst_x_overlay_set_xwindow_id(Handle, new UIntPtr (value));
			}
		}


#endregion
#region Customized code
#line 1 "GstColorBalance.cs"
		[GLib.Signal("value-changed")]
		event Gst.Interfaces.ValueChangedHandler Gst.Interfaces.ColorBalance.ValueChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "value-changed", typeof (Gst.Interfaces.ValueChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "value-changed", typeof (Gst.Interfaces.ValueChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_color_balance_set_value(IntPtr raw, IntPtr channel, int value);

		void Gst.Interfaces.ColorBalance.SetValue(Gst.Interfaces.ColorBalanceChannel channel, int value) {
			gst_color_balance_set_value(Handle, channel == null ? IntPtr.Zero : channel.Handle, value);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern IntPtr gst_color_balance_list_channels(IntPtr raw);

		Gst.Interfaces.ColorBalanceChannel[] Gst.Interfaces.ColorBalance.ListChannels() {
			IntPtr raw_ret = gst_color_balance_list_channels(Handle);
			Gst.Interfaces.ColorBalanceChannel[] ret = (Gst.Interfaces.ColorBalanceChannel[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(Gst.Interfaces.ColorBalanceChannel));
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern int gst_color_balance_get_value(IntPtr raw, IntPtr channel);

		int Gst.Interfaces.ColorBalance.GetValue(Gst.Interfaces.ColorBalanceChannel channel) {
			int raw_ret = gst_color_balance_get_value(Handle, channel == null ? IntPtr.Zero : channel.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_color_balance_value_changed(IntPtr raw, IntPtr channel, int value);

		void Gst.Interfaces.ColorBalance.EmitValueChanged(Gst.Interfaces.ColorBalanceChannel channel, int value) {
			gst_color_balance_value_changed(Handle, channel == null ? IntPtr.Zero : channel.Handle, value);
		}

		[DllImport("libgobject-2.0-0.dll")]
		static extern IntPtr g_type_interface_peek (IntPtr klass, IntPtr iface_gtype);

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern IntPtr gst_color_balance_get_type();

		Gst.Interfaces.ColorBalanceType Gst.Interfaces.ColorBalance.BalanceType {
			get {
				IntPtr gclass = Marshal.ReadIntPtr (Handle);
				IntPtr ifaceptr = g_type_interface_peek (gclass, gst_color_balance_get_type ());
				return (Gst.Interfaces.ColorBalanceType) Marshal.ReadInt32 (ifaceptr);
			}
		}


#endregion
#region Customized code
#line 1 "GstPropertyProbe.cs"
		[GLib.Signal("probe-needed")]
		event Gst.Interfaces.ProbeNeededHandler Gst.Interfaces.PropertyProbe.ProbeNeeded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "probe-needed", typeof (Gst.Interfaces.ProbeNeededArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "probe-needed", typeof (Gst.Interfaces.ProbeNeededArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern bool gst_property_probe_needs_probe_name(IntPtr raw, IntPtr name);

		bool Gst.Interfaces.PropertyProbe.NeedsProbe(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gst_property_probe_needs_probe_name(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern void gst_property_probe_probe_property_name(IntPtr raw, IntPtr name);

		void Gst.Interfaces.PropertyProbe.Probe(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gst_property_probe_probe_property_name(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern IntPtr gst_property_probe_get_properties(IntPtr raw);

		string[] Gst.Interfaces.PropertyProbe.Properties { 
			get {
				IntPtr raw_ret = gst_property_probe_get_properties(Handle);
				if (raw_ret == IntPtr.Zero)
					return new string[] {};

				GLib.List raw_ret_list = new GLib.List(raw_ret, typeof (IntPtr));
				ArrayList ret = new ArrayList ();

				foreach (IntPtr pspec in raw_ret_list) {
					Gst.PropertyInfo pi = new Gst.PropertyInfo (pspec);
					ret.Add (pi.Name);
				}

				return (string[]) ret.ToArray (typeof (string));
			}
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern IntPtr gst_property_probe_get_values_name (IntPtr raw, IntPtr name);

		object[] Gst.Interfaces.PropertyProbe.GetValues (string name) {
			IntPtr raw_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_property_probe_get_values_name (Handle, raw_name);
			GLib.Marshaller.Free (raw_name);
			if (raw_ret == IntPtr.Zero)
				return new object[] {};

			GLib.ValueArray va = new GLib.ValueArray (raw_ret);
			ArrayList ret = new ArrayList ();
			foreach (GLib.Value v in va)
			  ret.Add ((object) v.Val);

			va.Dispose ();

			return (object[]) ret.ToArray (typeof (object));		
		}

		[DllImport("libgstinterfaces-0.10.dll")]
		static extern IntPtr gst_property_probe_probe_and_get_values_name (IntPtr raw, IntPtr name);

		object[] Gst.Interfaces.PropertyProbe.ProbeAndGetValues (string name) {
			IntPtr raw_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_property_probe_probe_and_get_values_name (Handle, raw_name);
			GLib.Marshaller.Free (raw_name);
			if (raw_ret == IntPtr.Zero)
				return new object[] {};

			GLib.ValueArray va = new GLib.ValueArray (raw_ret);
			ArrayList ret = new ArrayList ();
			foreach (GLib.Value v in va)
			  ret.Add ((object) v.Val);

			va.Dispose ();

			return (object[]) ret.ToArray (typeof (object));		
		}

#endregion
	}

}

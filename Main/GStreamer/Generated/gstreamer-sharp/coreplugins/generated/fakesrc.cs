using System;
using System.Collections;
using System.Runtime.InteropServices;
using Gst.GLib;
using Gst;
using Gst.Interfaces;

namespace Gst.CorePlugins {
#region Autogenerated code
	[GTypeName ("GstFakeSrc")]
	public sealed class FakeSrc : Gst.Base.BaseSrc {
		public FakeSrc (IntPtr raw) : base (raw) { }

		[DllImport("libgstreamer-0.10.dll") ]
		static extern IntPtr gst_element_factory_make (IntPtr element, IntPtr name);

		public FakeSrc (string name) : base (IntPtr.Zero) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_element = Gst.GLib.Marshaller.StringToPtrGStrdup ("fakesrc");
			Raw = gst_element_factory_make (native_element, native_name);
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_element);
			if (Raw == IntPtr.Zero)
				throw new Exception ("Failed to instantiate element \"fakesrc\"");
		}

		public FakeSrc () : this ((string) null) { }

		public static FakeSrc Make (string name) {
			return Gst.ElementFactory.Make ("fakesrc", name) as FakeSrc;
		}

		public static FakeSrc Make () { return Make (null); } 

		[Gst.GLib.Property ("data")]
		public DataTypeType Datatype {
			get {
				Gst.GLib.Value val = GetProperty ("data");
				DataTypeType ret = (DataTypeType) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "data");
				val.Val = value;
				SetProperty ("data", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("sizetype")]
		public SizeTypeType Sizetype {
			get {
				Gst.GLib.Value val = GetProperty ("sizetype");
				SizeTypeType ret = (SizeTypeType) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "sizetype");
				val.Val = value;
				SetProperty ("sizetype", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("sizemin")]
		public int Sizemin {
			get {
				Gst.GLib.Value val = GetProperty ("sizemin");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "sizemin");
				val.Val = value;
				SetProperty ("sizemin", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("sizemax")]
		public int Sizemax {
			get {
				Gst.GLib.Value val = GetProperty ("sizemax");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "sizemax");
				val.Val = value;
				SetProperty ("sizemax", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("filltype")]
		public FillTypeType Filltype {
			get {
				Gst.GLib.Value val = GetProperty ("filltype");
				FillTypeType ret = (FillTypeType) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "filltype");
				val.Val = value;
				SetProperty ("filltype", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("datarate")]
		public int Datarate {
			get {
				Gst.GLib.Value val = GetProperty ("datarate");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "datarate");
				val.Val = value;
				SetProperty ("datarate", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("sync")]
		public bool Sync {
			get {
				Gst.GLib.Value val = GetProperty ("sync");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "sync");
				val.Val = value;
				SetProperty ("sync", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("pattern")]
		public string Pattern {
			get {
				Gst.GLib.Value val = GetProperty ("pattern");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "pattern");
				val.Val = value;
				SetProperty ("pattern", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("signal-handoffs")]
		public bool SignalHandoffs {
			get {
				Gst.GLib.Value val = GetProperty ("signal-handoffs");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "signal-handoffs");
				val.Val = value;
				SetProperty ("signal-handoffs", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("silent")]
		public bool Silent {
			get {
				Gst.GLib.Value val = GetProperty ("silent");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "silent");
				val.Val = value;
				SetProperty ("silent", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("dump")]
		public bool Dump {
			get {
				Gst.GLib.Value val = GetProperty ("dump");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "dump");
				val.Val = value;
				SetProperty ("dump", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("parentsize")]
		public int Parentsize {
			get {
				Gst.GLib.Value val = GetProperty ("parentsize");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "parentsize");
				val.Val = value;
				SetProperty ("parentsize", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("last-message")]
		public string LastMessage {
			get {
				Gst.GLib.Value val = GetProperty ("last-message");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
		}

		[Gst.GLib.Property ("can-activate-pull")]
		public bool CanActivatePull {
			get {
				Gst.GLib.Value val = GetProperty ("can-activate-pull");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "can-activate-pull");
				val.Val = value;
				SetProperty ("can-activate-pull", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("can-activate-push")]
		public bool CanActivatePush {
			get {
				Gst.GLib.Value val = GetProperty ("can-activate-push");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "can-activate-push");
				val.Val = value;
				SetProperty ("can-activate-push", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("is-live")]
		public bool IsLive {
			get {
				Gst.GLib.Value val = GetProperty ("is-live");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "is-live");
				val.Val = value;
				SetProperty ("is-live", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("format")]
		public Gst.Format Format {
			get {
				Gst.GLib.Value val = GetProperty ("format");
				Gst.Format ret = (Gst.Format) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "format");
				val.Val = value;
				SetProperty ("format", val);
				val.Dispose ();
			}
		}


		public delegate void HandoffHandler (object o, HandoffArgs args);

		public class HandoffArgs : Gst.GLib.SignalArgs {
			public Gst.Buffer Buffer {
				get {
					return (Gst.Buffer) Args[0];
				}
			}

			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[1];
				}
			}

		}

		public event HandoffHandler Handoff {
			add {
				DynamicSignal.Connect (this, "handoff", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "handoff", value);
			}
		}
		[GTypeName ("GstFakeSrcDataType")]
		public enum DataTypeType {
			Allocate = 1, 
			Subbuffer = 2, 
		}

		[GTypeName ("GstFakeSrcSizeType")]
		public enum SizeTypeType {
			Empty = 1, 
			Fixed = 2, 
			Random = 3, 
		}

		[GTypeName ("GstFakeSrcFillType")]
		public enum FillTypeType {
			Nothing = 1, 
			Zero = 2, 
			Random = 3, 
			Pattern = 4, 
			PatternSpan = 5, 
		}

#endregion
	}

}

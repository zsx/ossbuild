using System;
using System.Collections;
using System.Runtime.InteropServices;
using Gst.GLib;
using Gst;
using Gst.Interfaces;

namespace Gst.CorePlugins {
#region Autogenerated code
	[GTypeName ("GstFakeSink")]
	public sealed class FakeSink : Gst.Base.BaseSink {
		public FakeSink (IntPtr raw) : base (raw) { }

		[DllImport("libgstreamer-0.10.dll") ]
		static extern IntPtr gst_element_factory_make (IntPtr element, IntPtr name);

		public FakeSink (string name) : base (IntPtr.Zero) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_element = Gst.GLib.Marshaller.StringToPtrGStrdup ("fakesink");
			Raw = gst_element_factory_make (native_element, native_name);
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_element);
			if (Raw == IntPtr.Zero)
				throw new Exception ("Failed to instantiate element \"fakesink\"");
		}

		public FakeSink () : this ((string) null) { }

		public static FakeSink Make (string name) {
			return Gst.ElementFactory.Make ("fakesink", name) as FakeSink;
		}

		public static FakeSink Make () { return Make (null); } 

		[Gst.GLib.Property ("state-error")]
		public StateErrorType StateError {
			get {
				Gst.GLib.Value val = GetProperty ("state-error");
				StateErrorType ret = (StateErrorType) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "state-error");
				val.Val = value;
				SetProperty ("state-error", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("silent")]
		public bool Silent {
			get {
				Gst.GLib.Value val = GetProperty ("silent");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "silent");
				val.Val = value;
				SetProperty ("silent", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("dump")]
		public bool Dump {
			get {
				Gst.GLib.Value val = GetProperty ("dump");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "dump");
				val.Val = value;
				SetProperty ("dump", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("signal-handoffs")]
		public bool SignalHandoffs {
			get {
				Gst.GLib.Value val = GetProperty ("signal-handoffs");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "signal-handoffs");
				val.Val = value;
				SetProperty ("signal-handoffs", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("last-message")]
		public string LastMessage {
			get {
				Gst.GLib.Value val = GetProperty ("last-message");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
		}

		[Gst.GLib.Property ("can-activate-push")]
		public bool CanActivatePush {
			get {
				Gst.GLib.Value val = GetProperty ("can-activate-push");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "can-activate-push");
				val.Val = value;
				SetProperty ("can-activate-push", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("can-activate-pull")]
		public bool CanActivatePull {
			get {
				Gst.GLib.Value val = GetProperty ("can-activate-pull");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "can-activate-pull");
				val.Val = value;
				SetProperty ("can-activate-pull", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("num-buffers")]
		public int NumBuffers {
			get {
				Gst.GLib.Value val = GetProperty ("num-buffers");
				int ret = (int) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "num-buffers");
				val.Val = value;
				SetProperty ("num-buffers", val);
				val.Dispose ();
			}
		}


		public delegate void HandoffHandler (object o, HandoffArgs args);

		public class HandoffArgs : Gst.GLib.SignalArgs {
			public Gst.Buffer Buffer {
				get {
					return (Gst.Buffer) Args[0];
				}
			}

			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[1];
				}
			}

		}

		public event HandoffHandler Handoff {
			add {
				DynamicSignal.Connect (this, "handoff", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "handoff", value);
			}
		}
		public delegate void PrerollHandoffHandler (object o, PrerollHandoffArgs args);

		public class PrerollHandoffArgs : Gst.GLib.SignalArgs {
			public Gst.Buffer Buffer {
				get {
					return (Gst.Buffer) Args[0];
				}
			}

			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[1];
				}
			}

		}

		public event PrerollHandoffHandler PrerollHandoff {
			add {
				DynamicSignal.Connect (this, "preroll-handoff", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "preroll-handoff", value);
			}
		}
		[GTypeName ("GstFakeSinkStateError")]
		public enum StateErrorType {
			None = 0, 
			NullToReady = 1, 
			ReadyToPaused = 2, 
			PausedToPlaying = 3, 
			PlayingToPaused = 4, 
			PausedToReady = 5, 
			ReadyToNull = 6, 
		}

#endregion
	}

}

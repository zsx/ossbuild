// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PushSrc : Gst.Base.BaseSrc {

		public PushSrc(IntPtr raw) : base(raw) {}

		protected PushSrc() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		static CreateNativeDelegate Create_cb_delegate;
		static CreateNativeDelegate CreateVMCallback {
			get {
				if (Create_cb_delegate == null)
					Create_cb_delegate = new CreateNativeDelegate (Create_cb);
				return Create_cb_delegate;
			}
		}

		static void OverrideCreate (Gst.GLib.GType gtype)
		{
			OverrideCreate (gtype, CreateVMCallback);
		}

		static void OverrideCreate (Gst.GLib.GType gtype, CreateNativeDelegate callback)
		{
			GstPushSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Create = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int CreateNativeDelegate (IntPtr inst, out IntPtr buf);

		static int Create_cb (IntPtr inst, out IntPtr buf)
		{
			try {
				PushSrc __obj = Gst.GLib.Object.GetObject (inst, false) as PushSrc;
				Gst.Buffer mybuf;
				Gst.FlowReturn __result = __obj.OnCreate (out mybuf);
				buf = mybuf == null ? IntPtr.Zero : mybuf.Handle;
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.PushSrc), ConnectionMethod="OverrideCreate")]
		protected virtual Gst.FlowReturn OnCreate (out Gst.Buffer buf)
		{
			return InternalCreate (out buf);
		}

		private Gst.FlowReturn InternalCreate (out Gst.Buffer buf)
		{
			CreateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Create;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr native_buf;
			int __result = unmanaged (this.Handle, out native_buf);
			buf = Gst.MiniObject.GetObject(native_buf, true) as Gst.Buffer;
			return (Gst.FlowReturn) __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstPushSrcClass {
			public CreateNativeDelegate Create;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Base.BaseSrc)).GetClassSize ();
		static Hashtable class_structs;

		static GstPushSrcClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstPushSrcClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstPushSrcClass class_struct = (GstPushSrcClass) Marshal.PtrToStructure (class_ptr, typeof (GstPushSrcClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstPushSrcClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_push_src_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_push_src_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}


		static PushSrc ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

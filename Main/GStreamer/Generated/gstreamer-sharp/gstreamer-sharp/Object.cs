// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Object : Gst.GLib.Object {

		public Object(IntPtr raw) : base(raw) {}

		protected Object() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[Gst.GLib.Property ("name")]
		public string Name {
			get {
				Gst.GLib.Value val = GetProperty ("name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("name", val);
				val.Dispose ();
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_object_get_flags_offset ();

		static uint flags_offset = gstsharp_gst_object_get_flags_offset ();
		public Gst.ObjectFlags Flags {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + flags_offset);
					return (Gst.ObjectFlags) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + flags_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[Gst.GLib.Signal("parent-unset")]
		public event Gst.ParentUnsetHandler ParentUnset {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "parent-unset", typeof (Gst.ParentUnsetArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "parent-unset", typeof (Gst.ParentUnsetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("parent-set")]
		public event Gst.ParentSetHandler ParentSet {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "parent-set", typeof (Gst.ParentSetArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "parent-set", typeof (Gst.ParentSetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_object_override_parent_set (IntPtr class_struct, ParentSetNativeDelegate cb);

		static ParentSetNativeDelegate ParentSet_cb_delegate;
		static ParentSetNativeDelegate ParentSetVMCallback {
			get {
				if (ParentSet_cb_delegate == null)
					ParentSet_cb_delegate = new ParentSetNativeDelegate (ParentSet_cb);
				return ParentSet_cb_delegate;
			}
		}

		static void OverrideParentSet (Gst.GLib.GType gtype)
		{
			OverrideParentSet (gtype, ParentSetVMCallback);
		}

		static void OverrideParentSet (Gst.GLib.GType gtype, ParentSetNativeDelegate callback)
		{
			gstsharp_object_override_parent_set (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ParentSetNativeDelegate (IntPtr inst, IntPtr parent);

		static void ParentSet_cb (IntPtr inst, IntPtr parent)
		{
			try {
				Object __obj = Gst.GLib.Object.GetObject (inst, false) as Object;
				__obj.OnParentSet (Gst.GLib.Object.GetObject(parent) as Gst.Object);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_object_invoke_parent_set (IntPtr class_struct, IntPtr inst, IntPtr parent);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Object), ConnectionMethod="OverrideParentSet")]
		protected virtual void OnParentSet (Gst.Object parent)
		{
			InternalParentSet (parent);
		}

		private void InternalParentSet (Gst.Object parent)
		{
			gstsharp_object_invoke_parent_set (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, parent == null ? IntPtr.Zero : parent.Handle);
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_object_override_parent_unset (IntPtr class_struct, ParentUnsetNativeDelegate cb);

		static ParentUnsetNativeDelegate ParentUnset_cb_delegate;
		static ParentUnsetNativeDelegate ParentUnsetVMCallback {
			get {
				if (ParentUnset_cb_delegate == null)
					ParentUnset_cb_delegate = new ParentUnsetNativeDelegate (ParentUnset_cb);
				return ParentUnset_cb_delegate;
			}
		}

		static void OverrideParentUnset (Gst.GLib.GType gtype)
		{
			OverrideParentUnset (gtype, ParentUnsetVMCallback);
		}

		static void OverrideParentUnset (Gst.GLib.GType gtype, ParentUnsetNativeDelegate callback)
		{
			gstsharp_object_override_parent_unset (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ParentUnsetNativeDelegate (IntPtr inst, IntPtr parent);

		static void ParentUnset_cb (IntPtr inst, IntPtr parent)
		{
			try {
				Object __obj = Gst.GLib.Object.GetObject (inst, false) as Object;
				__obj.OnParentUnset (Gst.GLib.Object.GetObject(parent) as Gst.Object);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_object_invoke_parent_unset (IntPtr class_struct, IntPtr inst, IntPtr parent);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Object), ConnectionMethod="OverrideParentUnset")]
		protected virtual void OnParentUnset (Gst.Object parent)
		{
			InternalParentUnset (parent);
		}

		private void InternalParentUnset (Gst.Object parent)
		{
			gstsharp_object_invoke_parent_unset (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, parent == null ? IntPtr.Zero : parent.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_object_get_path_string(IntPtr raw);

		public string PathString { 
			get {
				IntPtr raw_ret = gst_object_get_path_string(Handle);
				string ret = Gst.GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_object_unparent(IntPtr raw);

		public void Unparent() {
			gst_object_unparent(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_object_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_object_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_object_get_name_prefix(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_object_set_name_prefix(IntPtr raw, IntPtr name_prefix);

		public string NamePrefix { 
			get {
				IntPtr raw_ret = gst_object_get_name_prefix(Handle);
				string ret = Gst.GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = Gst.GLib.Marshaller.StringToPtrGStrdup (value);
				gst_object_set_name_prefix(Handle, native_value);
				Gst.GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_object_has_ancestor(IntPtr raw, IntPtr ancestor);

		public bool HasAncestor(Gst.Object ancestor) {
			bool raw_ret = gst_object_has_ancestor(Handle, ancestor == null ? IntPtr.Zero : ancestor.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Object.custom"
public object this[string property] {
  get {
    Gst.GLib.Value v = GetProperty (property);
    object o = v.Val;
    v.Dispose ();
    return o;
  } set {
    Gst.GLib.Value v = new Gst.GLib.Value (this, property);
    v.Val = value;
    SetProperty (property, v);
    v.Dispose ();
  }
}

[DllImport ("libgobject-2.0-0.dll") ]
static extern IntPtr g_object_class_list_properties (IntPtr klass, out uint n_properties);

[DllImport ("libgobject-2.0-0.dll") ]
static extern IntPtr g_object_class_find_property (IntPtr gclass, IntPtr name);

public PropertyInfo GetPropertyInfo (string property) {
  IntPtr klass = Marshal.ReadIntPtr (Handle);

  IntPtr native_property = Gst.GLib.Marshaller.StringToPtrGStrdup (property);
  IntPtr pspec = g_object_class_find_property (klass, native_property);
  Gst.GLib.Marshaller.Free (native_property);

  if (pspec == IntPtr.Zero)
    throw new ArgumentException ("Unknown property");

  return new PropertyInfo (pspec);
}

public bool HasProperty (string property) {
  IntPtr klass = Marshal.ReadIntPtr (Handle);

  IntPtr native_property = Gst.GLib.Marshaller.StringToPtrGStrdup (property);
  IntPtr pspec = g_object_class_find_property (klass, native_property);
  Gst.GLib.Marshaller.Free (native_property);

  return pspec != IntPtr.Zero;
}

public PropertyInfo[] Properties {
  get {
    uint n_properties;
    IntPtr klass = Marshal.ReadIntPtr (Handle);
    IntPtr properties = g_object_class_list_properties (klass, out n_properties);

    PropertyInfo[] ret = new PropertyInfo[n_properties];
    for (int i = 0; i < n_properties; i++) {
      IntPtr pspec_ptr = Marshal.ReadIntPtr (properties, i * IntPtr.Size);
      ret[i] = new PropertyInfo (pspec_ptr);
    }
    Gst.GLib.Marshaller.Free (properties);

    return ret;
  }
}

public void Connect (string signal, SignalHandler handler) {
  DynamicSignal.Connect (this, signal, handler);
}

public void Disconnect (string signal, SignalHandler handler) {
  DynamicSignal.Disconnect (this, signal, handler);
}

public void Connect (string signal, Delegate handler) {
  DynamicSignal.Connect (this, signal, handler);
}

public void Disconnect (string signal, Delegate handler) {
  DynamicSignal.Disconnect (this, signal, handler);
}

public object Emit (string signal, params object[] parameters) {
  return DynamicSignal.Emit (this, signal, parameters);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_object_ref_sink (IntPtr raw);

protected override IntPtr Raw {
  get {
    return base.Raw;
  } set {
    if (value != IntPtr.Zero) {
      gst_object_ref_sink (value);
    }
    base.Raw = value;
  }
}


[DllImport ("libgstreamer-0.10.dll") ]
static extern bool gst_object_set_parent (IntPtr raw, IntPtr parent);
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_object_get_parent (IntPtr raw);

public Gst.Object Parent {
  set {
    bool raw_ret = gst_object_set_parent (Handle, value == null ? IntPtr.Zero : value.Handle);
    if (!raw_ret)
      throw new ApplicationException ();
  }
  get {
    IntPtr raw_ret = gst_object_get_parent (Handle);
    Gst.Object ret = Gst.GLib.Object.GetObject (raw_ret, true) as Gst.Object;
    return ret;
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_object_get_lock_offset ();

static uint lock_offset = gstsharp_gst_object_get_lock_offset ();
internal IntPtr LockPtr {
  get {
    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + lock_offset);
      return (*raw_ptr);
    }
  }
}

[DllImport ("libglib-2.0-0.dll") ]
static extern void g_mutex_lock (IntPtr mutex);
[DllImport ("libglib-2.0-0.dll") ]
static extern void g_mutex_unlock (IntPtr mutex);
[DllImport ("libglib-2.0-0.dll") ]
static extern bool g_mutex_trylock (IntPtr mutex);

public void Lock () {
  g_mutex_lock (LockPtr);
}

public void Unlock () {
  g_mutex_unlock (LockPtr);
}

public bool TryLock () {
  return g_mutex_trylock (LockPtr);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern bool gst_object_check_uniqueness (IntPtr list, IntPtr name);

public static bool CheckUniqueness (Gst.Object[] objects, string name) {
  Gst.GLib.List list = new Gst.GLib.List (objects, typeof (Gst.Object), false, false);
  IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
  bool raw_ret = gst_object_check_uniqueness (list.Handle, native_name);
  bool ret = raw_ret;
  Gst.GLib.Marshaller.Free (native_name);
  return ret;
}

#endregion
	}
}

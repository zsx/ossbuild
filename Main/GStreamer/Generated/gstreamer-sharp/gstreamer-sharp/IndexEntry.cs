// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IndexEntry : Gst.GLib.Opaque {

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_indexentry_get_type_offset ();

		static uint type_offset = gstsharp_gst_indexentry_get_type_offset ();
		public Gst.IndexEntryType Type {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + type_offset);
					return (Gst.IndexEntryType) (*raw_ptr);
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_indexentry_get_id_offset ();

		static uint id_offset = gstsharp_gst_indexentry_get_id_offset ();
		public int Id {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + id_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_entry_copy(IntPtr raw);

		public Gst.IndexEntry Copy() {
			IntPtr raw_ret = gst_index_entry_copy(Handle);
			Gst.IndexEntry ret = raw_ret == IntPtr.Zero ? null : (Gst.IndexEntry) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.IndexEntry), true);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_index_entry_assoc_map(IntPtr raw, int format, out long value);

		public bool AssocMap(Gst.Format format, out long value) {
			bool raw_ret = gst_index_entry_assoc_map(Handle, (int) format, out value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_entry_get_type();

		public static Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_index_entry_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		public IndexEntry(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_index_entry_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gst_index_entry_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gst_index_entry_free (handle);
				return false;
			}
		}

		~IndexEntry ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			Gst.GLib.Timeout.Add (50, new Gst.GLib.TimeoutHandler (info.Handler));
		}

#endregion
#region Customized extensions
#line 1 "IndexEntry.custom"
protected override Gst.GLib.Opaque Copy (IntPtr raw)
{
  return Gst.GLib.Opaque.GetOpaque (raw, typeof (Gst.IndexEntry), true);
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_id_description_offset ();

static uint id_description_offset = gstsharp_gst_index_entry_get_id_description_offset ();
public string IdDescription {
  get {
    if (Type != Gst.IndexEntryType.Id)
      throw new Exception ();

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + id_description_offset);
      return Gst.GLib.Marshaller.Utf8PtrToString (*raw_ptr);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_assoc_nassocs_offset ();

static uint assoc_nassocs_offset = gstsharp_gst_index_entry_get_assoc_nassocs_offset ();
public int AssocNAssocs {
  get {
    if (Type != Gst.IndexEntryType.Association)
      throw new Exception ();

    unsafe {
      int* raw_ptr = (int*) ( ( (byte*) Handle) + assoc_nassocs_offset);
      return (*raw_ptr);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_assoc_assocs_offset ();

static uint assoc_assocs_offset = gstsharp_gst_index_entry_get_assoc_assocs_offset ();
public Gst.IndexAssociation[] AssocAssocs {
  get {
    if (Type != Gst.IndexEntryType.Association)
      throw new Exception ();

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + assoc_assocs_offset);
      Gst.IndexAssociation[] ret = new Gst.IndexAssociation[AssocNAssocs];
      if (AssocNAssocs == 0)
        return ret;

      int unmanaged_struct_size = Marshal.SizeOf (typeof (Gst.IndexAssociation));

      for (int i = 0; i < AssocNAssocs; i++)
        ret[i] = Gst.IndexAssociation.New (new IntPtr ( (*raw_ptr).ToInt64() + i * unmanaged_struct_size));
      return ret;
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_assoc_flags_offset ();

static uint assoc_flags_offset = gstsharp_gst_index_entry_get_assoc_flags_offset ();
public Gst.AssocFlags AssocFlags {
  get {
    if (Type != Gst.IndexEntryType.Association)
      throw new Exception ();

    unsafe {
      int* raw_ptr = (int*) ( ( (byte*) Handle) + assoc_flags_offset);
      return (Gst.AssocFlags) (*raw_ptr);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_object_key_offset ();

static uint object_key_offset = gstsharp_gst_index_entry_get_object_key_offset ();
public string ObjectKey {
  get {
    if (Type != Gst.IndexEntryType.Object)
      throw new Exception ();

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + object_key_offset);
      return Gst.GLib.Marshaller.Utf8PtrToString (*raw_ptr);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_object_type_offset ();

static uint object_type_offset = gstsharp_gst_index_entry_get_object_type_offset ();
public Gst.GLib.GType ObjectGType {
  get {
    if (Type != Gst.IndexEntryType.Object)
      throw new Exception ();

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + object_type_offset);
      return new Gst.GLib.GType (*raw_ptr);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_object_object_offset ();

static uint object_object_offset = gstsharp_gst_index_entry_get_object_object_offset ();
public object ObjectObject {
  get {
    if (Type != Gst.IndexEntryType.Object)
      throw new Exception ();

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + object_object_offset);
      return Gst.GLib.Object.GetObject (*raw_ptr, false);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_format_format_offset ();

static uint format_format_offset = gstsharp_gst_index_entry_get_format_format_offset ();
public Gst.Format FormatFormat {
  get {
    if (Type != Gst.IndexEntryType.Format)
      throw new Exception ();

    unsafe {
      int* raw_ptr = (int*) ( ( (byte*) Handle) + format_format_offset);
      return (Gst.Format) (*raw_ptr);
    }
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_index_entry_get_format_key_offset ();

static uint format_key_offset = gstsharp_gst_index_entry_get_format_key_offset ();
public string FormatKey {
  get {
    if (Type != Gst.IndexEntryType.Format)
      throw new Exception ();

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + format_key_offset);
      return Gst.GLib.Marshaller.Utf8PtrToString (*raw_ptr);
    }
  }
}


#endregion
	}
}

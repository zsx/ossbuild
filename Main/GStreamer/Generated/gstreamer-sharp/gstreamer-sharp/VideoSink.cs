// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Video {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class VideoSink : Gst.Base.BaseSink {

		public VideoSink(IntPtr raw) : base(raw) {}

		protected VideoSink() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		static ShowFrameNativeDelegate ShowFrame_cb_delegate;
		static ShowFrameNativeDelegate ShowFrameVMCallback {
			get {
				if (ShowFrame_cb_delegate == null)
					ShowFrame_cb_delegate = new ShowFrameNativeDelegate (ShowFrame_cb);
				return ShowFrame_cb_delegate;
			}
		}

		static void OverrideShowFrame (Gst.GLib.GType gtype)
		{
			OverrideShowFrame (gtype, ShowFrameVMCallback);
		}

		static void OverrideShowFrame (Gst.GLib.GType gtype, ShowFrameNativeDelegate callback)
		{
			GstVideoSinkClass class_iface = GetClassStruct (gtype, false);
			class_iface.ShowFrame = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int ShowFrameNativeDelegate (IntPtr inst, IntPtr buf);

		static int ShowFrame_cb (IntPtr inst, IntPtr buf)
		{
			try {
				VideoSink __obj = Gst.GLib.Object.GetObject (inst, false) as VideoSink;
				Gst.FlowReturn __result = __obj.OnShowFrame (Gst.MiniObject.GetObject(buf) as Gst.Buffer);
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Video.VideoSink), ConnectionMethod="OverrideShowFrame")]
		protected virtual Gst.FlowReturn OnShowFrame (Gst.Buffer buf)
		{
			return InternalShowFrame (buf);
		}

		private Gst.FlowReturn InternalShowFrame (Gst.Buffer buf)
		{
			ShowFrameNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ShowFrame;
			if (unmanaged == null) return (Gst.FlowReturn) 0;

			int __result = unmanaged (this.Handle, buf == null ? IntPtr.Zero : buf.Handle);
			return (Gst.FlowReturn) __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstVideoSinkClass {
			public ShowFrameNativeDelegate ShowFrame;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=3)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Base.BaseSink)).GetClassSize ();
		static Hashtable class_structs;

		static GstVideoSinkClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstVideoSinkClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstVideoSinkClass class_struct = (GstVideoSinkClass) Marshal.PtrToStructure (class_ptr, typeof (GstVideoSinkClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstVideoSinkClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstvideo-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_video_sink_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_video_sink_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstvideo-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_video_sink_center_rect(IntPtr src, IntPtr dst, IntPtr result, bool scaling);

		public static void CenterRect(Gst.Video.VideoRectangle src, Gst.Video.VideoRectangle dst, ref Gst.Video.VideoRectangle result, bool scaling) {
			IntPtr native_src = Gst.GLib.Marshaller.StructureToPtrAlloc (src);
			IntPtr native_dst = Gst.GLib.Marshaller.StructureToPtrAlloc (dst);
			IntPtr native_result = Gst.GLib.Marshaller.StructureToPtrAlloc (result);
			gst_video_sink_center_rect(native_src, native_dst, native_result, scaling);
			src = Gst.Video.VideoRectangle.New (native_src);
			Marshal.FreeHGlobal (native_src);
			dst = Gst.Video.VideoRectangle.New (native_dst);
			Marshal.FreeHGlobal (native_dst);
			result = Gst.Video.VideoRectangle.New (native_result);
			Marshal.FreeHGlobal (native_result);
		}


		static VideoSink ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

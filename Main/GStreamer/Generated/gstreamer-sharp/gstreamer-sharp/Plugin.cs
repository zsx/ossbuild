// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Plugin : Gst.Object {

		public Plugin(IntPtr raw) : base(raw) {}

		protected Plugin() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_filename(IntPtr raw);

		public string Filename {
			get  {
				IntPtr raw_ret = gst_plugin_get_filename(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstPluginClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstPluginClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstPluginClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstPluginClass class_struct = (GstPluginClass) Marshal.PtrToStructure (class_ptr, typeof (GstPluginClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstPluginClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_plugin_register_static(int major_version, int minor_version, IntPtr name, IntPtr description, GstSharp.PluginInitFuncNative init_func, IntPtr version, IntPtr license, IntPtr source, IntPtr package, IntPtr origin);

		public static bool RegisterStatic(int major_version, int minor_version, string name, string description, Gst.PluginInitFunc init_func, string version, string license, string source, string package, string origin) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			GstSharp.PluginInitFuncWrapper init_func_wrapper = new GstSharp.PluginInitFuncWrapper (init_func);
			IntPtr native_version = Gst.GLib.Marshaller.StringToPtrGStrdup (version);
			IntPtr native_license = Gst.GLib.Marshaller.StringToPtrGStrdup (license);
			IntPtr native_source = Gst.GLib.Marshaller.StringToPtrGStrdup (source);
			IntPtr native_package = Gst.GLib.Marshaller.StringToPtrGStrdup (package);
			IntPtr native_origin = Gst.GLib.Marshaller.StringToPtrGStrdup (origin);
			bool raw_ret = gst_plugin_register_static(major_version, minor_version, native_name, Gst.GLib.Marshaller.StringToPtrGStrdup(description), init_func_wrapper.NativeDelegate, native_version, native_license, native_source, native_package, native_origin);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_version);
			Gst.GLib.Marshaller.Free (native_license);
			Gst.GLib.Marshaller.Free (native_source);
			Gst.GLib.Marshaller.Free (native_package);
			Gst.GLib.Marshaller.Free (native_origin);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_load(IntPtr raw);

		public Gst.Plugin Load() {
			IntPtr raw_ret = gst_plugin_load(Handle);
			Gst.Plugin ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Plugin;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_plugin_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_version(IntPtr raw);

		public string Version { 
			get {
				IntPtr raw_ret = gst_plugin_get_version(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_plugin_add_dependency(IntPtr raw, IntPtr[] env_vars, IntPtr[] paths, IntPtr[] names, int flags);

		public void AddDependency(string[] env_vars, string[] paths, string[] names, Gst.PluginDependencyFlags flags) {
			int cnt_env_vars = env_vars == null ? 0 : env_vars.Length;
			IntPtr[] native_env_vars = new IntPtr [cnt_env_vars + 1];
			for (int i = 0; i < cnt_env_vars; i++)
				native_env_vars [i] = Gst.GLib.Marshaller.StringToPtrGStrdup (env_vars[i]);
			native_env_vars [cnt_env_vars] = IntPtr.Zero;
			int cnt_paths = paths == null ? 0 : paths.Length;
			IntPtr[] native_paths = new IntPtr [cnt_paths + 1];
			for (int i = 0; i < cnt_paths; i++)
				native_paths [i] = Gst.GLib.Marshaller.StringToPtrGStrdup (paths[i]);
			native_paths [cnt_paths] = IntPtr.Zero;
			int cnt_names = names == null ? 0 : names.Length;
			IntPtr[] native_names = new IntPtr [cnt_names + 1];
			for (int i = 0; i < cnt_names; i++)
				native_names [i] = Gst.GLib.Marshaller.StringToPtrGStrdup (names[i]);
			native_names [cnt_names] = IntPtr.Zero;
			gst_plugin_add_dependency(Handle, native_env_vars, native_paths, native_names, (int) flags);
			for (int i = 0; i < native_env_vars.Length - 1; i++) {
				env_vars [i] = Gst.GLib.Marshaller.Utf8PtrToString (native_env_vars[i]);
				Gst.GLib.Marshaller.Free (native_env_vars[i]);
			}
			for (int i = 0; i < native_paths.Length - 1; i++) {
				paths [i] = Gst.GLib.Marshaller.Utf8PtrToString (native_paths[i]);
				Gst.GLib.Marshaller.Free (native_paths[i]);
			}
			for (int i = 0; i < native_names.Length - 1; i++) {
				names [i] = Gst.GLib.Marshaller.Utf8PtrToString (native_names[i]);
				Gst.GLib.Marshaller.Free (native_names[i]);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_package(IntPtr raw);

		public string Package { 
			get {
				IntPtr raw_ret = gst_plugin_get_package(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_plugin_add_dependency_simple(IntPtr raw, IntPtr env_vars, IntPtr paths, IntPtr names, int flags);

		public void AddDependency(string env_vars, string paths, string names, Gst.PluginDependencyFlags flags) {
			IntPtr native_env_vars = Gst.GLib.Marshaller.StringToPtrGStrdup (env_vars);
			IntPtr native_paths = Gst.GLib.Marshaller.StringToPtrGStrdup (paths);
			IntPtr native_names = Gst.GLib.Marshaller.StringToPtrGStrdup (names);
			gst_plugin_add_dependency_simple(Handle, native_env_vars, native_paths, native_names, (int) flags);
			Gst.GLib.Marshaller.Free (native_env_vars);
			Gst.GLib.Marshaller.Free (native_paths);
			Gst.GLib.Marshaller.Free (native_names);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_load_by_name(IntPtr name);

		public static Gst.Plugin Load(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_plugin_load_by_name(native_name);
			Gst.Plugin ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Plugin;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_cache_data(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_plugin_set_cache_data(IntPtr raw, IntPtr cache_data);

		public Gst.Structure CacheData { 
			get {
				IntPtr raw_ret = gst_plugin_get_cache_data(Handle);
				Gst.Structure ret = raw_ret == IntPtr.Zero ? null : (Gst.Structure) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Structure), false);
				return ret;
			}
			set {
				gst_plugin_set_cache_data(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_origin(IntPtr raw);

		public string Origin { 
			get {
				IntPtr raw_ret = gst_plugin_get_origin(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_description(IntPtr raw);

		public string Description { 
			get {
				IntPtr raw_ret = gst_plugin_get_description(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_source(IntPtr raw);

		public string Source { 
			get {
				IntPtr raw_ret = gst_plugin_get_source(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_license(IntPtr raw);

		public string License { 
			get {
				IntPtr raw_ret = gst_plugin_get_license(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_plugin_is_loaded(IntPtr raw);

		public bool IsLoaded { 
			get {
				bool raw_ret = gst_plugin_is_loaded(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_plugin_get_name(IntPtr raw);

		public string PluginName { 
			get {
				IntPtr raw_ret = gst_plugin_get_name(Handle);
				string ret = Gst.GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "Plugin.custom"
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_plugin_load_file (IntPtr filename, out IntPtr gerror);

public static Gst.Plugin LoadFile (string filename) {
  IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (filename);
  IntPtr gerror;
  IntPtr raw_ret = gst_plugin_load_file (native_name, out gerror);
  Gst.Plugin ret = Gst.GLib.Object.GetObject (raw_ret, true) as Gst.Plugin;
  Gst.GLib.Marshaller.Free (native_name);
  if (gerror != IntPtr.Zero)
    throw new Gst.GLib.GException (gerror);
  return ret;
}

#endregion
	}
}

using System;
using System.Collections;
using System.Runtime.InteropServices;
using Gst.GLib;
using Gst;
using Gst.Interfaces;

namespace Gst.BasePlugins {
#region Autogenerated code
	[GTypeName ("GstDecodeBin2")]
	public sealed class DecodeBin2 : Gst.Bin {
		public DecodeBin2 (IntPtr raw) : base (raw) { }

		[DllImport("libgstreamer-0.10.dll") ]
		static extern IntPtr gst_element_factory_make (IntPtr element, IntPtr name);

		public DecodeBin2 (string name) : base (IntPtr.Zero) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_element = Gst.GLib.Marshaller.StringToPtrGStrdup ("decodebin2");
			Raw = gst_element_factory_make (native_element, native_name);
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_element);
			if (Raw == IntPtr.Zero)
				throw new Exception ("Failed to instantiate element \"decodebin2\"");
		}

		public DecodeBin2 () : this ((string) null) { }

		public static DecodeBin2 Make (string name) {
			return Gst.ElementFactory.Make ("decodebin2", name) as DecodeBin2;
		}

		public static DecodeBin2 Make () { return Make (null); } 

		[Gst.GLib.Property ("name")]
		public string Name {
			get {
				Gst.GLib.Value val = GetProperty ("name");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "name");
				val.Val = value;
				SetProperty ("name", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("async-handling")]
		public bool AsyncHandling {
			get {
				Gst.GLib.Value val = GetProperty ("async-handling");
				bool ret = (bool) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "async-handling");
				val.Val = value;
				SetProperty ("async-handling", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("caps")]
		public Gst.Caps Caps {
			get {
				Gst.GLib.Value val = GetProperty ("caps");
				Gst.Caps ret = (Gst.Caps) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "caps");
				val.Val = value;
				SetProperty ("caps", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("subtitle-encoding")]
		public string SubtitleEncoding {
			get {
				Gst.GLib.Value val = GetProperty ("subtitle-encoding");
				string ret = (string) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "subtitle-encoding");
				val.Val = value;
				SetProperty ("subtitle-encoding", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("sink-caps")]
		public Gst.Caps SinkCaps {
			get {
				Gst.GLib.Value val = GetProperty ("sink-caps");
				Gst.Caps ret = (Gst.Caps) val.Val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value (this, "sink-caps");
				val.Val = value;
				SetProperty ("sink-caps", val);
				val.Dispose ();
			}
		}


		public delegate void NewDecodedPadHandler (object o, NewDecodedPadArgs args);

		public class NewDecodedPadArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

			public bool Last {
				get {
					return (bool) Args[1];
				}
			}

		}

		public event NewDecodedPadHandler NewDecodedPad {
			add {
				DynamicSignal.Connect (this, "new-decoded-pad", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "new-decoded-pad", value);
			}
		}
		public delegate void RemovedDecodedPadHandler (object o, RemovedDecodedPadArgs args);

		public class RemovedDecodedPadArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

		}

		public event RemovedDecodedPadHandler RemovedDecodedPad {
			add {
				DynamicSignal.Connect (this, "removed-decoded-pad", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "removed-decoded-pad", value);
			}
		}
		public delegate void UnknownTypeHandler (object o, UnknownTypeArgs args);

		public class UnknownTypeArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

			public Gst.Caps Caps {
				get {
					return (Gst.Caps) Args[1];
				}
			}

		}

		public event UnknownTypeHandler UnknownType {
			add {
				DynamicSignal.Connect (this, "unknown-type", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "unknown-type", value);
			}
		}
		public delegate void AutoplugContinueHandler (object o, AutoplugContinueArgs args);

		public class AutoplugContinueArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

			public Gst.Caps Caps {
				get {
					return (Gst.Caps) Args[1];
				}
			}

		}

		public event AutoplugContinueHandler AutoplugContinue {
			add {
				DynamicSignal.Connect (this, "autoplug-continue", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "autoplug-continue", value);
			}
		}
		public delegate void AutoplugFactoriesHandler (object o, AutoplugFactoriesArgs args);

		public class AutoplugFactoriesArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

			public Gst.Caps Caps {
				get {
					return (Gst.Caps) Args[1];
				}
			}

		}

		public event AutoplugFactoriesHandler AutoplugFactories {
			add {
				DynamicSignal.Connect (this, "autoplug-factories", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "autoplug-factories", value);
			}
		}
		public delegate void AutoplugSortHandler (object o, AutoplugSortArgs args);

		public class AutoplugSortArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

			public Gst.Caps Caps {
				get {
					return (Gst.Caps) Args[1];
				}
			}

			public Gst.GLib.ValueArray Values {
				get {
					return (Gst.GLib.ValueArray) Args[2];
				}
			}

		}

		public event AutoplugSortHandler AutoplugSort {
			add {
				DynamicSignal.Connect (this, "autoplug-sort", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "autoplug-sort", value);
			}
		}
		public delegate void AutoplugSelectHandler (object o, AutoplugSelectArgs args);

		public class AutoplugSelectArgs : Gst.GLib.SignalArgs {
			public Gst.Pad Pad {
				get {
					return (Gst.Pad) Args[0];
				}
			}

			public Gst.Caps Caps {
				get {
					return (Gst.Caps) Args[1];
				}
			}

			public Gst.ElementFactory Factory {
				get {
					return (Gst.ElementFactory) Args[2];
				}
			}

		}

		public event AutoplugSelectHandler AutoplugSelect {
			add {
				DynamicSignal.Connect (this, "autoplug-select", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "autoplug-select", value);
			}
		}
		public event SignalHandler Drained {
			add {
				DynamicSignal.Connect (this, "drained", value);
			}

			remove {
				DynamicSignal.Disconnect (this, "drained", value);
			}
		}
#endregion
	}

}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Cdda {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CddaBaseSrc : Gst.Base.PushSrc {

		public CddaBaseSrc(IntPtr raw) : base(raw) {}

		protected CddaBaseSrc() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[Gst.GLib.Property ("device")]
		public string Device {
			get {
				Gst.GLib.Value val = GetProperty ("device");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("device", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("toc-offset")]
		public int TocOffset {
			get {
				Gst.GLib.Value val = GetProperty ("toc-offset");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("toc-offset", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("track")]
		public uint Track {
			get {
				Gst.GLib.Value val = GetProperty ("track");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("track", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("toc-bias")]
		public bool TocBias {
			get {
				Gst.GLib.Value val = GetProperty ("toc-bias");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("toc-bias", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("mode")]
		public Gst.Cdda.CddaBaseSrcMode Mode {
			get {
				Gst.GLib.Value val = GetProperty ("mode");
				Gst.Cdda.CddaBaseSrcMode ret = (Gst.Cdda.CddaBaseSrcMode) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value((Enum) value);
				SetProperty("mode", val);
				val.Dispose ();
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__cddasharp_gst__cdda_cddabasesrc_get_tags_offset ();

		static uint tags_offset = gst__cddasharp_gst__cdda_cddabasesrc_get_tags_offset ();
		protected Gst.TagList Tags {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + tags_offset);
					return (*raw_ptr) == IntPtr.Zero ? null : (Gst.TagList) Gst.GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gst.TagList), false);
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + tags_offset);
					*raw_ptr = value == null ? IntPtr.Zero : value.Handle;
				}
			}
		}

		static OpenNativeDelegate Open_cb_delegate;
		static OpenNativeDelegate OpenVMCallback {
			get {
				if (Open_cb_delegate == null)
					Open_cb_delegate = new OpenNativeDelegate (Open_cb);
				return Open_cb_delegate;
			}
		}

		static void OverrideOpen (Gst.GLib.GType gtype)
		{
			OverrideOpen (gtype, OpenVMCallback);
		}

		static void OverrideOpen (Gst.GLib.GType gtype, OpenNativeDelegate callback)
		{
			GstCddaBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Open = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool OpenNativeDelegate (IntPtr inst, IntPtr device);

		static bool Open_cb (IntPtr inst, IntPtr device)
		{
			try {
				CddaBaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as CddaBaseSrc;
				bool __result = __obj.OnOpen (Gst.GLib.Marshaller.Utf8PtrToString (device));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Cdda.CddaBaseSrc), ConnectionMethod="OverrideOpen")]
		protected virtual bool OnOpen (string device)
		{
			return InternalOpen (device);
		}

		private bool InternalOpen (string device)
		{
			OpenNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Open;
			if (unmanaged == null) return false;

			IntPtr native_device = Gst.GLib.Marshaller.StringToPtrGStrdup (device);
			bool __result = unmanaged (this.Handle, native_device);
			Gst.GLib.Marshaller.Free (native_device);
			return __result;
		}

		static CloseNativeDelegate Close_cb_delegate;
		static CloseNativeDelegate CloseVMCallback {
			get {
				if (Close_cb_delegate == null)
					Close_cb_delegate = new CloseNativeDelegate (Close_cb);
				return Close_cb_delegate;
			}
		}

		static void OverrideClose (Gst.GLib.GType gtype)
		{
			OverrideClose (gtype, CloseVMCallback);
		}

		static void OverrideClose (Gst.GLib.GType gtype, CloseNativeDelegate callback)
		{
			GstCddaBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Close = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CloseNativeDelegate (IntPtr inst);

		static void Close_cb (IntPtr inst)
		{
			try {
				CddaBaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as CddaBaseSrc;
				__obj.OnClose ();
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Cdda.CddaBaseSrc), ConnectionMethod="OverrideClose")]
		protected virtual void OnClose ()
		{
			InternalClose ();
		}

		private void InternalClose ()
		{
			CloseNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Close;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ReadSectorNativeDelegate ReadSector_cb_delegate;
		static ReadSectorNativeDelegate ReadSectorVMCallback {
			get {
				if (ReadSector_cb_delegate == null)
					ReadSector_cb_delegate = new ReadSectorNativeDelegate (ReadSector_cb);
				return ReadSector_cb_delegate;
			}
		}

		static void OverrideReadSector (Gst.GLib.GType gtype)
		{
			OverrideReadSector (gtype, ReadSectorVMCallback);
		}

		static void OverrideReadSector (Gst.GLib.GType gtype, ReadSectorNativeDelegate callback)
		{
			GstCddaBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.ReadSector = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ReadSectorNativeDelegate (IntPtr inst, int sector);

		static IntPtr ReadSector_cb (IntPtr inst, int sector)
		{
			try {
				CddaBaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as CddaBaseSrc;
				Gst.Buffer __result = __obj.OnReadSector (sector);
				return __result == null ? IntPtr.Zero : __result.OwnedHandle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Cdda.CddaBaseSrc), ConnectionMethod="OverrideReadSector")]
		protected virtual Gst.Buffer OnReadSector (int sector)
		{
			return InternalReadSector (sector);
		}

		private Gst.Buffer InternalReadSector (int sector)
		{
			ReadSectorNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ReadSector;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, sector);
			return Gst.MiniObject.GetObject(__result, true) as Gst.Buffer;
		}

		static GetDefaultDeviceNativeDelegate GetDefaultDevice_cb_delegate;
		static GetDefaultDeviceNativeDelegate GetDefaultDeviceVMCallback {
			get {
				if (GetDefaultDevice_cb_delegate == null)
					GetDefaultDevice_cb_delegate = new GetDefaultDeviceNativeDelegate (GetDefaultDevice_cb);
				return GetDefaultDevice_cb_delegate;
			}
		}

		static void OverrideGetDefaultDevice (Gst.GLib.GType gtype)
		{
			OverrideGetDefaultDevice (gtype, GetDefaultDeviceVMCallback);
		}

		static void OverrideGetDefaultDevice (Gst.GLib.GType gtype, GetDefaultDeviceNativeDelegate callback)
		{
			GstCddaBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetDefaultDevice = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDefaultDeviceNativeDelegate (IntPtr inst);

		static IntPtr GetDefaultDevice_cb (IntPtr inst)
		{
			try {
				CddaBaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as CddaBaseSrc;
				string __result = __obj.OnGetDefaultDevice ();
				return Gst.GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Cdda.CddaBaseSrc), ConnectionMethod="OverrideGetDefaultDevice")]
		protected virtual string OnGetDefaultDevice ()
		{
			return InternalGetDefaultDevice ();
		}

		private string InternalGetDefaultDevice ()
		{
			GetDefaultDeviceNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetDefaultDevice;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return Gst.GLib.Marshaller.PtrToStringGFree(__result);
		}

		static ProbeDevicesNativeDelegate ProbeDevices_cb_delegate;
		static ProbeDevicesNativeDelegate ProbeDevicesVMCallback {
			get {
				if (ProbeDevices_cb_delegate == null)
					ProbeDevices_cb_delegate = new ProbeDevicesNativeDelegate (ProbeDevices_cb);
				return ProbeDevices_cb_delegate;
			}
		}

		static void OverrideProbeDevices (Gst.GLib.GType gtype)
		{
			OverrideProbeDevices (gtype, ProbeDevicesVMCallback);
		}

		static void OverrideProbeDevices (Gst.GLib.GType gtype, ProbeDevicesNativeDelegate callback)
		{
			GstCddaBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.ProbeDevices = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ProbeDevicesNativeDelegate (IntPtr inst);

		static IntPtr ProbeDevices_cb (IntPtr inst)
		{
			try {
				CddaBaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as CddaBaseSrc;
				string[] __result = __obj.OnProbeDevices ();
				return Gst.Marshaller.StringArrayToNullTermPointer (__result);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Cdda.CddaBaseSrc), ConnectionMethod="OverrideProbeDevices")]
		protected virtual string[] OnProbeDevices ()
		{
			return InternalProbeDevices ();
		}

		private string[] InternalProbeDevices ()
		{
			ProbeDevicesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ProbeDevices;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return Gst.Marshaller.NullTermPtrToStringArray (__result, false);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstCddaBaseSrcClass {
			public OpenNativeDelegate Open;
			public CloseNativeDelegate Close;
			public ReadSectorNativeDelegate ReadSector;
			public GetDefaultDeviceNativeDelegate GetDefaultDevice;
			public ProbeDevicesNativeDelegate ProbeDevices;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Base.PushSrc)).GetClassSize ();
		static Hashtable class_structs;

		static GstCddaBaseSrcClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstCddaBaseSrcClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstCddaBaseSrcClass class_struct = (GstCddaBaseSrcClass) Marshal.PtrToStructure (class_ptr, typeof (GstCddaBaseSrcClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstCddaBaseSrcClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstcdda-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_cdda_base_src_add_track(IntPtr raw, IntPtr track);

		public bool AddTrack(Gst.Cdda.CddaBaseSrcTrack track) {
			IntPtr native_track = Gst.GLib.Marshaller.StructureToPtrAlloc (track);
			bool raw_ret = gst_cdda_base_src_add_track(Handle, native_track);
			bool ret = raw_ret;
			track = Gst.Cdda.CddaBaseSrcTrack.New (native_track);
			Marshal.FreeHGlobal (native_track);
			return ret;
		}

		[DllImport("libgstcdda-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_cdda_base_src_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_cdda_base_src_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}


		static CddaBaseSrc ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

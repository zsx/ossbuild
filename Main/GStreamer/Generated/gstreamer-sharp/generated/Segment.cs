// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Segment : Gst.GLib.Opaque {

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_last_stop_offset ();

		static uint last_stop_offset = gstsharp_gst_segment_get_last_stop_offset ();
		public long LastStop {
			get {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + last_stop_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + last_stop_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_start_offset ();

		static uint start_offset = gstsharp_gst_segment_get_start_offset ();
		public long Start {
			get {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + start_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + start_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_accum_offset ();

		static uint accum_offset = gstsharp_gst_segment_get_accum_offset ();
		public long Accum {
			get {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + accum_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + accum_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_applied_rate_offset ();

		static uint applied_rate_offset = gstsharp_gst_segment_get_applied_rate_offset ();
		public double AppliedRate {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + applied_rate_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + applied_rate_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_flags_offset ();

		static uint flags_offset = gstsharp_gst_segment_get_flags_offset ();
		public Gst.SeekFlags Flags {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + flags_offset);
					return (Gst.SeekFlags) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + flags_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_rate_offset ();

		static uint rate_offset = gstsharp_gst_segment_get_rate_offset ();
		public double Rate {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + rate_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + rate_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_duration_offset ();

		static uint duration_offset = gstsharp_gst_segment_get_duration_offset ();
		public long Duration {
			get {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + duration_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + duration_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_stop_offset ();

		static uint stop_offset = gstsharp_gst_segment_get_stop_offset ();
		public long Stop {
			get {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + stop_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + stop_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_abs_rate_offset ();

		static uint abs_rate_offset = gstsharp_gst_segment_get_abs_rate_offset ();
		public double AbsRate {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + abs_rate_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + abs_rate_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_format_offset ();

		static uint format_offset = gstsharp_gst_segment_get_format_offset ();
		public Gst.Format Format {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + format_offset);
					return (Gst.Format) (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + format_offset);
					*raw_ptr = (int) value;
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_segment_get_time_offset ();

		static uint time_offset = gstsharp_gst_segment_get_time_offset ();
		public long Time {
			get {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + time_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					long* raw_ptr = (long*)(((byte*)Handle) + time_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_set_duration(IntPtr raw, int format, long duration);

		public void SetDuration(Gst.Format format, long duration) {
			gst_segment_set_duration(Handle, (int) format, duration);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_set_newsegment_full(IntPtr raw, bool update, double rate, double applied_rate, int format, long start, long stop, long time);

		public void SetNewsegment(bool update, double rate, double applied_rate, Gst.Format format, long start, long stop, long time) {
			gst_segment_set_newsegment_full(Handle, update, rate, applied_rate, (int) format, start, stop, time);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_set_last_stop(IntPtr raw, int format, long position);

		public void SetLastStop(Gst.Format format, long position) {
			gst_segment_set_last_stop(Handle, (int) format, position);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern long gst_segment_to_stream_time(IntPtr raw, int format, long position);

		public long ToStreamTime(Gst.Format format, long position) {
			long raw_ret = gst_segment_to_stream_time(Handle, (int) format, position);
			long ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_init(IntPtr raw, int format);

		public void Init(Gst.Format format) {
			gst_segment_init(Handle, (int) format);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_set_seek(IntPtr raw, double rate, int format, int flags, int start_type, long start, int stop_type, long stop, out bool update);

		public bool SetSeek(double rate, Gst.Format format, Gst.SeekFlags flags, Gst.SeekType start_type, long start, Gst.SeekType stop_type, long stop) {
			bool update;
			gst_segment_set_seek(Handle, rate, (int) format, (int) flags, (int) start_type, start, (int) stop_type, stop, out update);
			return update;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern long gst_segment_to_position(IntPtr raw, int format, long running_time);

		public long ToPosition(Gst.Format format, long running_time) {
			long raw_ret = gst_segment_to_position(Handle, (int) format, running_time);
			long ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern long gst_segment_to_running_time(IntPtr raw, int format, long position);

		public long ToRunningTime(Gst.Format format, long position) {
			long raw_ret = gst_segment_to_running_time(Handle, (int) format, position);
			long ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_set_newsegment(IntPtr raw, bool update, double rate, int format, long start, long stop, long time);

		public void SetNewsegment(bool update, double rate, Gst.Format format, long start, long stop, long time) {
			gst_segment_set_newsegment(Handle, update, rate, (int) format, start, stop, time);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_segment_set_running_time(IntPtr raw, int format, long running_time);

		public bool SetRunningTime(Gst.Format format, long running_time) {
			bool raw_ret = gst_segment_set_running_time(Handle, (int) format, running_time);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_segment_get_type();

		public static Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_segment_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_segment_clip(IntPtr raw, int format, long start, long stop, out long clip_start, out long clip_stop);

		public bool Clip(Gst.Format format, long start, long stop, out long clip_start, out long clip_stop) {
			bool raw_ret = gst_segment_clip(Handle, (int) format, start, stop, out clip_start, out clip_stop);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_segment_copy(IntPtr raw);

		public Gst.Segment Copy() {
			IntPtr raw_ret = gst_segment_copy(Handle);
			Gst.Segment ret = raw_ret == IntPtr.Zero ? null : (Gst.Segment) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Segment), true);
			return ret;
		}

		public Segment(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_segment_new();

		public Segment () 
		{
			Raw = gst_segment_new();
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_segment_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gst_segment_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gst_segment_free (handle);
				return false;
			}
		}

		~Segment ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			Gst.GLib.Timeout.Add (50, new Gst.GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}

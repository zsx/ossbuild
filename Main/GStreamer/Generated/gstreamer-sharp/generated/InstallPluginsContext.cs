// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.PbUtils {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class InstallPluginsContext : Gst.GLib.Opaque {

		[DllImport("libgstpbutils-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_install_plugins_context_get_type();

		public static Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_install_plugins_context_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstpbutils-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_install_plugins_context_set_xid(IntPtr raw, uint xid);

		public uint Xid { 
			set {
				gst_install_plugins_context_set_xid(Handle, value);
			}
		}

		public InstallPluginsContext(IntPtr raw) : base(raw) {}

		[DllImport("libgstpbutils-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_install_plugins_context_new();

		public InstallPluginsContext () 
		{
			Raw = gst_install_plugins_context_new();
		}

		[DllImport("libgstpbutils-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_install_plugins_context_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gst_install_plugins_context_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gst_install_plugins_context_free (handle);
				return false;
			}
		}

		~InstallPluginsContext ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			Gst.GLib.Timeout.Add (50, new Gst.GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}

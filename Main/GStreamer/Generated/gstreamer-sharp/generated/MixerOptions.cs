// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Interfaces {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class MixerOptions : Gst.Interfaces.MixerTrack {

		public MixerOptions(IntPtr raw) : base(raw) {}

		protected MixerOptions() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		static GetValuesNativeDelegate GetValues_cb_delegate;
		static GetValuesNativeDelegate GetValuesVMCallback {
			get {
				if (GetValues_cb_delegate == null)
					GetValues_cb_delegate = new GetValuesNativeDelegate (GetValues_cb);
				return GetValues_cb_delegate;
			}
		}

		static void OverrideGetValues (Gst.GLib.GType gtype)
		{
			OverrideGetValues (gtype, GetValuesVMCallback);
		}

		static void OverrideGetValues (Gst.GLib.GType gtype, GetValuesNativeDelegate callback)
		{
			GstMixerOptionsClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetValues = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetValuesNativeDelegate (IntPtr inst);

		static IntPtr GetValues_cb (IntPtr inst)
		{
			try {
				MixerOptions __obj = Gst.GLib.Object.GetObject (inst, false) as MixerOptions;
				string[] __result = __obj.OnGetValues ();
				return new Gst.GLib.List(__result, typeof (string), false, false) == null ? IntPtr.Zero : new Gst.GLib.List(__result, typeof (string), false, false).Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Interfaces.MixerOptions), ConnectionMethod="OverrideGetValues")]
		protected virtual string[] OnGetValues ()
		{
			return InternalGetValues ();
		}

		private string[] InternalGetValues ()
		{
			GetValuesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetValues;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return (string[]) Gst.GLib.Marshaller.ListPtrToArray (__result, typeof(Gst.GLib.List), false, false, typeof(string));
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstMixerOptionsClass {
			public GetValuesNativeDelegate GetValues;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=3)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Interfaces.MixerTrack)).GetClassSize ();
		static Hashtable class_structs;

		static GstMixerOptionsClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstMixerOptionsClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstMixerOptionsClass class_struct = (GstMixerOptionsClass) Marshal.PtrToStructure (class_ptr, typeof (GstMixerOptionsClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstMixerOptionsClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_mixer_options_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_mixer_options_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_mixer_options_get_values(IntPtr raw);

		public string[] Values { 
			get {
				IntPtr raw_ret = gst_mixer_options_get_values(Handle);
				string[] ret = (string[]) Gst.GLib.Marshaller.ListPtrToArray (raw_ret, typeof(Gst.GLib.List), false, false, typeof(string));
				return ret;
			}
		}


		static MixerOptions ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

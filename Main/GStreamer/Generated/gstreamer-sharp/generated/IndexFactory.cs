// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IndexFactory : Gst.PluginFeature {

		public IndexFactory(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_factory_new(IntPtr name, IntPtr longdesc, IntPtr type);

		public IndexFactory (string name, string longdesc, Gst.GLib.GType type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IndexFactory)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_longdesc = Gst.GLib.Marshaller.StringToPtrGStrdup (longdesc);
			Raw = gst_index_factory_new(native_name, native_longdesc, type.Val);
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_longdesc);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstIndexFactoryClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.PluginFeature)).GetClassSize ();
		static Hashtable class_structs;

		static GstIndexFactoryClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstIndexFactoryClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstIndexFactoryClass class_struct = (GstIndexFactoryClass) Marshal.PtrToStructure (class_ptr, typeof (GstIndexFactoryClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstIndexFactoryClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_factory_make(IntPtr name);

		public static Gst.Index Make(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_index_factory_make(native_name);
			Gst.Index ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Index;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_factory_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_index_factory_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_factory_find(IntPtr name);

		public static Gst.IndexFactory Find(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_index_factory_find(native_name);
			Gst.IndexFactory ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.IndexFactory;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_index_factory_create(IntPtr raw);

		public Gst.Index Create() {
			IntPtr raw_ret = gst_index_factory_create(Handle);
			Gst.Index ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Index;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "IndexFactory.custom"
[DllImport ("gstreamersharpglue-0.10.dll") ]
static extern void gstsharp_gst_index_factory_set_plugin (IntPtr factory, IntPtr plugin);

public static bool Register (Gst.Plugin plugin, string name, string longdesc, Gst.GLib.GType gtype) {
  Gst.IndexFactory factory = new Gst.IndexFactory (name, longdesc, gtype);
  gstsharp_gst_index_factory_set_plugin (factory.Handle, (plugin != null) ? plugin.Handle : IntPtr.Zero);

  Gst.Registry.Default.AddFeature (factory);

  return true;
}


#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Video {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class VideoFilter : Gst.Base.BaseTransform {

		public VideoFilter(IntPtr raw) : base(raw) {}

		protected VideoFilter() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstVideoFilterClass {
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Base.BaseTransform)).GetClassSize ();
		static Hashtable class_structs;

		static GstVideoFilterClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstVideoFilterClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstVideoFilterClass class_struct = (GstVideoFilterClass) Marshal.PtrToStructure (class_ptr, typeof (GstVideoFilterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstVideoFilterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstvideo-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_video_filter_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_video_filter_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}


		static VideoFilter ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

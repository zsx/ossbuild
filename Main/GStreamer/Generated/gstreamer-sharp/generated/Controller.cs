// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Controller {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Controller : Gst.GLib.Object {

		public Controller(IntPtr raw) : base(raw) {}

		protected Controller() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstControllerClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.GLib.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstControllerClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstControllerClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstControllerClass class_struct = (GstControllerClass) Marshal.PtrToStructure (class_ptr, typeof (GstControllerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstControllerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_controller_get(IntPtr raw, IntPtr property_name, ulong timestamp);

		public Gst.GLib.Value Get(string property_name, ulong timestamp) {
			IntPtr raw_ret = gst_controller_get(Handle, Gst.GLib.Marshaller.StringToPtrGStrdup(property_name), timestamp);
			Gst.GLib.Value ret = (Gst.GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (Gst.GLib.Value));
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_controller_set_disabled(IntPtr raw, bool disabled);

		public bool Disabled { 
			set {
				gst_controller_set_disabled(Handle, value);
			}
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_controller_set_property_disabled(IntPtr raw, IntPtr property_name, bool disabled);

		public void SetPropertyDisabled(string property_name, bool disabled) {
			gst_controller_set_property_disabled(Handle, Gst.GLib.Marshaller.StringToPtrGStrdup(property_name), disabled);
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_controller_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_controller_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_controller_set_control_source(IntPtr raw, IntPtr property_name, IntPtr csource);

		public bool SetControlSource(string property_name, Gst.Controller.ControlSource csource) {
			bool raw_ret = gst_controller_set_control_source(Handle, Gst.GLib.Marshaller.StringToPtrGStrdup(property_name), csource == null ? IntPtr.Zero : csource.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_controller_suggest_next_sync(IntPtr raw);

		public ulong SuggestNextSync() {
			ulong raw_ret = gst_controller_suggest_next_sync(Handle);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_controller_get_control_source(IntPtr raw, IntPtr property_name);

		public Gst.Controller.ControlSource GetControlSource(string property_name) {
			IntPtr raw_ret = gst_controller_get_control_source(Handle, Gst.GLib.Marshaller.StringToPtrGStrdup(property_name));
			Gst.Controller.ControlSource ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Controller.ControlSource;
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_controller_sync_values(IntPtr raw, ulong timestamp);

		public bool SyncValues(ulong timestamp) {
			bool raw_ret = gst_controller_sync_values(Handle, timestamp);
			bool ret = raw_ret;
			return ret;
		}


		static Controller ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "Controller.custom"
[DllImport ("libgstcontroller-0.10.dll") ]
static extern IntPtr gst_controller_new_list (IntPtr objekt, IntPtr list);

public Controller (Gst.GLib.Object objekt, string[] properties) : base (IntPtr.Zero) {
  if (GetType () != typeof (Controller)) {
    throw new InvalidOperationException ("Can't override this constructor.");
  }
  Gst.GLib.List list = new Gst.GLib.List (properties, typeof (string), true, true);

  Raw = gst_controller_new_list (objekt == null ? IntPtr.Zero : objekt.Handle, list == null ? IntPtr.Zero : list.Handle);
}

public Controller (Gst.GLib.Object objekt, string property) : this (objekt, new string[] {property}) { }

[DllImport ("libgstcontroller-0.10.dll") ]
static extern bool gst_controller_remove_properties_list (IntPtr raw, IntPtr list);

public bool RemoveProperties (string[] properties) {
  Gst.GLib.List list = new Gst.GLib.List (properties, typeof (string), true, true);

  bool raw_ret = gst_controller_remove_properties_list (Handle, list == null ? IntPtr.Zero : list.Handle);
  bool ret = raw_ret;
  return ret;
}

public bool RemoveProperty (string property) {
  return RemoveProperties (new string[] {property});
}


[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gst__controllersharp_gst__controller_controller_get_properties_offset ();

static uint properties_offset = gst__controllersharp_gst__controller_controller_get_properties_offset ();
public string[] Properties {
  get {
    Gst.GLib.List properties_list;

    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + properties_offset);
      properties_list = new Gst.GLib.List ( (*raw_ptr), typeof (string));
    }

    string[] properties = new string[properties_list.Count];
    for (int i = 0; i < properties_list.Count; i++)
      properties[i] = (string) properties_list[i];

    return properties;
  }
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gst__controllersharp_gst__controller_controller_get_object_offset ();

static uint object_offset = gst__controllersharp_gst__controller_controller_get_object_offset ();
public Gst.GLib.Object Object {
  get {
    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + object_offset);
      return Gst.GLib.Object.GetObject ( (*raw_ptr));
    }
  }
}

[StructLayout (LayoutKind.Sequential) ]
struct GstValueArray {
  public IntPtr property_name;
  public int nbsamples;
  public ulong sample_interval;
  public IntPtr values;
}

[DllImport ("libgstcontroller-0.10.dll") ]
static extern bool gst_controller_get_value_array (IntPtr raw, ulong timestamp, ref GstValueArray value_array);

[DllImport ("libglib-2.0-0.dll") ]
static extern IntPtr g_try_malloc (int size);

static readonly Type[] supported_types = new Type[] {
  typeof (string),
  typeof (short),
  typeof (ushort),
  typeof (int),
  typeof (uint),
  typeof (long),
  typeof (ulong),
  typeof (float),
  typeof (double),
  typeof (bool)
};

public System.Array GetValueArray (string property, ulong timestamp, int nsamples, ulong interval) {
  GstValueArray va = new GstValueArray ();

  Gst.Object ob = (Gst.Object) this.Object;
  Gst.PropertyInfo pi = ob.GetPropertyInfo (property);
  System.Type t = (System.Type) pi.GType;

  bool supported = false;
  foreach (System.Type tmp in supported_types)
    if (tmp == t)
      supported = true;
  if (!supported)
    throw new Exception ("Unsupported type '" + t + "'");

  int eltsize = Marshal.SizeOf (t);
  va.values = g_try_malloc (eltsize * nsamples);
  if (va.values == IntPtr.Zero)
    throw new OutOfMemoryException ();

  va.property_name = Gst.GLib.Marshaller.StringToPtrGStrdup (property);
  va.nbsamples = nsamples;
  va.sample_interval = interval;

  bool raw_ret = gst_controller_get_value_array (Handle, timestamp, ref va);

  if (!raw_ret) {
    Gst.GLib.Marshaller.Free (va.property_name);
    Gst.GLib.Marshaller.Free (va.values);
    return null;
  }

  System.Array values = Array.CreateInstance (t, nsamples);

  if (t == typeof (string)) {
    string[] ret = (string[]) values;

    for (int i = 0; i < nsamples; i++) {
      IntPtr str = Marshal.ReadIntPtr (va.values, i * IntPtr.Size);
      ret[i] = Gst.GLib.Marshaller.PtrToStringGFree (str);
    }
  } else if (t == typeof (short)) {
    short[] ret = (short[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = Marshal.ReadInt16 (va.values, i * 2);
    }
  } else if (t == typeof (ushort)) {
    ushort[] ret = (ushort[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = (ushort) Marshal.ReadInt16 (va.values, i * 2);
    }
  } else if (t == typeof (int)) {
    int[] ret = (int[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = Marshal.ReadInt32 (va.values, i * 4);
    }
  } else if (t == typeof (uint)) {
    uint[] ret = (uint[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = (uint) Marshal.ReadInt32 (va.values, i * 4);
    }
  } else if (t == typeof (long)) {
    long[] ret = (long[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = Marshal.ReadInt64 (va.values, i * 8);
    }
  } else if (t == typeof (ulong)) {
    ulong[] ret = (ulong[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = (ulong) Marshal.ReadInt64 (va.values, i * 8);
    }
  } else if (t == typeof (float)) {
    float[] ret = (float[]) values;
    Marshal.Copy (va.values, ret, 0, nsamples);
  } else if (t == typeof (double)) {
    double[] ret = (double[]) values;
    Marshal.Copy (va.values, ret, 0, nsamples);
  } else if (t == typeof (bool)) {
    bool[] ret = (bool[]) values;

    for (int i = 0; i < nsamples; i++) {
      ret[i] = Marshal.ReadInt32 (va.values, i * 4) != 0;
    }
  }

  Gst.GLib.Marshaller.Free (va.property_name);
  Gst.GLib.Marshaller.Free (va.values);

  return values;
}


#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Interfaces {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TunerAdapter : Gst.GLib.GInterfaceAdapter, Gst.Interfaces.Tuner {

		[StructLayout (LayoutKind.Sequential)]
		struct GstTunerClass {
			public ListChannelsNativeDelegate ListChannels;
			public SetChannelNativeDelegate SetChannel;
			public GetChannelNativeDelegate GetChannel;
			public ListNormsNativeDelegate ListNorms;
			public SetNormNativeDelegate SetNorm;
			public GetNormNativeDelegate GetNorm;
			public SetFrequencyNativeDelegate SetFrequency;
			public GetFrequencyNativeDelegate GetFrequency;
			public SignalStrengthNativeDelegate SignalStrength;
			IntPtr ChannelChanged;
			IntPtr NormChanged;
			IntPtr FrequencyChanged;
			IntPtr SignalChanged;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static GstTunerClass iface;

		static TunerAdapter ()
		{
			Gst.GLib.GType.Register (_gtype, typeof(TunerAdapter));
			iface.ListChannels = new ListChannelsNativeDelegate (ListChannels_cb);
			iface.SetChannel = new SetChannelNativeDelegate (SetChannel_cb);
			iface.GetChannel = new GetChannelNativeDelegate (GetChannel_cb);
			iface.ListNorms = new ListNormsNativeDelegate (ListNorms_cb);
			iface.SetNorm = new SetNormNativeDelegate (SetNorm_cb);
			iface.GetNorm = new GetNormNativeDelegate (GetNorm_cb);
			iface.SetFrequency = new SetFrequencyNativeDelegate (SetFrequency_cb);
			iface.GetFrequency = new GetFrequencyNativeDelegate (GetFrequency_cb);
			iface.SignalStrength = new SignalStrengthNativeDelegate (SignalStrength_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ListChannelsNativeDelegate (IntPtr inst);

		static IntPtr ListChannels_cb (IntPtr inst)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				Gst.Interfaces.TunerChannel[] __result = __obj.ListChannels ();
				return new Gst.GLib.List(__result, typeof (Gst.Interfaces.TunerChannel), false, false) == null ? IntPtr.Zero : new Gst.GLib.List(__result, typeof (Gst.Interfaces.TunerChannel), false, false).Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetChannelNativeDelegate (IntPtr inst, IntPtr channel);

		static void SetChannel_cb (IntPtr inst, IntPtr channel)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				__obj.Channel = Gst.GLib.Object.GetObject(channel) as Gst.Interfaces.TunerChannel;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetChannelNativeDelegate (IntPtr inst);

		static IntPtr GetChannel_cb (IntPtr inst)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				Gst.Interfaces.TunerChannel __result = __obj.Channel;
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ListNormsNativeDelegate (IntPtr inst);

		static IntPtr ListNorms_cb (IntPtr inst)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				Gst.Interfaces.TunerChannel[] __result = __obj.ListNorms ();
				return new Gst.GLib.List(__result, typeof (Gst.Interfaces.TunerChannel), false, false) == null ? IntPtr.Zero : new Gst.GLib.List(__result, typeof (Gst.Interfaces.TunerChannel), false, false).Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetNormNativeDelegate (IntPtr inst, IntPtr norm);

		static void SetNorm_cb (IntPtr inst, IntPtr norm)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				__obj.Norm = Gst.GLib.Object.GetObject(norm) as Gst.Interfaces.TunerNorm;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetNormNativeDelegate (IntPtr inst);

		static IntPtr GetNorm_cb (IntPtr inst)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				Gst.Interfaces.TunerNorm __result = __obj.Norm;
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetFrequencyNativeDelegate (IntPtr inst, IntPtr channel, UIntPtr frequency);

		static void SetFrequency_cb (IntPtr inst, IntPtr channel, UIntPtr frequency)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				__obj.SetFrequency (Gst.GLib.Object.GetObject(channel) as Gst.Interfaces.TunerChannel, (ulong) frequency);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate UIntPtr GetFrequencyNativeDelegate (IntPtr inst, IntPtr channel);

		static UIntPtr GetFrequency_cb (IntPtr inst, IntPtr channel)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				ulong __result = __obj.GetFrequency (Gst.GLib.Object.GetObject(channel) as Gst.Interfaces.TunerChannel);
				return new UIntPtr (__result);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int SignalStrengthNativeDelegate (IntPtr inst, IntPtr channel);

		static int SignalStrength_cb (IntPtr inst, IntPtr channel)
		{
			try {
				TunerImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as TunerImplementor;
				int __result = __obj.SignalStrength (Gst.GLib.Object.GetObject(channel) as Gst.Interfaces.TunerChannel);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GstTunerClass native_iface = (GstTunerClass) Marshal.PtrToStructure (ifaceptr, typeof (GstTunerClass));
			native_iface.ListChannels = iface.ListChannels;
			native_iface.SetChannel = iface.SetChannel;
			native_iface.GetChannel = iface.GetChannel;
			native_iface.ListNorms = iface.ListNorms;
			native_iface.SetNorm = iface.SetNorm;
			native_iface.GetNorm = iface.GetNorm;
			native_iface.SetFrequency = iface.SetFrequency;
			native_iface.GetFrequency = iface.GetFrequency;
			native_iface.SignalStrength = iface.SignalStrength;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		Gst.GLib.Object implementor;

		public TunerAdapter ()
		{
			InitHandler = new Gst.GLib.GInterfaceInitHandler (Initialize);
		}

		public TunerAdapter (TunerImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is Gst.GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of Gst.GLib.Object");
			this.implementor = implementor as Gst.GLib.Object;
		}

		public TunerAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = Gst.GLib.Object.GetObject (handle);
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_get_type();

		private static Gst.GLib.GType _gtype = new Gst.GLib.GType (gst_tuner_get_type ());

		public override Gst.GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static Tuner GetObject (IntPtr handle, bool owned)
		{
			Gst.GLib.Object obj = Gst.GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Tuner GetObject (Gst.GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is TunerImplementor)
				return new TunerAdapter (obj as TunerImplementor);
			else if (obj as Tuner == null)
				return new TunerAdapter (obj.Handle);
			else
				return obj as Tuner;
		}

		public TunerImplementor Implementor {
			get {
				return implementor as TunerImplementor;
			}
		}

		[Gst.GLib.Signal("frequency-changed")]
		public event Gst.Interfaces.FrequencyChangedHandler FrequencyChanged {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "frequency-changed", typeof (Gst.Interfaces.FrequencyChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "frequency-changed", typeof (Gst.Interfaces.FrequencyChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("norm-changed")]
		public event Gst.Interfaces.NormChangedHandler NormChanged {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "norm-changed", typeof (Gst.Interfaces.NormChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "norm-changed", typeof (Gst.Interfaces.NormChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("signal-changed")]
		public event Gst.Interfaces.SignalChangedHandler SignalChanged {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "signal-changed", typeof (Gst.Interfaces.SignalChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "signal-changed", typeof (Gst.Interfaces.SignalChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("channel-changed")]
		public event Gst.Interfaces.ChannelChangedHandler ChannelChanged {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "channel-changed", typeof (Gst.Interfaces.ChannelChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (Gst.GLib.Object.GetObject (Handle), "channel-changed", typeof (Gst.Interfaces.ChannelChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_get_norm(IntPtr raw);

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_set_norm(IntPtr raw, IntPtr norm);

		public Gst.Interfaces.TunerNorm Norm { 
			get {
				IntPtr raw_ret = gst_tuner_get_norm(Handle);
				Gst.Interfaces.TunerNorm ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.Interfaces.TunerNorm;
				return ret;
			}
			set {
				gst_tuner_set_norm(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_tuner_signal_strength(IntPtr raw, IntPtr channel);

		public int SignalStrength(Gst.Interfaces.TunerChannel channel) {
			int raw_ret = gst_tuner_signal_strength(Handle, channel == null ? IntPtr.Zero : channel.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_frequency_changed(IntPtr raw, IntPtr channel, UIntPtr frequency);

		public void EmitFrequencyChanged(Gst.Interfaces.TunerChannel channel, ulong frequency) {
			gst_tuner_frequency_changed(Handle, channel == null ? IntPtr.Zero : channel.Handle, new UIntPtr (frequency));
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_set_frequency(IntPtr raw, IntPtr channel, UIntPtr frequency);

		public void SetFrequency(Gst.Interfaces.TunerChannel channel, ulong frequency) {
			gst_tuner_set_frequency(Handle, channel == null ? IntPtr.Zero : channel.Handle, new UIntPtr (frequency));
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_norm_changed(IntPtr raw, IntPtr norm);

		public void EmitNormChanged(Gst.Interfaces.TunerNorm norm) {
			gst_tuner_norm_changed(Handle, norm == null ? IntPtr.Zero : norm.Handle);
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_signal_changed(IntPtr raw, IntPtr channel, int signal);

		public void EmitSignalChanged(Gst.Interfaces.TunerChannel channel, int signal) {
			gst_tuner_signal_changed(Handle, channel == null ? IntPtr.Zero : channel.Handle, signal);
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_list_norms(IntPtr raw);

		public Gst.Interfaces.TunerChannel[] ListNorms() {
			IntPtr raw_ret = gst_tuner_list_norms(Handle);
			Gst.Interfaces.TunerChannel[] ret = (Gst.Interfaces.TunerChannel[]) Gst.GLib.Marshaller.ListPtrToArray (raw_ret, typeof(Gst.GLib.List), false, false, typeof(Gst.Interfaces.TunerChannel));
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_tuner_get_frequency(IntPtr raw, IntPtr channel);

		public ulong GetFrequency(Gst.Interfaces.TunerChannel channel) {
			UIntPtr raw_ret = gst_tuner_get_frequency(Handle, channel == null ? IntPtr.Zero : channel.Handle);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_get_channel(IntPtr raw);

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_set_channel(IntPtr raw, IntPtr channel);

		public Gst.Interfaces.TunerChannel Channel { 
			get {
				IntPtr raw_ret = gst_tuner_get_channel(Handle);
				Gst.Interfaces.TunerChannel ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.Interfaces.TunerChannel;
				return ret;
			}
			set {
				gst_tuner_set_channel(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_find_channel_by_name(IntPtr raw, IntPtr channel);

		public Gst.Interfaces.TunerChannel FindChannelByName(string channel) {
			IntPtr raw_ret = gst_tuner_find_channel_by_name(Handle, Gst.GLib.Marshaller.StringToPtrGStrdup(channel));
			Gst.Interfaces.TunerChannel ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.Interfaces.TunerChannel;
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_list_channels(IntPtr raw);

		public Gst.Interfaces.TunerChannel[] ListChannels() {
			IntPtr raw_ret = gst_tuner_list_channels(Handle);
			Gst.Interfaces.TunerChannel[] ret = (Gst.Interfaces.TunerChannel[]) Gst.GLib.Marshaller.ListPtrToArray (raw_ret, typeof(Gst.GLib.List), false, false, typeof(Gst.Interfaces.TunerChannel));
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_find_norm_by_name(IntPtr raw, IntPtr norm);

		public Gst.Interfaces.TunerNorm FindNormByName(string norm) {
			IntPtr raw_ret = gst_tuner_find_norm_by_name(Handle, Gst.GLib.Marshaller.StringToPtrGStrdup(norm));
			Gst.Interfaces.TunerNorm ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.Interfaces.TunerNorm;
			return ret;
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_tuner_channel_changed(IntPtr raw, IntPtr channel);

		public void EmitChannelChanged(Gst.Interfaces.TunerChannel channel) {
			gst_tuner_channel_changed(Handle, channel == null ? IntPtr.Zero : channel.Handle);
		}

#endregion
	}
}

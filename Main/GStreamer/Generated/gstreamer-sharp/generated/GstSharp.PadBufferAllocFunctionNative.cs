// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int PadBufferAllocFunctionNative(IntPtr pad, ulong offset, uint size, IntPtr caps, out IntPtr buf);

	internal class PadBufferAllocFunctionInvoker {

		PadBufferAllocFunctionNative native_cb;
		IntPtr __data;
		Gst.GLib.DestroyNotify __notify;

		~PadBufferAllocFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal PadBufferAllocFunctionInvoker (PadBufferAllocFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal PadBufferAllocFunctionInvoker (PadBufferAllocFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal PadBufferAllocFunctionInvoker (PadBufferAllocFunctionNative native_cb, IntPtr data, Gst.GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.PadBufferAllocFunction Handler {
			get {
				return new Gst.PadBufferAllocFunction(InvokeNative);
			}
		}

		Gst.FlowReturn InvokeNative (Gst.Pad pad, ulong offset, uint size, Gst.Caps caps, out Gst.Buffer buf)
		{
			IntPtr native_buf;
			Gst.FlowReturn result = (Gst.FlowReturn) native_cb (pad == null ? IntPtr.Zero : pad.Handle, offset, size, caps == null ? IntPtr.Zero : caps.Handle, out native_buf);
			buf = Gst.MiniObject.GetObject(native_buf) as Gst.Buffer;
			return result;
		}
	}

	internal class PadBufferAllocFunctionWrapper {

		public int NativeCallback (IntPtr pad, ulong offset, uint size, IntPtr caps, out IntPtr buf)
		{
			try {
				Gst.Buffer mybuf;

				Gst.FlowReturn __ret = managed (Gst.GLib.Object.GetObject(pad) as Gst.Pad, offset, size, caps == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (caps, typeof (Gst.Caps), false), out mybuf);
				buf = mybuf == null ? IntPtr.Zero : mybuf.Handle;

				if (release_on_call)
					gch.Free ();
				return (int) __ret;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal PadBufferAllocFunctionNative NativeDelegate;
		Gst.PadBufferAllocFunction managed;

		public PadBufferAllocFunctionWrapper (Gst.PadBufferAllocFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new PadBufferAllocFunctionNative (NativeCallback);
		}

		public static Gst.PadBufferAllocFunction GetManagedDelegate (PadBufferAllocFunctionNative native)
		{
			if (native == null)
				return null;
			PadBufferAllocFunctionWrapper wrapper = (PadBufferAllocFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}

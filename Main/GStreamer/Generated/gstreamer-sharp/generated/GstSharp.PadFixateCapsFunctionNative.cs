// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void PadFixateCapsFunctionNative(IntPtr pad, IntPtr caps);

	internal class PadFixateCapsFunctionInvoker {

		PadFixateCapsFunctionNative native_cb;
		IntPtr __data;
		Gst.GLib.DestroyNotify __notify;

		~PadFixateCapsFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal PadFixateCapsFunctionInvoker (PadFixateCapsFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal PadFixateCapsFunctionInvoker (PadFixateCapsFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal PadFixateCapsFunctionInvoker (PadFixateCapsFunctionNative native_cb, IntPtr data, Gst.GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.PadFixateCapsFunction Handler {
			get {
				return new Gst.PadFixateCapsFunction(InvokeNative);
			}
		}

		void InvokeNative (Gst.Pad pad, Gst.Caps caps)
		{
			native_cb (pad == null ? IntPtr.Zero : pad.Handle, caps == null ? IntPtr.Zero : caps.Handle);
		}
	}

	internal class PadFixateCapsFunctionWrapper {

		public void NativeCallback (IntPtr pad, IntPtr caps)
		{
			try {
				managed (Gst.GLib.Object.GetObject(pad) as Gst.Pad, caps == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (caps, typeof (Gst.Caps), false));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal PadFixateCapsFunctionNative NativeDelegate;
		Gst.PadFixateCapsFunction managed;

		public PadFixateCapsFunctionWrapper (Gst.PadFixateCapsFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new PadFixateCapsFunctionNative (NativeCallback);
		}

		public static Gst.PadFixateCapsFunction GetManagedDelegate (PadFixateCapsFunctionNative native)
		{
			if (native == null)
				return null;
			PadFixateCapsFunctionWrapper wrapper = (PadFixateCapsFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Element : Gst.Object {

		public Element(IntPtr raw) : base(raw) {}

		protected Element() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_element_get_current_state_offset ();

		static uint current_state_offset = gstsharp_gst_element_get_current_state_offset ();
		public Gst.State CurrentState {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + current_state_offset);
					return (Gst.State) (*raw_ptr);
				}
			}
		}

		[Gst.GLib.Signal("no-more-pads")]
		public event System.EventHandler HasNoMorePads {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "no-more-pads");
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "no-more-pads");
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("pad-added")]
		public event Gst.PadAddedHandler PadAdded {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "pad-added", typeof (Gst.PadAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "pad-added", typeof (Gst.PadAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("pad-removed")]
		public event Gst.PadRemovedHandler PadRemoved {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "pad-removed", typeof (Gst.PadRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "pad-removed", typeof (Gst.PadRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		static PadAddedNativeDelegate PadAdded_cb_delegate;
		static PadAddedNativeDelegate PadAddedVMCallback {
			get {
				if (PadAdded_cb_delegate == null)
					PadAdded_cb_delegate = new PadAddedNativeDelegate (PadAdded_cb);
				return PadAdded_cb_delegate;
			}
		}

		static void OverridePadAdded (Gst.GLib.GType gtype)
		{
			OverridePadAdded (gtype, PadAddedVMCallback);
		}

		static void OverridePadAdded (Gst.GLib.GType gtype, PadAddedNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.PadAdded = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PadAddedNativeDelegate (IntPtr inst, IntPtr pad);

		static void PadAdded_cb (IntPtr inst, IntPtr pad)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				__obj.OnPadAdded (Gst.GLib.Object.GetObject(pad) as Gst.Pad);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverridePadAdded")]
		protected virtual void OnPadAdded (Gst.Pad pad)
		{
			InternalPadAdded (pad);
		}

		private void InternalPadAdded (Gst.Pad pad)
		{
			PadAddedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PadAdded;
			if (unmanaged == null) return;

			unmanaged (this.Handle, pad == null ? IntPtr.Zero : pad.Handle);
		}

		static PadRemovedNativeDelegate PadRemoved_cb_delegate;
		static PadRemovedNativeDelegate PadRemovedVMCallback {
			get {
				if (PadRemoved_cb_delegate == null)
					PadRemoved_cb_delegate = new PadRemovedNativeDelegate (PadRemoved_cb);
				return PadRemoved_cb_delegate;
			}
		}

		static void OverridePadRemoved (Gst.GLib.GType gtype)
		{
			OverridePadRemoved (gtype, PadRemovedVMCallback);
		}

		static void OverridePadRemoved (Gst.GLib.GType gtype, PadRemovedNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.PadRemoved = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PadRemovedNativeDelegate (IntPtr inst, IntPtr pad);

		static void PadRemoved_cb (IntPtr inst, IntPtr pad)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				__obj.OnPadRemoved (Gst.GLib.Object.GetObject(pad) as Gst.Pad);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverridePadRemoved")]
		protected virtual void OnPadRemoved (Gst.Pad pad)
		{
			InternalPadRemoved (pad);
		}

		private void InternalPadRemoved (Gst.Pad pad)
		{
			PadRemovedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PadRemoved;
			if (unmanaged == null) return;

			unmanaged (this.Handle, pad == null ? IntPtr.Zero : pad.Handle);
		}

		static HasNoMorePadsNativeDelegate HasNoMorePads_cb_delegate;
		static HasNoMorePadsNativeDelegate HasNoMorePadsVMCallback {
			get {
				if (HasNoMorePads_cb_delegate == null)
					HasNoMorePads_cb_delegate = new HasNoMorePadsNativeDelegate (HasNoMorePads_cb);
				return HasNoMorePads_cb_delegate;
			}
		}

		static void OverrideHasNoMorePads (Gst.GLib.GType gtype)
		{
			OverrideHasNoMorePads (gtype, HasNoMorePadsVMCallback);
		}

		static void OverrideHasNoMorePads (Gst.GLib.GType gtype, HasNoMorePadsNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.HasNoMorePads = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void HasNoMorePadsNativeDelegate (IntPtr inst);

		static void HasNoMorePads_cb (IntPtr inst)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				__obj.OnHasNoMorePads ();
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideHasNoMorePads")]
		protected virtual void OnHasNoMorePads ()
		{
			InternalHasNoMorePads ();
		}

		private void InternalHasNoMorePads ()
		{
			HasNoMorePadsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).HasNoMorePads;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static RequestNewPadNativeDelegate RequestNewPad_cb_delegate;
		static RequestNewPadNativeDelegate RequestNewPadVMCallback {
			get {
				if (RequestNewPad_cb_delegate == null)
					RequestNewPad_cb_delegate = new RequestNewPadNativeDelegate (RequestNewPad_cb);
				return RequestNewPad_cb_delegate;
			}
		}

		static void OverrideRequestNewPad (Gst.GLib.GType gtype)
		{
			OverrideRequestNewPad (gtype, RequestNewPadVMCallback);
		}

		static void OverrideRequestNewPad (Gst.GLib.GType gtype, RequestNewPadNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.RequestNewPad = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr RequestNewPadNativeDelegate (IntPtr inst, IntPtr templ, IntPtr name);

		static IntPtr RequestNewPad_cb (IntPtr inst, IntPtr templ, IntPtr name)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.Pad __result = __obj.OnRequestNewPad (Gst.GLib.Object.GetObject(templ) as Gst.PadTemplate, Gst.GLib.Marshaller.Utf8PtrToString (name));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideRequestNewPad")]
		protected virtual Gst.Pad OnRequestNewPad (Gst.PadTemplate templ, string name)
		{
			return InternalRequestNewPad (templ, name);
		}

		private Gst.Pad InternalRequestNewPad (Gst.PadTemplate templ, string name)
		{
			RequestNewPadNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RequestNewPad;
			if (unmanaged == null) return null;

			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr __result = unmanaged (this.Handle, templ == null ? IntPtr.Zero : templ.Handle, native_name);
			Gst.GLib.Marshaller.Free (native_name);
			return Gst.GLib.Object.GetObject(__result) as Gst.Pad;
		}

		static ReleasePadNativeDelegate ReleasePad_cb_delegate;
		static ReleasePadNativeDelegate ReleasePadVMCallback {
			get {
				if (ReleasePad_cb_delegate == null)
					ReleasePad_cb_delegate = new ReleasePadNativeDelegate (ReleasePad_cb);
				return ReleasePad_cb_delegate;
			}
		}

		static void OverrideReleasePad (Gst.GLib.GType gtype)
		{
			OverrideReleasePad (gtype, ReleasePadVMCallback);
		}

		static void OverrideReleasePad (Gst.GLib.GType gtype, ReleasePadNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.ReleasePad = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ReleasePadNativeDelegate (IntPtr inst, IntPtr pad);

		static void ReleasePad_cb (IntPtr inst, IntPtr pad)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				__obj.OnReleasePad (Gst.GLib.Object.GetObject(pad) as Gst.Pad);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideReleasePad")]
		protected virtual void OnReleasePad (Gst.Pad pad)
		{
			InternalReleasePad (pad);
		}

		private void InternalReleasePad (Gst.Pad pad)
		{
			ReleasePadNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ReleasePad;
			if (unmanaged == null) return;

			unmanaged (this.Handle, pad == null ? IntPtr.Zero : pad.Handle);
		}

		static GetStateNativeDelegate GetState_cb_delegate;
		static GetStateNativeDelegate GetStateVMCallback {
			get {
				if (GetState_cb_delegate == null)
					GetState_cb_delegate = new GetStateNativeDelegate (GetState_cb);
				return GetState_cb_delegate;
			}
		}

		static void OverrideGetState (Gst.GLib.GType gtype)
		{
			OverrideGetState (gtype, GetStateVMCallback);
		}

		static void OverrideGetState (Gst.GLib.GType gtype, GetStateNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetState = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetStateNativeDelegate (IntPtr inst, out int state, out int pending, ulong timeout);

		static int GetState_cb (IntPtr inst, out int state, out int pending, ulong timeout)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.State mystate;
				Gst.State mypending;
				Gst.StateChangeReturn __result = __obj.OnGetState (out mystate, out mypending, timeout);
				state = (int) mystate;
				pending = (int) mypending;
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideGetState")]
		protected virtual Gst.StateChangeReturn OnGetState (out Gst.State state, out Gst.State pending, ulong timeout)
		{
			return InternalGetState (out state, out pending, timeout);
		}

		private Gst.StateChangeReturn InternalGetState (out Gst.State state, out Gst.State pending, ulong timeout)
		{
			GetStateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetState;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			int native_state;
			int native_pending;
			int __result = unmanaged (this.Handle, out native_state, out native_pending, timeout);
			state = (Gst.State) native_state;
			pending = (Gst.State) native_pending;
			return (Gst.StateChangeReturn) __result;
		}

		static SetStateNativeDelegate SetState_cb_delegate;
		static SetStateNativeDelegate SetStateVMCallback {
			get {
				if (SetState_cb_delegate == null)
					SetState_cb_delegate = new SetStateNativeDelegate (SetState_cb);
				return SetState_cb_delegate;
			}
		}

		static void OverrideSetState (Gst.GLib.GType gtype)
		{
			OverrideSetState (gtype, SetStateVMCallback);
		}

		static void OverrideSetState (Gst.GLib.GType gtype, SetStateNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetState = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int SetStateNativeDelegate (IntPtr inst, int state);

		static int SetState_cb (IntPtr inst, int state)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.StateChangeReturn __result = __obj.OnSetState ((Gst.State) state);
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideSetState")]
		protected virtual Gst.StateChangeReturn OnSetState (Gst.State state)
		{
			return InternalSetState (state);
		}

		private Gst.StateChangeReturn InternalSetState (Gst.State state)
		{
			SetStateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetState;
			if (unmanaged == null) return (Gst.StateChangeReturn) 0;

			int __result = unmanaged (this.Handle, (int) state);
			return (Gst.StateChangeReturn) __result;
		}

		static ChangeStateNativeDelegate ChangeState_cb_delegate;
		static ChangeStateNativeDelegate ChangeStateVMCallback {
			get {
				if (ChangeState_cb_delegate == null)
					ChangeState_cb_delegate = new ChangeStateNativeDelegate (ChangeState_cb);
				return ChangeState_cb_delegate;
			}
		}

		static void OverrideChangeState (Gst.GLib.GType gtype)
		{
			OverrideChangeState (gtype, ChangeStateVMCallback);
		}

		static void OverrideChangeState (Gst.GLib.GType gtype, ChangeStateNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.ChangeState = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int ChangeStateNativeDelegate (IntPtr inst, int transition);

		static int ChangeState_cb (IntPtr inst, int transition)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.StateChangeReturn __result = __obj.OnChangeState ((Gst.StateChange) transition);
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideChangeState")]
		protected virtual Gst.StateChangeReturn OnChangeState (Gst.StateChange transition)
		{
			return InternalChangeState (transition);
		}

		private Gst.StateChangeReturn InternalChangeState (Gst.StateChange transition)
		{
			ChangeStateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ChangeState;
			if (unmanaged == null) return (Gst.StateChangeReturn) 0;

			int __result = unmanaged (this.Handle, (int) transition);
			return (Gst.StateChangeReturn) __result;
		}

		static SetBusNativeDelegate SetBus_cb_delegate;
		static SetBusNativeDelegate SetBusVMCallback {
			get {
				if (SetBus_cb_delegate == null)
					SetBus_cb_delegate = new SetBusNativeDelegate (SetBus_cb);
				return SetBus_cb_delegate;
			}
		}

		static void OverrideSetBus (Gst.GLib.GType gtype)
		{
			OverrideSetBus (gtype, SetBusVMCallback);
		}

		static void OverrideSetBus (Gst.GLib.GType gtype, SetBusNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetBus = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetBusNativeDelegate (IntPtr inst, IntPtr bus);

		static void SetBus_cb (IntPtr inst, IntPtr bus)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				__obj.OnSetBus (Gst.GLib.Object.GetObject(bus) as Gst.Bus);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideSetBus")]
		protected virtual void OnSetBus (Gst.Bus bus)
		{
			InternalSetBus (bus);
		}

		private void InternalSetBus (Gst.Bus bus)
		{
			SetBusNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetBus;
			if (unmanaged == null) return;

			unmanaged (this.Handle, bus == null ? IntPtr.Zero : bus.Handle);
		}

		static ProvideClockNativeDelegate ProvideClock_cb_delegate;
		static ProvideClockNativeDelegate ProvideClockVMCallback {
			get {
				if (ProvideClock_cb_delegate == null)
					ProvideClock_cb_delegate = new ProvideClockNativeDelegate (ProvideClock_cb);
				return ProvideClock_cb_delegate;
			}
		}

		static void OverrideProvideClock (Gst.GLib.GType gtype)
		{
			OverrideProvideClock (gtype, ProvideClockVMCallback);
		}

		static void OverrideProvideClock (Gst.GLib.GType gtype, ProvideClockNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.ProvideClock = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr ProvideClockNativeDelegate (IntPtr inst);

		static IntPtr ProvideClock_cb (IntPtr inst)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.Clock __result = __obj.OnProvideClock ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideProvideClock")]
		protected virtual Gst.Clock OnProvideClock ()
		{
			return InternalProvideClock ();
		}

		private Gst.Clock InternalProvideClock ()
		{
			ProvideClockNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ProvideClock;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return Gst.GLib.Object.GetObject(__result) as Gst.Clock;
		}

		static SetClockNativeDelegate SetClock_cb_delegate;
		static SetClockNativeDelegate SetClockVMCallback {
			get {
				if (SetClock_cb_delegate == null)
					SetClock_cb_delegate = new SetClockNativeDelegate (SetClock_cb);
				return SetClock_cb_delegate;
			}
		}

		static void OverrideSetClock (Gst.GLib.GType gtype)
		{
			OverrideSetClock (gtype, SetClockVMCallback);
		}

		static void OverrideSetClock (Gst.GLib.GType gtype, SetClockNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetClock = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetClockNativeDelegate (IntPtr inst, IntPtr clock);

		static bool SetClock_cb (IntPtr inst, IntPtr clock)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				bool __result = __obj.OnSetClock (Gst.GLib.Object.GetObject(clock) as Gst.Clock);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideSetClock")]
		protected virtual bool OnSetClock (Gst.Clock clock)
		{
			return InternalSetClock (clock);
		}

		private bool InternalSetClock (Gst.Clock clock)
		{
			SetClockNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetClock;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, clock == null ? IntPtr.Zero : clock.Handle);
			return __result;
		}

		static GetIndexNativeDelegate GetIndex_cb_delegate;
		static GetIndexNativeDelegate GetIndexVMCallback {
			get {
				if (GetIndex_cb_delegate == null)
					GetIndex_cb_delegate = new GetIndexNativeDelegate (GetIndex_cb);
				return GetIndex_cb_delegate;
			}
		}

		static void OverrideGetIndex (Gst.GLib.GType gtype)
		{
			OverrideGetIndex (gtype, GetIndexVMCallback);
		}

		static void OverrideGetIndex (Gst.GLib.GType gtype, GetIndexNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetIndex = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetIndexNativeDelegate (IntPtr inst);

		static IntPtr GetIndex_cb (IntPtr inst)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.Index __result = __obj.OnGetIndex ();
				return __result == null ? IntPtr.Zero : __result.OwnedHandle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideGetIndex")]
		protected virtual Gst.Index OnGetIndex ()
		{
			return InternalGetIndex ();
		}

		private Gst.Index InternalGetIndex ()
		{
			GetIndexNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetIndex;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return Gst.GLib.Object.GetObject(__result, true) as Gst.Index;
		}

		static SetIndexNativeDelegate SetIndex_cb_delegate;
		static SetIndexNativeDelegate SetIndexVMCallback {
			get {
				if (SetIndex_cb_delegate == null)
					SetIndex_cb_delegate = new SetIndexNativeDelegate (SetIndex_cb);
				return SetIndex_cb_delegate;
			}
		}

		static void OverrideSetIndex (Gst.GLib.GType gtype)
		{
			OverrideSetIndex (gtype, SetIndexVMCallback);
		}

		static void OverrideSetIndex (Gst.GLib.GType gtype, SetIndexNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetIndex = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetIndexNativeDelegate (IntPtr inst, IntPtr index);

		static void SetIndex_cb (IntPtr inst, IntPtr index)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				__obj.OnSetIndex (Gst.GLib.Object.GetObject(index) as Gst.Index);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideSetIndex")]
		protected virtual void OnSetIndex (Gst.Index index)
		{
			InternalSetIndex (index);
		}

		private void InternalSetIndex (Gst.Index index)
		{
			SetIndexNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetIndex;
			if (unmanaged == null) return;

			unmanaged (this.Handle, index == null ? IntPtr.Zero : index.Handle);
		}

		static SendEventNativeDelegate SendEvent_cb_delegate;
		static SendEventNativeDelegate SendEventVMCallback {
			get {
				if (SendEvent_cb_delegate == null)
					SendEvent_cb_delegate = new SendEventNativeDelegate (SendEvent_cb);
				return SendEvent_cb_delegate;
			}
		}

		static void OverrideSendEvent (Gst.GLib.GType gtype)
		{
			OverrideSendEvent (gtype, SendEventVMCallback);
		}

		static void OverrideSendEvent (Gst.GLib.GType gtype, SendEventNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.SendEvent = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SendEventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool SendEvent_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				bool __result = __obj.OnSendEvent (Gst.MiniObject.GetObject(evnt) as Gst.Event);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideSendEvent")]
		protected virtual bool OnSendEvent (Gst.Event evnt)
		{
			return InternalSendEvent (evnt);
		}

		private bool InternalSendEvent (Gst.Event evnt)
		{
			SendEventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SendEvent;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		static GetQueryTypesNativeDelegate GetQueryTypes_cb_delegate;
		static GetQueryTypesNativeDelegate GetQueryTypesVMCallback {
			get {
				if (GetQueryTypes_cb_delegate == null)
					GetQueryTypes_cb_delegate = new GetQueryTypesNativeDelegate (GetQueryTypes_cb);
				return GetQueryTypes_cb_delegate;
			}
		}

		static void OverrideGetQueryTypes (Gst.GLib.GType gtype)
		{
			OverrideGetQueryTypes (gtype, GetQueryTypesVMCallback);
		}

		static void OverrideGetQueryTypes (Gst.GLib.GType gtype, GetQueryTypesNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetQueryTypes = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetQueryTypesNativeDelegate (IntPtr inst);

		static int GetQueryTypes_cb (IntPtr inst)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				Gst.QueryType __result = __obj.OnGetQueryTypes ();
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideGetQueryTypes")]
		protected virtual Gst.QueryType OnGetQueryTypes ()
		{
			return InternalGetQueryTypes ();
		}

		private Gst.QueryType InternalGetQueryTypes ()
		{
			GetQueryTypesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetQueryTypes;
			if (unmanaged == null) return (Gst.QueryType) 0;

			int __result = unmanaged (this.Handle);
			return (Gst.QueryType) __result;
		}

		static QueryNativeDelegate Query_cb_delegate;
		static QueryNativeDelegate QueryVMCallback {
			get {
				if (Query_cb_delegate == null)
					Query_cb_delegate = new QueryNativeDelegate (Query_cb);
				return Query_cb_delegate;
			}
		}

		static void OverrideQuery (Gst.GLib.GType gtype)
		{
			OverrideQuery (gtype, QueryVMCallback);
		}

		static void OverrideQuery (Gst.GLib.GType gtype, QueryNativeDelegate callback)
		{
			GstElementClass class_iface = GetClassStruct (gtype, false);
			class_iface.Query = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool QueryNativeDelegate (IntPtr inst, IntPtr query);

		static bool Query_cb (IntPtr inst, IntPtr query)
		{
			try {
				Element __obj = Gst.GLib.Object.GetObject (inst, false) as Element;
				bool __result = __obj.OnQuery (Gst.MiniObject.GetObject(query) as Gst.Query);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Element), ConnectionMethod="OverrideQuery")]
		protected virtual bool OnQuery (Gst.Query query)
		{
			return InternalQuery (query);
		}

		private bool InternalQuery (Gst.Query query)
		{
			QueryNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Query;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, query == null ? IntPtr.Zero : query.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstElementClass {
			public Gst.ElementDetails Details;
			private IntPtr _elementfactory;
			public Gst.ElementFactory Elementfactory {
				get {
					return Gst.GLib.Object.GetObject(_elementfactory) as Gst.ElementFactory;
				}
				set {
					_elementfactory = value == null ? IntPtr.Zero : value.Handle;
				}
			}
			private IntPtr _padtemplates;
			public int Numpadtemplates;
			public uint PadTemplCookie;
			public PadAddedNativeDelegate PadAdded;
			public PadRemovedNativeDelegate PadRemoved;
			public HasNoMorePadsNativeDelegate HasNoMorePads;
			public RequestNewPadNativeDelegate RequestNewPad;
			public ReleasePadNativeDelegate ReleasePad;
			public GetStateNativeDelegate GetState;
			public SetStateNativeDelegate SetState;
			public ChangeStateNativeDelegate ChangeState;
			public SetBusNativeDelegate SetBus;
			public ProvideClockNativeDelegate ProvideClock;
			public SetClockNativeDelegate SetClock;
			public GetIndexNativeDelegate GetIndex;
			public SetIndexNativeDelegate SetIndex;
			public SendEventNativeDelegate SendEvent;
			public GetQueryTypesNativeDelegate GetQueryTypes;
			public QueryNativeDelegate Query;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstElementClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstElementClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstElementClass class_struct = (GstElementClass) Marshal.PtrToStructure (class_ptr, typeof (GstElementClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstElementClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_factory(IntPtr raw);

		public Gst.ElementFactory Factory { 
			get {
				IntPtr raw_ret = gst_element_get_factory(Handle);
				Gst.ElementFactory ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.ElementFactory;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_clock(IntPtr raw);

		public Gst.Clock Clock { 
			get {
				IntPtr raw_ret = gst_element_get_clock(Handle);
				Gst.Clock ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Clock;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_compatible_pad(IntPtr raw, IntPtr pad, IntPtr caps);

		public Gst.Pad GetCompatiblePad(Gst.Pad pad, Gst.Caps caps) {
			IntPtr raw_ret = gst_element_get_compatible_pad(Handle, pad == null ? IntPtr.Zero : pad.Handle, caps == null ? IntPtr.Zero : caps.Handle);
			Gst.Pad ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Pad;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_lost_state(IntPtr raw);

		public void LostState() {
			gst_element_lost_state(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_iterate_src_pads(IntPtr raw);

		public Gst.Iterator SrcPads { 
			get {
				IntPtr raw_ret = gst_element_iterate_src_pads(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_no_more_pads(IntPtr raw);

		protected void NoMorePads() {
			gst_element_no_more_pads(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_bus(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_set_bus(IntPtr raw, IntPtr bus);

		public Gst.Bus Bus { 
			get {
				IntPtr raw_ret = gst_element_get_bus(Handle);
				Gst.Bus ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Bus;
				return ret;
			}
			set {
				gst_element_set_bus(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_index(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_set_index(IntPtr raw, IntPtr index);

		public Gst.Index Index { 
			get {
				IntPtr raw_ret = gst_element_get_index(Handle);
				Gst.Index ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Index;
				return ret;
			}
			set {
				gst_element_set_index(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_element_continue_state(IntPtr raw, int state_change_ret);

		public Gst.StateChangeReturn ContinueState(Gst.StateChangeReturn state_change_ret) {
			int raw_ret = gst_element_continue_state(Handle, (int) state_change_ret);
			Gst.StateChangeReturn ret = (Gst.StateChangeReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_release_request_pad(IntPtr raw, IntPtr pad);

		public void ReleaseRequestPad(Gst.Pad pad) {
			gst_element_release_request_pad(Handle, pad == null ? IntPtr.Zero : pad.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_implements_interface(IntPtr raw, IntPtr iface_type);

		public bool ImplementsInterface(Gst.GLib.GType iface_type) {
			bool raw_ret = gst_element_implements_interface(Handle, iface_type.Val);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_abort_state(IntPtr raw);

		public void AbortState() {
			gst_element_abort_state(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_provides_clock(IntPtr raw);

		public bool ProvidesClock { 
			get {
				bool raw_ret = gst_element_provides_clock(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_requires_clock(IntPtr raw);

		public bool RequiresClock { 
			get {
				bool raw_ret = gst_element_requires_clock(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_set_clock(IntPtr raw, IntPtr clock);

		public bool SetClock(Gst.Clock clock) {
			bool raw_ret = gst_element_set_clock(Handle, clock == null ? IntPtr.Zero : clock.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_sync_state_with_parent(IntPtr raw);

		public bool SyncStateWithParent() {
			bool raw_ret = gst_element_sync_state_with_parent(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_set_locked_state(IntPtr raw, bool locked_state);

		public bool SetLockedState(bool locked_state) {
			bool raw_ret = gst_element_set_locked_state(Handle, locked_state);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_link_pads_filtered(IntPtr raw, IntPtr srcpadname, IntPtr dest, IntPtr destpadname, IntPtr filter);

		public bool LinkPadsFiltered(string srcpadname, Gst.Element dest, string destpadname, Gst.Caps filter) {
			IntPtr native_srcpadname = Gst.GLib.Marshaller.StringToPtrGStrdup (srcpadname);
			IntPtr native_destpadname = Gst.GLib.Marshaller.StringToPtrGStrdup (destpadname);
			bool raw_ret = gst_element_link_pads_filtered(Handle, native_srcpadname, dest == null ? IntPtr.Zero : dest.Handle, native_destpadname, filter == null ? IntPtr.Zero : filter.Handle);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_srcpadname);
			Gst.GLib.Marshaller.Free (native_destpadname);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_element_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_send_event(IntPtr raw, IntPtr evnt);

		public bool SendEvent(Gst.Event evnt) {
			bool raw_ret = gst_element_send_event(Handle, evnt == null ? IntPtr.Zero : evnt.OwnedHandle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_iterate_sink_pads(IntPtr raw);

		public Gst.Iterator SinkPads { 
			get {
				IntPtr raw_ret = gst_element_iterate_sink_pads(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_is_indexable(IntPtr raw);

		public bool IsIndexable { 
			get {
				bool raw_ret = gst_element_is_indexable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_static_pad(IntPtr raw, IntPtr name);

		public Gst.Pad GetStaticPad(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_element_get_static_pad(Handle, native_name);
			Gst.Pad ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Pad;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_compatible_pad_template(IntPtr raw, IntPtr compattempl);

		public Gst.PadTemplate GetCompatiblePadTemplate(Gst.PadTemplate compattempl) {
			IntPtr raw_ret = gst_element_get_compatible_pad_template(Handle, compattempl == null ? IntPtr.Zero : compattempl.Handle);
			Gst.PadTemplate ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.PadTemplate;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_seek(IntPtr raw, double rate, int format, int flags, int cur_type, long cur, int stop_type, long stop);

		public bool Seek(double rate, Gst.Format format, Gst.SeekFlags flags, Gst.SeekType cur_type, long cur, Gst.SeekType stop_type, long stop) {
			bool raw_ret = gst_element_seek(Handle, rate, (int) format, (int) flags, (int) cur_type, cur, (int) stop_type, stop);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_get_request_pad(IntPtr raw, IntPtr name);

		public Gst.Pad GetRequestPad(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_element_get_request_pad(Handle, native_name);
			Gst.Pad ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Pad;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_element_get_state(IntPtr raw, out int state, out int pending, ulong timeout);

		public Gst.StateChangeReturn GetState(out Gst.State state, out Gst.State pending, ulong timeout) {
			int native_state;
			int native_pending;
			int raw_ret = gst_element_get_state(Handle, out native_state, out native_pending, timeout);
			Gst.StateChangeReturn ret = (Gst.StateChangeReturn) raw_ret;
			state = (Gst.State) native_state;
			pending = (Gst.State) native_pending;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_unlink_pads(IntPtr raw, IntPtr srcpadname, IntPtr dest, IntPtr destpadname);

		public void UnlinkPads(string srcpadname, Gst.Element dest, string destpadname) {
			IntPtr native_srcpadname = Gst.GLib.Marshaller.StringToPtrGStrdup (srcpadname);
			IntPtr native_destpadname = Gst.GLib.Marshaller.StringToPtrGStrdup (destpadname);
			gst_element_unlink_pads(Handle, native_srcpadname, dest == null ? IntPtr.Zero : dest.Handle, native_destpadname);
			Gst.GLib.Marshaller.Free (native_srcpadname);
			Gst.GLib.Marshaller.Free (native_destpadname);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_seek_simple(IntPtr raw, int format, int seek_flags, long seek_pos);

		public bool Seek(Gst.Format format, Gst.SeekFlags seek_flags, long seek_pos) {
			bool raw_ret = gst_element_seek_simple(Handle, (int) format, (int) seek_flags, seek_pos);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_provide_clock(IntPtr raw);

		public Gst.Clock ProvideClock() {
			IntPtr raw_ret = gst_element_provide_clock(Handle);
			Gst.Clock ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Clock;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_is_locked_state(IntPtr raw);

		public bool IsLockedState { 
			get {
				bool raw_ret = gst_element_is_locked_state(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_post_message(IntPtr raw, IntPtr message);

		protected bool PostMessage(Gst.Message message) {
			bool raw_ret = gst_element_post_message(Handle, message == null ? IntPtr.Zero : message.OwnedHandle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_link_filtered(IntPtr raw, IntPtr dest, IntPtr filter);

		public bool LinkFiltered(Gst.Element dest, Gst.Caps filter) {
			bool raw_ret = gst_element_link_filtered(Handle, dest == null ? IntPtr.Zero : dest.Handle, filter == null ? IntPtr.Zero : filter.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_element_get_start_time(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_set_start_time(IntPtr raw, ulong time);

		public ulong StartTime { 
			get {
				ulong raw_ret = gst_element_get_start_time(Handle);
				ulong ret = raw_ret;
				return ret;
			}
			set {
				gst_element_set_start_time(Handle, value);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_link(IntPtr raw, IntPtr dest);

		public bool Link(Gst.Element dest) {
			bool raw_ret = gst_element_link(Handle, dest == null ? IntPtr.Zero : dest.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_lost_state_full(IntPtr raw, bool new_base_time);

		public void LostState(bool new_base_time) {
			gst_element_lost_state_full(Handle, new_base_time);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_query(IntPtr raw, IntPtr query);

		public bool Query(Gst.Query query) {
			bool raw_ret = gst_element_query(Handle, query == null ? IntPtr.Zero : query.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_query_position(IntPtr raw, ref int format, out long cur);

		public bool QueryPosition(ref Gst.Format format, out long cur) {
			int native_format = (int) format;
			bool raw_ret = gst_element_query_position(Handle, ref native_format, out cur);
			bool ret = raw_ret;
			format = (Gst.Format) native_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_element_set_state(IntPtr raw, int state);

		public Gst.StateChangeReturn SetState(Gst.State state) {
			int raw_ret = gst_element_set_state(Handle, (int) state);
			Gst.StateChangeReturn ret = (Gst.StateChangeReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_unlink(IntPtr raw, IntPtr dest);

		public void Unlink(Gst.Element dest) {
			gst_element_unlink(Handle, dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_query_convert(IntPtr raw, int src_format, long src_val, ref int dest_format, out long dest_val);

		public bool QueryConvert(Gst.Format src_format, long src_val, ref Gst.Format dest_format, out long dest_val) {
			int native_dest_format = (int) dest_format;
			bool raw_ret = gst_element_query_convert(Handle, (int) src_format, src_val, ref native_dest_format, out dest_val);
			bool ret = raw_ret;
			dest_format = (Gst.Format) native_dest_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_element_get_base_time(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_set_base_time(IntPtr raw, ulong time);

		public ulong BaseTime { 
			get {
				ulong raw_ret = gst_element_get_base_time(Handle);
				ulong ret = raw_ret;
				return ret;
			}
			set {
				gst_element_set_base_time(Handle, value);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_element_iterate_pads(IntPtr raw);

		public Gst.Iterator Pads { 
			get {
				IntPtr raw_ret = gst_element_iterate_pads(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_remove_pad(IntPtr raw, IntPtr pad);

		protected bool RemovePad(Gst.Pad pad) {
			bool raw_ret = gst_element_remove_pad(Handle, pad == null ? IntPtr.Zero : pad.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_query_duration(IntPtr raw, ref int format, out long duration);

		public bool QueryDuration(ref Gst.Format format, out long duration) {
			int native_format = (int) format;
			bool raw_ret = gst_element_query_duration(Handle, ref native_format, out duration);
			bool ret = raw_ret;
			format = (Gst.Format) native_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_element_change_state(IntPtr raw, int transition);

		public Gst.StateChangeReturn ChangeState(Gst.StateChange transition) {
			int raw_ret = gst_element_change_state(Handle, (int) transition);
			Gst.StateChangeReturn ret = (Gst.StateChangeReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_element_create_all_pads(IntPtr raw);

		protected void CreateAllPads() {
			gst_element_create_all_pads(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_element_link_pads(IntPtr raw, IntPtr srcpadname, IntPtr dest, IntPtr destpadname);

		public bool LinkPads(string srcpadname, Gst.Element dest, string destpadname) {
			IntPtr native_srcpadname = Gst.GLib.Marshaller.StringToPtrGStrdup (srcpadname);
			IntPtr native_destpadname = Gst.GLib.Marshaller.StringToPtrGStrdup (destpadname);
			bool raw_ret = gst_element_link_pads(Handle, native_srcpadname, dest == null ? IntPtr.Zero : dest.Handle, native_destpadname);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_srcpadname);
			Gst.GLib.Marshaller.Free (native_destpadname);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Element.custom"
[DllImport ("libgobject-2.0-0.dll") ]
static extern IntPtr g_object_ref (IntPtr raw);
[DllImport ("libgstreamer-0.10.dll") ]
static extern bool gst_element_add_pad (IntPtr raw, IntPtr pad);

protected bool AddPad (Pad p) {
  bool ret = gst_element_add_pad (this.Handle, p == null ? IntPtr.Zero : p.Handle);
  if (ret)
    g_object_ref (p.Handle);
  return ret;
}

public static bool Link (params Element [] elements) {
  for (int i = 0; i < elements.Length - 1; i++) {
    if (!elements[i].Link (elements[i+1]))
      return false;
  }

  return true;
}

public static void Unlink (params Element [] elements) {
  for (int i = 0; i < elements.Length - 1; i++) {
    elements[i].Unlink (elements[i+1]);
  }
}

public Gst.StateChangeReturn GetState (out Gst.State state, ulong timeout) {
  Gst.State pending;
  return GetState (out state, out pending, timeout);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_element_found_tags (IntPtr raw, IntPtr list);
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_tag_list_copy (IntPtr raw);

protected void FoundTags (Gst.TagList list) {
  gst_element_found_tags (Handle, list == null ? IntPtr.Zero : gst_tag_list_copy (list.Handle));
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_element_found_tags_for_pad (IntPtr raw, IntPtr pad, IntPtr list);

protected void FoundTagsForPad (Gst.Pad pad, Gst.TagList list) {
  gst_element_found_tags_for_pad (Handle, pad == null ? IntPtr.Zero : pad.Handle, list == null ? IntPtr.Zero : gst_tag_list_copy (list.Handle));
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_element_get_query_types (IntPtr raw);

public Gst.QueryType[] GetQueryTypes () {
  IntPtr raw_ret = gst_element_get_query_types (Handle);
  if (raw_ret == IntPtr.Zero)
    return new Gst.QueryType[] {};

  ArrayList result = new ArrayList ();
  bool term = false;
  int ofs = 0;
  while (!term) {
    Gst.QueryType t = (Gst.QueryType) Marshal.ReadInt32 (raw_ret, ofs);
    if (t == Gst.QueryType.None) {
      term = true;
    } else {
      result.Add (t);
      ofs += 4;
    }
  }

  return (Gst.QueryType[]) result.ToArray (typeof (Gst.QueryType));
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_element_class_add_pad_template (IntPtr klass, IntPtr templ);

protected static void AddPadTemplate (Gst.GLib.GType gtype, Gst.PadTemplate templ) {
  IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 ());
  gst_element_class_add_pad_template (class_ptr, templ.Handle);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_element_class_get_pad_template (IntPtr klass, IntPtr name);

public Gst.PadTemplate GetPadTemplate (string name) {
  Gst.GLib.GType gtype = this.LookupGType ();
  IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 ());
  IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
  IntPtr raw_ret = gst_element_class_get_pad_template (class_ptr, native_name);
  Gst.GLib.Marshaller.Free (native_name);

  return Gst.GLib.Object.GetObject (raw_ret, false) as Gst.PadTemplate;
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_element_class_get_pad_template_list (IntPtr klass);

public Gst.PadTemplate[] PadTemplates {
  get {
    Gst.GLib.GType gtype = this.LookupGType ();
    IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 ());
    IntPtr raw_ret = gst_element_class_get_pad_template_list (class_ptr);

    return (Gst.PadTemplate[]) Gst.GLib.Marshaller.ListPtrToArray (raw_ret, typeof (Gst.GLib.List), false, false, typeof (Gst.PadTemplate));
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_element_class_set_details_simple (IntPtr klass, IntPtr longname, IntPtr classification, IntPtr desc, IntPtr author);

protected static void SetDetails (Gst.GLib.GType gtype, string longname, string klass, string description, string author) {
  IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 ());
  IntPtr native_longname = Gst.GLib.Marshaller.StringToPtrGStrdup (longname);
  IntPtr native_klass = Gst.GLib.Marshaller.StringToPtrGStrdup (klass);
  IntPtr native_desc = Gst.GLib.Marshaller.StringToPtrGStrdup (description);
  IntPtr native_author = Gst.GLib.Marshaller.StringToPtrGStrdup (author);
  gst_element_class_set_details_simple (class_ptr, native_longname, native_klass, native_desc, native_author);

  Gst.GLib.Marshaller.Free (native_longname);
  Gst.GLib.Marshaller.Free (native_klass);
  Gst.GLib.Marshaller.Free (native_desc);
  Gst.GLib.Marshaller.Free (native_author);
}

#endregion
	}
}

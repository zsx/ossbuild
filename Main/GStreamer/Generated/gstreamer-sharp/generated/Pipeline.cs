// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Pipeline : Gst.Bin {

		public Pipeline(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_new(IntPtr name);

		public Pipeline (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pipeline)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("name");
				vals.Add (new Gst.GLib.Value (name));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (Gst.GLib.Value[])vals.ToArray (typeof (Gst.GLib.Value)));
				return;
			}
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gst_pipeline_new(native_name);
			Gst.GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_pipeline_get_delay(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_set_delay(IntPtr raw, ulong delay);

		[Gst.GLib.Property ("delay")]
		public ulong Delay {
			get  {
				ulong raw_ret = gst_pipeline_get_delay(Handle);
				ulong ret = raw_ret;
				return ret;
			}
			set  {
				gst_pipeline_set_delay(Handle, value);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pipeline_get_auto_flush_bus(IntPtr raw);

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_set_auto_flush_bus(IntPtr raw, bool auto_flush);

		[Gst.GLib.Property ("auto-flush-bus")]
		public bool AutoFlushBus {
			get  {
				bool raw_ret = gst_pipeline_get_auto_flush_bus(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gst_pipeline_set_auto_flush_bus(Handle, value);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_pipeline_get_stream_time_offset ();

		static uint stream_time_offset = gstsharp_gst_pipeline_get_stream_time_offset ();
		public ulong StreamTime {
			get {
				unsafe {
					ulong* raw_ptr = (ulong*)(((byte*)Handle) + stream_time_offset);
					return (*raw_ptr);
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstPipelineClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Bin)).GetClassSize ();
		static Hashtable class_structs;

		static GstPipelineClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstPipelineClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstPipelineClass class_struct = (GstPipelineClass) Marshal.PtrToStructure (class_ptr, typeof (GstPipelineClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstPipelineClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_get_clock(IntPtr raw);

		public new Gst.Clock Clock { 
			get {
				IntPtr raw_ret = gst_pipeline_get_clock(Handle);
				Gst.Clock ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Clock;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_get_bus(IntPtr raw);

		public new Gst.Bus Bus { 
			get {
				IntPtr raw_ret = gst_pipeline_get_bus(Handle);
				Gst.Bus ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Bus;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_use_clock(IntPtr raw, IntPtr clock);

		public void UseClock(Gst.Clock clock) {
			gst_pipeline_use_clock(Handle, clock == null ? IntPtr.Zero : clock.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pipeline_set_clock(IntPtr raw, IntPtr clock);

		public new bool SetClock(Gst.Clock clock) {
			bool raw_ret = gst_pipeline_set_clock(Handle, clock == null ? IntPtr.Zero : clock.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pipeline_auto_clock(IntPtr raw);

		public void AutoClock() {
			gst_pipeline_auto_clock(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pipeline_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_pipeline_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "Pipeline.custom"
public Pipeline () : this (null) {}

#endregion
	}
}

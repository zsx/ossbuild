// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Bus : Gst.Object {

		public Bus(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_new();

		public Bus () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Bus)) {
				CreateNativeObject (new string [0], new Gst.GLib.Value[0]);
				return;
			}
			Raw = gst_bus_new();
		}

		[Gst.GLib.Signal("message")]
		public event Gst.MessageHandler Message {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "message", typeof (Gst.MessageArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "message", typeof (Gst.MessageArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("sync-message")]
		public event Gst.SyncMessageHandler SyncMessage {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "sync-message", typeof (Gst.SyncMessageArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "sync-message", typeof (Gst.SyncMessageArgs));
				sig.RemoveDelegate (value);
			}
		}

		static MessageNativeDelegate Message_cb_delegate;
		static MessageNativeDelegate MessageVMCallback {
			get {
				if (Message_cb_delegate == null)
					Message_cb_delegate = new MessageNativeDelegate (Message_cb);
				return Message_cb_delegate;
			}
		}

		static void OverrideMessage (Gst.GLib.GType gtype)
		{
			OverrideMessage (gtype, MessageVMCallback);
		}

		static void OverrideMessage (Gst.GLib.GType gtype, MessageNativeDelegate callback)
		{
			GstBusClass class_iface = GetClassStruct (gtype, false);
			class_iface.Message = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MessageNativeDelegate (IntPtr inst, IntPtr message);

		static void Message_cb (IntPtr inst, IntPtr message)
		{
			try {
				Bus __obj = Gst.GLib.Object.GetObject (inst, false) as Bus;
				__obj.OnMessage (Gst.MiniObject.GetObject(message) as Gst.Message);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bus), ConnectionMethod="OverrideMessage")]
		protected virtual void OnMessage (Gst.Message message)
		{
			InternalMessage (message);
		}

		private void InternalMessage (Gst.Message message)
		{
			MessageNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Message;
			if (unmanaged == null) return;

			unmanaged (this.Handle, message == null ? IntPtr.Zero : message.Handle);
		}

		static SyncMessageNativeDelegate SyncMessage_cb_delegate;
		static SyncMessageNativeDelegate SyncMessageVMCallback {
			get {
				if (SyncMessage_cb_delegate == null)
					SyncMessage_cb_delegate = new SyncMessageNativeDelegate (SyncMessage_cb);
				return SyncMessage_cb_delegate;
			}
		}

		static void OverrideSyncMessage (Gst.GLib.GType gtype)
		{
			OverrideSyncMessage (gtype, SyncMessageVMCallback);
		}

		static void OverrideSyncMessage (Gst.GLib.GType gtype, SyncMessageNativeDelegate callback)
		{
			GstBusClass class_iface = GetClassStruct (gtype, false);
			class_iface.SyncMessage = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SyncMessageNativeDelegate (IntPtr inst, IntPtr message);

		static void SyncMessage_cb (IntPtr inst, IntPtr message)
		{
			try {
				Bus __obj = Gst.GLib.Object.GetObject (inst, false) as Bus;
				__obj.OnSyncMessage (Gst.MiniObject.GetObject(message) as Gst.Message);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bus), ConnectionMethod="OverrideSyncMessage")]
		protected virtual void OnSyncMessage (Gst.Message message)
		{
			InternalSyncMessage (message);
		}

		private void InternalSyncMessage (Gst.Message message)
		{
			SyncMessageNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SyncMessage;
			if (unmanaged == null) return;

			unmanaged (this.Handle, message == null ? IntPtr.Zero : message.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstBusClass {
			public MessageNativeDelegate Message;
			public SyncMessageNativeDelegate SyncMessage;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstBusClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstBusClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstBusClass class_struct = (GstBusClass) Marshal.PtrToStructure (class_ptr, typeof (GstBusClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstBusClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_timed_pop_filtered(IntPtr raw, ulong timeout, int types);

		public Gst.Message Pop(ulong timeout, Gst.MessageType types) {
			IntPtr raw_ret = gst_bus_timed_pop_filtered(Handle, timeout, (int) types);
			Gst.Message ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Message;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_bus_add_watch_full(IntPtr raw, int priority, GstSharp.BusFuncNative func, IntPtr user_data, Gst.GLib.DestroyNotify notify);

		public uint AddWatch(int priority, Gst.BusFunc func) {
			GstSharp.BusFuncWrapper func_wrapper = new GstSharp.BusFuncWrapper (func);
			IntPtr user_data;
			Gst.GLib.DestroyNotify notify;
			if (func == null) {
				user_data = IntPtr.Zero;
				notify = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (func_wrapper);
				notify = Gst.GLib.DestroyHelper.NotifyHandler;
			}
			uint raw_ret = gst_bus_add_watch_full(Handle, priority, func_wrapper.NativeDelegate, user_data, notify);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bus_post(IntPtr raw, IntPtr message);

		public bool Post(Gst.Message message) {
			bool raw_ret = gst_bus_post(Handle, message == null ? IntPtr.Zero : message.OwnedHandle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_pop_filtered(IntPtr raw, int types);

		public Gst.Message Pop(Gst.MessageType types) {
			IntPtr raw_ret = gst_bus_pop_filtered(Handle, (int) types);
			Gst.Message ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Message;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_poll(IntPtr raw, int events, long timeout);

		public Gst.Message Poll(Gst.MessageType events, long timeout) {
			IntPtr raw_ret = gst_bus_poll(Handle, (int) events, timeout);
			Gst.Message ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Message;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bus_add_signal_watch(IntPtr raw);

		public void AddSignalWatch() {
			gst_bus_add_signal_watch(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bus_set_flushing(IntPtr raw, bool flushing);

		public bool Flushing { 
			set {
				gst_bus_set_flushing(Handle, value);
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bus_disable_sync_message_emission(IntPtr raw);

		public void DisableSyncMessageEmission() {
			gst_bus_disable_sync_message_emission(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bus_add_signal_watch_full(IntPtr raw, int priority);

		public void AddSignalWatch(int priority) {
			gst_bus_add_signal_watch_full(Handle, priority);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_timed_pop(IntPtr raw, ulong timeout);

		public Gst.Message Pop(ulong timeout) {
			IntPtr raw_ret = gst_bus_timed_pop(Handle, timeout);
			Gst.Message ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Message;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_peek(IntPtr raw);

		public Gst.Message Peek() {
			IntPtr raw_ret = gst_bus_peek(Handle);
			Gst.Message ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Message;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_pop(IntPtr raw);

		public Gst.Message Pop() {
			IntPtr raw_ret = gst_bus_pop(Handle);
			Gst.Message ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Message;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bus_have_pending(IntPtr raw);

		public bool HavePending() {
			bool raw_ret = gst_bus_have_pending(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bus_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_bus_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bus_enable_sync_message_emission(IntPtr raw);

		public void EnableSyncMessageEmission() {
			gst_bus_enable_sync_message_emission(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bus_remove_signal_watch(IntPtr raw);

		public void RemoveSignalWatch() {
			gst_bus_remove_signal_watch(Handle);
		}

#endregion
#region Customized extensions
#line 1 "Bus.custom"
[DllImport ("libgstreamer-0.10.dll") ]
static extern int gst_bus_sync_signal_handler (IntPtr raw, IntPtr message, IntPtr data);

public Gst.BusSyncReply SyncSignalHandler (Gst.Message message) {
  int raw_ret = gst_bus_sync_signal_handler (Handle, message == null ? IntPtr.Zero : message.Handle, IntPtr.Zero);
  Gst.BusSyncReply ret = (Gst.BusSyncReply) raw_ret;
  return ret;
}

public uint AddWatch (Gst.BusFunc func) {
  return AddWatch (0, func);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern bool gst_bus_async_signal_func (IntPtr raw, IntPtr message, IntPtr data);

public bool AsyncSignalFunc (Gst.Message message) {
  bool raw_ret = gst_bus_async_signal_func (Handle, message == null ? IntPtr.Zero : message.Handle, IntPtr.Zero);
  bool ret = raw_ret;
  return ret;
}

[DllImport ("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl) ]
static extern void gst_bus_set_sync_handler (IntPtr raw, GstSharp.BusSyncHandlerNative func, IntPtr data);
private GstSharp.BusSyncHandlerWrapper sync_handler = null;

public Gst.BusSyncHandler SyncHandler {
  set  {
    GstSharp.BusSyncHandlerWrapper value_wrapper = new GstSharp.BusSyncHandlerWrapper (value);
    sync_handler = value_wrapper;
    gst_bus_set_sync_handler (Handle, value_wrapper.NativeDelegate, IntPtr.Zero);
  }
}

#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Parse {

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_parse_launchv(IntPtr[] argv, out IntPtr error);

		public static unsafe Gst.Element Launch(string[] argv) {
			int cnt_argv = argv == null ? 0 : argv.Length;
			IntPtr[] native_argv = new IntPtr [cnt_argv + 1];
			for (int i = 0; i < cnt_argv; i++)
				native_argv [i] = Gst.GLib.Marshaller.StringToPtrGStrdup (argv[i]);
			native_argv [cnt_argv] = IntPtr.Zero;
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_parse_launchv(native_argv, out error);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			for (int i = 0; i < native_argv.Length - 1; i++) {
				argv [i] = Gst.GLib.Marshaller.Utf8PtrToString (native_argv[i]);
				Gst.GLib.Marshaller.Free (native_argv[i]);
			}
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_parse_launch(IntPtr pipeline_description, out IntPtr error);

		public static unsafe Gst.Element Launch(string pipeline_description) {
			IntPtr native_pipeline_description = Gst.GLib.Marshaller.StringToPtrGStrdup (pipeline_description);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_parse_launch(native_pipeline_description, out error);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			Gst.GLib.Marshaller.Free (native_pipeline_description);
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_parse_bin_from_description(IntPtr bin_description, bool ghost_unlinked_pads, out IntPtr err);

		public static unsafe Gst.Element BinFromDescription(string bin_description, bool ghost_unlinked_pads) {
			IntPtr native_bin_description = Gst.GLib.Marshaller.StringToPtrGStrdup (bin_description);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_parse_bin_from_description(native_bin_description, ghost_unlinked_pads, out error);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			Gst.GLib.Marshaller.Free (native_bin_description);
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_parse_launch_full(IntPtr pipeline_description, IntPtr context, int flags, out IntPtr error);

		public static unsafe Gst.Element Launch(string pipeline_description, Gst.ParseContext context, Gst.ParseFlags flags) {
			IntPtr native_pipeline_description = Gst.GLib.Marshaller.StringToPtrGStrdup (pipeline_description);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_parse_launch_full(native_pipeline_description, context == null ? IntPtr.Zero : context.Handle, (int) flags, out error);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			Gst.GLib.Marshaller.Free (native_pipeline_description);
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_parse_launchv_full(IntPtr[] argv, IntPtr context, int flags, out IntPtr error);

		public static unsafe Gst.Element Launch(string[] argv, Gst.ParseContext context, Gst.ParseFlags flags) {
			int cnt_argv = argv == null ? 0 : argv.Length;
			IntPtr[] native_argv = new IntPtr [cnt_argv + 1];
			for (int i = 0; i < cnt_argv; i++)
				native_argv [i] = Gst.GLib.Marshaller.StringToPtrGStrdup (argv[i]);
			native_argv [cnt_argv] = IntPtr.Zero;
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_parse_launchv_full(native_argv, context == null ? IntPtr.Zero : context.Handle, (int) flags, out error);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			for (int i = 0; i < native_argv.Length - 1; i++) {
				argv [i] = Gst.GLib.Marshaller.Utf8PtrToString (native_argv[i]);
				Gst.GLib.Marshaller.Free (native_argv[i]);
			}
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_parse_bin_from_description_full(IntPtr bin_description, bool ghost_unlinked_pads, IntPtr context, int flags, out IntPtr err);

		public static unsafe Gst.Element BinFromDescription(string bin_description, bool ghost_unlinked_pads, Gst.ParseContext context, Gst.ParseFlags flags) {
			IntPtr native_bin_description = Gst.GLib.Marshaller.StringToPtrGStrdup (bin_description);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_parse_bin_from_description_full(native_bin_description, ghost_unlinked_pads, context == null ? IntPtr.Zero : context.Handle, (int) flags, out error);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			Gst.GLib.Marshaller.Free (native_bin_description);
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Parse.custom"
private Parse ()
{

}

#endregion
	}
}

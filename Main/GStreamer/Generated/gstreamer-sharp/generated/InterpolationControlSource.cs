// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Controller {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class InterpolationControlSource : Gst.Controller.ControlSource {

		public InterpolationControlSource(IntPtr raw) : base(raw) {}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_interpolation_control_source_new();

		public InterpolationControlSource () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InterpolationControlSource)) {
				CreateNativeObject (new string [0], new Gst.GLib.Value[0]);
				return;
			}
			Raw = gst_interpolation_control_source_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstInterpolationControlSourceClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Controller.ControlSource)).GetClassSize ();
		static Hashtable class_structs;

		static GstInterpolationControlSourceClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstInterpolationControlSourceClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstInterpolationControlSourceClass class_struct = (GstInterpolationControlSourceClass) Marshal.PtrToStructure (class_ptr, typeof (GstInterpolationControlSourceClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstInterpolationControlSourceClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_interpolation_control_source_unset_all(IntPtr raw);

		public void UnsetAll() {
			gst_interpolation_control_source_unset_all(Handle);
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_interpolation_control_source_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_interpolation_control_source_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_interpolation_control_source_set(IntPtr raw, ulong timestamp, IntPtr value);

		public bool Set(ulong timestamp, ref Gst.GLib.Value value) {
			IntPtr native_value = Gst.GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gst_interpolation_control_source_set(Handle, timestamp, native_value);
			bool ret = raw_ret;
			value = (Gst.GLib.Value) Marshal.PtrToStructure (native_value, typeof (Gst.GLib.Value));
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_interpolation_control_source_set_interpolation_mode(IntPtr raw, int mode);

		public bool SetInterpolationMode(Gst.Controller.InterpolateMode mode) {
			bool raw_ret = gst_interpolation_control_source_set_interpolation_mode(Handle, (int) mode);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_interpolation_control_source_unset(IntPtr raw, ulong timestamp);

		public bool Unset(ulong timestamp) {
			bool raw_ret = gst_interpolation_control_source_unset(Handle, timestamp);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_interpolation_control_source_get_count(IntPtr raw);

		public int Count { 
			get {
				int raw_ret = gst_interpolation_control_source_get_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}


		static InterpolationControlSource ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TaskPool : Gst.Object {

		public TaskPool(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_task_pool_new();

		public TaskPool () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TaskPool)) {
				CreateNativeObject (new string [0], new Gst.GLib.Value[0]);
				return;
			}
			Raw = gst_task_pool_new();
		}

		static PrepareNativeDelegate Prepare_cb_delegate;
		static PrepareNativeDelegate PrepareVMCallback {
			get {
				if (Prepare_cb_delegate == null)
					Prepare_cb_delegate = new PrepareNativeDelegate (Prepare_cb);
				return Prepare_cb_delegate;
			}
		}

		static void OverridePrepare (Gst.GLib.GType gtype)
		{
			OverridePrepare (gtype, PrepareVMCallback);
		}

		static void OverridePrepare (Gst.GLib.GType gtype, PrepareNativeDelegate callback)
		{
			GstTaskPoolClass class_iface = GetClassStruct (gtype, false);
			class_iface.Prepare = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PrepareNativeDelegate (IntPtr inst, out IntPtr error);

		static void Prepare_cb (IntPtr inst, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				TaskPool __obj = Gst.GLib.Object.GetObject (inst, false) as TaskPool;
				__obj.OnPrepare ();
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.TaskPool), ConnectionMethod="OverridePrepare")]
		protected virtual void OnPrepare ()
		{
			InternalPrepare ();
		}

		private void InternalPrepare ()
		{
			PrepareNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Prepare;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			unmanaged (this.Handle, out error);
		}

		static CleanupNativeDelegate Cleanup_cb_delegate;
		static CleanupNativeDelegate CleanupVMCallback {
			get {
				if (Cleanup_cb_delegate == null)
					Cleanup_cb_delegate = new CleanupNativeDelegate (Cleanup_cb);
				return Cleanup_cb_delegate;
			}
		}

		static void OverrideCleanup (Gst.GLib.GType gtype)
		{
			OverrideCleanup (gtype, CleanupVMCallback);
		}

		static void OverrideCleanup (Gst.GLib.GType gtype, CleanupNativeDelegate callback)
		{
			GstTaskPoolClass class_iface = GetClassStruct (gtype, false);
			class_iface.Cleanup = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CleanupNativeDelegate (IntPtr inst);

		static void Cleanup_cb (IntPtr inst)
		{
			try {
				TaskPool __obj = Gst.GLib.Object.GetObject (inst, false) as TaskPool;
				__obj.OnCleanup ();
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.TaskPool), ConnectionMethod="OverrideCleanup")]
		protected virtual void OnCleanup ()
		{
			InternalCleanup ();
		}

		private void InternalCleanup ()
		{
			CleanupNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Cleanup;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PushNativeDelegate Push_cb_delegate;
		static PushNativeDelegate PushVMCallback {
			get {
				if (Push_cb_delegate == null)
					Push_cb_delegate = new PushNativeDelegate (Push_cb);
				return Push_cb_delegate;
			}
		}

		static void OverridePush (Gst.GLib.GType gtype)
		{
			OverridePush (gtype, PushVMCallback);
		}

		static void OverridePush (Gst.GLib.GType gtype, PushNativeDelegate callback)
		{
			GstTaskPoolClass class_iface = GetClassStruct (gtype, false);
			class_iface.Push = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr PushNativeDelegate (IntPtr inst, GstSharp.TaskPoolFunctionNative func, IntPtr user_data, out IntPtr error);

		static IntPtr Push_cb (IntPtr inst, GstSharp.TaskPoolFunctionNative func, IntPtr user_data, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				TaskPool __obj = Gst.GLib.Object.GetObject (inst, false) as TaskPool;
				GstSharp.TaskPoolFunctionInvoker func_invoker = new GstSharp.TaskPoolFunctionInvoker (func, user_data);
				IntPtr __result = __obj.OnPush (func_invoker.Handler);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.TaskPool), ConnectionMethod="OverridePush")]
		protected virtual IntPtr OnPush (Gst.TaskPoolFunction func)
		{
			return InternalPush (func);
		}

		private IntPtr InternalPush (Gst.TaskPoolFunction func)
		{
			PushNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Push;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			GstSharp.TaskPoolFunctionWrapper func_wrapper = new GstSharp.TaskPoolFunctionWrapper (func);
			IntPtr error = IntPtr.Zero;
			IntPtr __result = unmanaged (this.Handle, func_wrapper.NativeDelegate, IntPtr.Zero, out error);
			return __result;
		}

		static JoinNativeDelegate Join_cb_delegate;
		static JoinNativeDelegate JoinVMCallback {
			get {
				if (Join_cb_delegate == null)
					Join_cb_delegate = new JoinNativeDelegate (Join_cb);
				return Join_cb_delegate;
			}
		}

		static void OverrideJoin (Gst.GLib.GType gtype)
		{
			OverrideJoin (gtype, JoinVMCallback);
		}

		static void OverrideJoin (Gst.GLib.GType gtype, JoinNativeDelegate callback)
		{
			GstTaskPoolClass class_iface = GetClassStruct (gtype, false);
			class_iface.Join = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void JoinNativeDelegate (IntPtr inst, IntPtr id);

		static void Join_cb (IntPtr inst, IntPtr id)
		{
			try {
				TaskPool __obj = Gst.GLib.Object.GetObject (inst, false) as TaskPool;
				__obj.OnJoin (id);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.TaskPool), ConnectionMethod="OverrideJoin")]
		protected virtual void OnJoin (IntPtr id)
		{
			InternalJoin (id);
		}

		private void InternalJoin (IntPtr id)
		{
			JoinNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Join;
			if (unmanaged == null) return;

			unmanaged (this.Handle, id);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstTaskPoolClass {
			public PrepareNativeDelegate Prepare;
			public CleanupNativeDelegate Cleanup;
			public PushNativeDelegate Push;
			public JoinNativeDelegate Join;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstTaskPoolClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstTaskPoolClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstTaskPoolClass class_struct = (GstTaskPoolClass) Marshal.PtrToStructure (class_ptr, typeof (GstTaskPoolClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstTaskPoolClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_task_pool_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_task_pool_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_task_pool_join(IntPtr raw, IntPtr id);

		public void Join(IntPtr id) {
			gst_task_pool_join(Handle, id);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_task_pool_cleanup(IntPtr raw);

		public void Cleanup() {
			gst_task_pool_cleanup(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe void gst_task_pool_prepare(IntPtr raw, out IntPtr error);

		public unsafe void Prepare() {
			IntPtr error = IntPtr.Zero;
			gst_task_pool_prepare(Handle, out error);
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gst_task_pool_push(IntPtr raw, GstSharp.TaskPoolFunctionNative func, IntPtr user_data, out IntPtr error);

		public unsafe IntPtr Push(Gst.TaskPoolFunction func) {
			GstSharp.TaskPoolFunctionWrapper func_wrapper = new GstSharp.TaskPoolFunctionWrapper (func);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gst_task_pool_push(Handle, func_wrapper.NativeDelegate, IntPtr.Zero, out error);
			IntPtr ret = raw_ret;
			if (error != IntPtr.Zero) throw new Gst.GLib.GException (error);
			return ret;
		}

#endregion
	}
}

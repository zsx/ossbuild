// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PadTemplate : Gst.Object {

		public PadTemplate(IntPtr raw) : base(raw) {}

		[Gst.GLib.Property ("name-template")]
		public string NameTemplate {
			get {
				Gst.GLib.Value val = GetProperty ("name-template");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[Gst.GLib.Property ("direction")]
		public Gst.PadDirection Direction {
			get {
				Gst.GLib.Value val = GetProperty ("direction");
				Gst.PadDirection ret = (Gst.PadDirection) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[Gst.GLib.Property ("presence")]
		public Gst.PadPresence Presence {
			get {
				Gst.GLib.Value val = GetProperty ("presence");
				Gst.PadPresence ret = (Gst.PadPresence) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_template_get_caps(IntPtr raw);

		[Gst.GLib.Property ("caps")]
		public Gst.Caps Caps {
			get  {
				IntPtr raw_ret = gst_pad_template_get_caps(Handle);
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), false);
				return ret;
			}
		}

		[Gst.GLib.Signal("pad-created")]
		public event Gst.PadCreatedHandler PadCreated {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "pad-created", typeof (Gst.PadCreatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "pad-created", typeof (Gst.PadCreatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		static PadCreatedNativeDelegate PadCreated_cb_delegate;
		static PadCreatedNativeDelegate PadCreatedVMCallback {
			get {
				if (PadCreated_cb_delegate == null)
					PadCreated_cb_delegate = new PadCreatedNativeDelegate (PadCreated_cb);
				return PadCreated_cb_delegate;
			}
		}

		static void OverridePadCreated (Gst.GLib.GType gtype)
		{
			OverridePadCreated (gtype, PadCreatedVMCallback);
		}

		static void OverridePadCreated (Gst.GLib.GType gtype, PadCreatedNativeDelegate callback)
		{
			GstPadTemplateClass class_iface = GetClassStruct (gtype, false);
			class_iface.PadCreated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PadCreatedNativeDelegate (IntPtr inst, IntPtr pad);

		static void PadCreated_cb (IntPtr inst, IntPtr pad)
		{
			try {
				PadTemplate __obj = Gst.GLib.Object.GetObject (inst, false) as PadTemplate;
				__obj.OnPadCreated (Gst.GLib.Object.GetObject(pad) as Gst.Pad);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.PadTemplate), ConnectionMethod="OverridePadCreated")]
		protected virtual void OnPadCreated (Gst.Pad pad)
		{
			InternalPadCreated (pad);
		}

		private void InternalPadCreated (Gst.Pad pad)
		{
			PadCreatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PadCreated;
			if (unmanaged == null) return;

			unmanaged (this.Handle, pad == null ? IntPtr.Zero : pad.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstPadTemplateClass {
			public PadCreatedNativeDelegate PadCreated;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstPadTemplateClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstPadTemplateClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstPadTemplateClass class_struct = (GstPadTemplateClass) Marshal.PtrToStructure (class_ptr, typeof (GstPadTemplateClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstPadTemplateClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_template_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_pad_template_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pad_template_pad_created(IntPtr raw, IntPtr pad);

		public void EmitPadCreated(Gst.Pad pad) {
			gst_pad_template_pad_created(Handle, pad == null ? IntPtr.Zero : pad.Handle);
		}

#endregion
#region Customized extensions
#line 1 "PadTemplate.custom"
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_pad_template_new (IntPtr name_template, int direction, int presence, IntPtr caps);

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_caps_ref (IntPtr handle);

public PadTemplate (string name_template, Gst.PadDirection direction, Gst.PadPresence presence, Gst.Caps caps) : base (IntPtr.Zero) {
  if (GetType () != typeof (PadTemplate)) {
    ArrayList vals = new ArrayList();
    ArrayList names = new ArrayList();
    names.Add ("name_template");
    vals.Add (new Gst.GLib.Value (name_template));
    names.Add ("direction");
    vals.Add (new Gst.GLib.Value (direction));
    names.Add ("presence");
    vals.Add (new Gst.GLib.Value (presence));
    if (caps != null) {
      names.Add ("caps");
      vals.Add (new Gst.GLib.Value (caps));
    }
    CreateNativeObject ( (string[]) names.ToArray (typeof (string)), (Gst.GLib.Value[]) vals.ToArray (typeof (Gst.GLib.Value)));
    return;
  }
  IntPtr native_name_template = Gst.GLib.Marshaller.StringToPtrGStrdup (name_template);
  if (caps != null)
    gst_caps_ref (caps.Handle);

  Raw = gst_pad_template_new (native_name_template, (int) direction, (int) presence, caps == null ? IntPtr.Zero : caps.Handle);
  Gst.GLib.Marshaller.Free (native_name_template);
}


#endregion
	}
}

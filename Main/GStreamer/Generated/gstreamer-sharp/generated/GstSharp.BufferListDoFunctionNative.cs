// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GstSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr BufferListDoFunctionNative(IntPtr buffer, IntPtr user_data);

	internal class BufferListDoFunctionInvoker {

		BufferListDoFunctionNative native_cb;
		IntPtr __data;
		Gst.GLib.DestroyNotify __notify;

		~BufferListDoFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal BufferListDoFunctionInvoker (BufferListDoFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal BufferListDoFunctionInvoker (BufferListDoFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal BufferListDoFunctionInvoker (BufferListDoFunctionNative native_cb, IntPtr data, Gst.GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.BufferListDoFunction Handler {
			get {
				return new Gst.BufferListDoFunction(InvokeNative);
			}
		}

		Gst.Buffer InvokeNative (Gst.Buffer buffer)
		{
			Gst.Buffer result = Gst.MiniObject.GetObject(native_cb (buffer == null ? IntPtr.Zero : buffer.Handle, __data)) as Gst.Buffer;
			return result;
		}
	}

	internal class BufferListDoFunctionWrapper {

		public IntPtr NativeCallback (IntPtr buffer, IntPtr user_data)
		{
			try {
				Gst.Buffer __ret = managed (Gst.MiniObject.GetObject(buffer) as Gst.Buffer);
				if (release_on_call)
					gch.Free ();
				return __ret == null ? IntPtr.Zero : __ret.Handle;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal BufferListDoFunctionNative NativeDelegate;
		Gst.BufferListDoFunction managed;

		public BufferListDoFunctionWrapper (Gst.BufferListDoFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new BufferListDoFunctionNative (NativeCallback);
		}

		public static Gst.BufferListDoFunction GetManagedDelegate (BufferListDoFunctionNative native)
		{
			if (native == null)
				return null;
			BufferListDoFunctionWrapper wrapper = (BufferListDoFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}

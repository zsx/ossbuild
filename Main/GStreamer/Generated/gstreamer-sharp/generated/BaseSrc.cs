// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class BaseSrc : Gst.Element {

		public BaseSrc(IntPtr raw) : base(raw) {}

		protected BaseSrc() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_base_src_get_blocksize(IntPtr raw);

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_base_src_set_blocksize(IntPtr raw, UIntPtr blocksize);

		[Gst.GLib.Property ("blocksize")]
		public ulong Blocksize {
			get  {
				UIntPtr raw_ret = gst_base_src_get_blocksize(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
			set  {
				gst_base_src_set_blocksize(Handle, new UIntPtr (value));
			}
		}

		[Gst.GLib.Property ("num-buffers")]
		public int NumBuffers {
			get {
				Gst.GLib.Value val = GetProperty ("num-buffers");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("num-buffers", val);
				val.Dispose ();
			}
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_base_src_get_do_timestamp(IntPtr raw);

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_base_src_set_do_timestamp(IntPtr raw, bool timestamp);

		[Gst.GLib.Property ("do-timestamp")]
		public bool DoTimestamp {
			get  {
				bool raw_ret = gst_base_src_get_do_timestamp(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gst_base_src_set_do_timestamp(Handle, value);
			}
		}

		[Gst.GLib.Property ("typefind")]
		public bool Typefind {
			get {
				Gst.GLib.Value val = GetProperty ("typefind");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("typefind", val);
				val.Dispose ();
			}
		}

		static GetCapsNativeDelegate GetCaps_cb_delegate;
		static GetCapsNativeDelegate GetCapsVMCallback {
			get {
				if (GetCaps_cb_delegate == null)
					GetCaps_cb_delegate = new GetCapsNativeDelegate (GetCaps_cb);
				return GetCaps_cb_delegate;
			}
		}

		static void OverrideGetCaps (Gst.GLib.GType gtype)
		{
			OverrideGetCaps (gtype, GetCapsVMCallback);
		}

		static void OverrideGetCaps (Gst.GLib.GType gtype, GetCapsNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetCaps = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetCapsNativeDelegate (IntPtr inst);

		static IntPtr GetCaps_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				Gst.Caps __result = __obj.OnGetCaps ();
				return __result == null ? IntPtr.Zero : __result.OwnedCopy;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideGetCaps")]
		protected virtual Gst.Caps OnGetCaps ()
		{
			return InternalGetCaps ();
		}

		private Gst.Caps InternalGetCaps ()
		{
			GetCapsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetCaps;
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return __result == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (__result, typeof (Gst.Caps), true);
		}

		static SetCapsNativeDelegate SetCaps_cb_delegate;
		static SetCapsNativeDelegate SetCapsVMCallback {
			get {
				if (SetCaps_cb_delegate == null)
					SetCaps_cb_delegate = new SetCapsNativeDelegate (SetCaps_cb);
				return SetCaps_cb_delegate;
			}
		}

		static void OverrideSetCaps (Gst.GLib.GType gtype)
		{
			OverrideSetCaps (gtype, SetCapsVMCallback);
		}

		static void OverrideSetCaps (Gst.GLib.GType gtype, SetCapsNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.SetCaps = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetCapsNativeDelegate (IntPtr inst, IntPtr caps);

		static bool SetCaps_cb (IntPtr inst, IntPtr caps)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnSetCaps (caps == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (caps, typeof (Gst.Caps), false));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideSetCaps")]
		protected virtual bool OnSetCaps (Gst.Caps caps)
		{
			return InternalSetCaps (caps);
		}

		private bool InternalSetCaps (Gst.Caps caps)
		{
			SetCapsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SetCaps;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, caps == null ? IntPtr.Zero : caps.Handle);
			return __result;
		}

		static NegotiateNativeDelegate Negotiate_cb_delegate;
		static NegotiateNativeDelegate NegotiateVMCallback {
			get {
				if (Negotiate_cb_delegate == null)
					Negotiate_cb_delegate = new NegotiateNativeDelegate (Negotiate_cb);
				return Negotiate_cb_delegate;
			}
		}

		static void OverrideNegotiate (Gst.GLib.GType gtype)
		{
			OverrideNegotiate (gtype, NegotiateVMCallback);
		}

		static void OverrideNegotiate (Gst.GLib.GType gtype, NegotiateNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Negotiate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool NegotiateNativeDelegate (IntPtr inst);

		static bool Negotiate_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnNegotiate ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideNegotiate")]
		protected virtual bool OnNegotiate ()
		{
			return InternalNegotiate ();
		}

		private bool InternalNegotiate ()
		{
			NegotiateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Negotiate;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static NewsegmentNativeDelegate Newsegment_cb_delegate;
		static NewsegmentNativeDelegate NewsegmentVMCallback {
			get {
				if (Newsegment_cb_delegate == null)
					Newsegment_cb_delegate = new NewsegmentNativeDelegate (Newsegment_cb);
				return Newsegment_cb_delegate;
			}
		}

		static void OverrideNewsegment (Gst.GLib.GType gtype)
		{
			OverrideNewsegment (gtype, NewsegmentVMCallback);
		}

		static void OverrideNewsegment (Gst.GLib.GType gtype, NewsegmentNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Newsegment = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool NewsegmentNativeDelegate (IntPtr inst);

		static bool Newsegment_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnNewsegment ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideNewsegment")]
		protected virtual bool OnNewsegment ()
		{
			return InternalNewsegment ();
		}

		private bool InternalNewsegment ()
		{
			NewsegmentNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Newsegment;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static StartNativeDelegate Start_cb_delegate;
		static StartNativeDelegate StartVMCallback {
			get {
				if (Start_cb_delegate == null)
					Start_cb_delegate = new StartNativeDelegate (Start_cb);
				return Start_cb_delegate;
			}
		}

		static void OverrideStart (Gst.GLib.GType gtype)
		{
			OverrideStart (gtype, StartVMCallback);
		}

		static void OverrideStart (Gst.GLib.GType gtype, StartNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Start = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool StartNativeDelegate (IntPtr inst);

		static bool Start_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnStart ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideStart")]
		protected virtual bool OnStart ()
		{
			return InternalStart ();
		}

		private bool InternalStart ()
		{
			StartNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Start;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static StopNativeDelegate Stop_cb_delegate;
		static StopNativeDelegate StopVMCallback {
			get {
				if (Stop_cb_delegate == null)
					Stop_cb_delegate = new StopNativeDelegate (Stop_cb);
				return Stop_cb_delegate;
			}
		}

		static void OverrideStop (Gst.GLib.GType gtype)
		{
			OverrideStop (gtype, StopVMCallback);
		}

		static void OverrideStop (Gst.GLib.GType gtype, StopNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Stop = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool StopNativeDelegate (IntPtr inst);

		static bool Stop_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnStop ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideStop")]
		protected virtual bool OnStop ()
		{
			return InternalStop ();
		}

		private bool InternalStop ()
		{
			StopNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Stop;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static GetTimesNativeDelegate GetTimes_cb_delegate;
		static GetTimesNativeDelegate GetTimesVMCallback {
			get {
				if (GetTimes_cb_delegate == null)
					GetTimes_cb_delegate = new GetTimesNativeDelegate (GetTimes_cb);
				return GetTimes_cb_delegate;
			}
		}

		static void OverrideGetTimes (Gst.GLib.GType gtype)
		{
			OverrideGetTimes (gtype, GetTimesVMCallback);
		}

		static void OverrideGetTimes (Gst.GLib.GType gtype, GetTimesNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetTimes = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetTimesNativeDelegate (IntPtr inst, IntPtr buffer, out ulong start, out ulong end);

		static void GetTimes_cb (IntPtr inst, IntPtr buffer, out ulong start, out ulong end)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				__obj.OnGetTimes (Gst.MiniObject.GetObject(buffer) as Gst.Buffer, out start, out end);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideGetTimes")]
		protected virtual void OnGetTimes (Gst.Buffer buffer, out ulong start, out ulong end)
		{
			InternalGetTimes (buffer, out start, out end);
		}

		private void InternalGetTimes (Gst.Buffer buffer, out ulong start, out ulong end)
		{
			GetTimesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetTimes;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, buffer == null ? IntPtr.Zero : buffer.Handle, out start, out end);
		}

		static GetSizeNativeDelegate GetSize_cb_delegate;
		static GetSizeNativeDelegate GetSizeVMCallback {
			get {
				if (GetSize_cb_delegate == null)
					GetSize_cb_delegate = new GetSizeNativeDelegate (GetSize_cb);
				return GetSize_cb_delegate;
			}
		}

		static void OverrideGetSize (Gst.GLib.GType gtype)
		{
			OverrideGetSize (gtype, GetSizeVMCallback);
		}

		static void OverrideGetSize (Gst.GLib.GType gtype, GetSizeNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.GetSize = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GetSizeNativeDelegate (IntPtr inst, out ulong size);

		static bool GetSize_cb (IntPtr inst, out ulong size)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnGetSize (out size);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideGetSize")]
		protected virtual bool OnGetSize (out ulong size)
		{
			return InternalGetSize (out size);
		}

		private bool InternalGetSize (out ulong size)
		{
			GetSizeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).GetSize;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			bool __result = unmanaged (this.Handle, out size);
			return __result;
		}

		static IsSeekableNativeDelegate IsSeekable_cb_delegate;
		static IsSeekableNativeDelegate IsSeekableVMCallback {
			get {
				if (IsSeekable_cb_delegate == null)
					IsSeekable_cb_delegate = new IsSeekableNativeDelegate (IsSeekable_cb);
				return IsSeekable_cb_delegate;
			}
		}

		static void OverrideIsSeekable (Gst.GLib.GType gtype)
		{
			OverrideIsSeekable (gtype, IsSeekableVMCallback);
		}

		static void OverrideIsSeekable (Gst.GLib.GType gtype, IsSeekableNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.IsSeekable = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool IsSeekableNativeDelegate (IntPtr inst);

		static bool IsSeekable_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnIsSeekable ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideIsSeekable")]
		protected virtual bool OnIsSeekable ()
		{
			return InternalIsSeekable ();
		}

		private bool InternalIsSeekable ()
		{
			IsSeekableNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).IsSeekable;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static UnlockNativeDelegate Unlock_cb_delegate;
		static UnlockNativeDelegate UnlockVMCallback {
			get {
				if (Unlock_cb_delegate == null)
					Unlock_cb_delegate = new UnlockNativeDelegate (Unlock_cb);
				return Unlock_cb_delegate;
			}
		}

		static void OverrideUnlock (Gst.GLib.GType gtype)
		{
			OverrideUnlock (gtype, UnlockVMCallback);
		}

		static void OverrideUnlock (Gst.GLib.GType gtype, UnlockNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Unlock = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool UnlockNativeDelegate (IntPtr inst);

		static bool Unlock_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnUnlock ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideUnlock")]
		protected virtual bool OnUnlock ()
		{
			return InternalUnlock ();
		}

		private bool InternalUnlock ()
		{
			UnlockNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Unlock;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static EventNativeDelegate Event_cb_delegate;
		static EventNativeDelegate EventVMCallback {
			get {
				if (Event_cb_delegate == null)
					Event_cb_delegate = new EventNativeDelegate (Event_cb);
				return Event_cb_delegate;
			}
		}

		static void OverrideEvent (Gst.GLib.GType gtype)
		{
			OverrideEvent (gtype, EventVMCallback);
		}

		static void OverrideEvent (Gst.GLib.GType gtype, EventNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Event = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool EventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool Event_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnEvent (Gst.MiniObject.GetObject(evnt) as Gst.Event);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideEvent")]
		protected virtual bool OnEvent (Gst.Event evnt)
		{
			return InternalEvent (evnt);
		}

		private bool InternalEvent (Gst.Event evnt)
		{
			EventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Event;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		static CreateNativeDelegate Create_cb_delegate;
		static CreateNativeDelegate CreateVMCallback {
			get {
				if (Create_cb_delegate == null)
					Create_cb_delegate = new CreateNativeDelegate (Create_cb);
				return Create_cb_delegate;
			}
		}

		static void OverrideCreate (Gst.GLib.GType gtype)
		{
			OverrideCreate (gtype, CreateVMCallback);
		}

		static void OverrideCreate (Gst.GLib.GType gtype, CreateNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Create = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int CreateNativeDelegate (IntPtr inst, ulong offset, uint size, out IntPtr buf);

		static int Create_cb (IntPtr inst, ulong offset, uint size, out IntPtr buf)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				Gst.Buffer mybuf;
				Gst.FlowReturn __result = __obj.OnCreate (offset, size, out mybuf);
				buf = mybuf == null ? IntPtr.Zero : mybuf.Handle;
				return (int) __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideCreate")]
		protected virtual Gst.FlowReturn OnCreate (ulong offset, uint size, out Gst.Buffer buf)
		{
			return InternalCreate (offset, size, out buf);
		}

		private Gst.FlowReturn InternalCreate (ulong offset, uint size, out Gst.Buffer buf)
		{
			CreateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Create;
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr native_buf;
			int __result = unmanaged (this.Handle, offset, size, out native_buf);
			buf = Gst.MiniObject.GetObject(native_buf, true) as Gst.Buffer;
			return (Gst.FlowReturn) __result;
		}

		static DoSeekNativeDelegate DoSeek_cb_delegate;
		static DoSeekNativeDelegate DoSeekVMCallback {
			get {
				if (DoSeek_cb_delegate == null)
					DoSeek_cb_delegate = new DoSeekNativeDelegate (DoSeek_cb);
				return DoSeek_cb_delegate;
			}
		}

		static void OverrideDoSeek (Gst.GLib.GType gtype)
		{
			OverrideDoSeek (gtype, DoSeekVMCallback);
		}

		static void OverrideDoSeek (Gst.GLib.GType gtype, DoSeekNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.DoSeek = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DoSeekNativeDelegate (IntPtr inst, IntPtr segment);

		static bool DoSeek_cb (IntPtr inst, IntPtr segment)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnDoSeek (segment == IntPtr.Zero ? null : (Gst.Segment) Gst.GLib.Opaque.GetOpaque (segment, typeof (Gst.Segment), false));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideDoSeek")]
		protected virtual bool OnDoSeek (Gst.Segment segment)
		{
			return InternalDoSeek (segment);
		}

		private bool InternalDoSeek (Gst.Segment segment)
		{
			DoSeekNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).DoSeek;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, segment == null ? IntPtr.Zero : segment.Handle);
			return __result;
		}

		static SrcQueryNativeDelegate SrcQuery_cb_delegate;
		static SrcQueryNativeDelegate SrcQueryVMCallback {
			get {
				if (SrcQuery_cb_delegate == null)
					SrcQuery_cb_delegate = new SrcQueryNativeDelegate (SrcQuery_cb);
				return SrcQuery_cb_delegate;
			}
		}

		static void OverrideSrcQuery (Gst.GLib.GType gtype)
		{
			OverrideSrcQuery (gtype, SrcQueryVMCallback);
		}

		static void OverrideSrcQuery (Gst.GLib.GType gtype, SrcQueryNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.SrcQuery = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SrcQueryNativeDelegate (IntPtr inst, IntPtr query);

		static bool SrcQuery_cb (IntPtr inst, IntPtr query)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnSrcQuery (Gst.MiniObject.GetObject(query) as Gst.Query);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideSrcQuery")]
		protected virtual bool OnSrcQuery (Gst.Query query)
		{
			return InternalSrcQuery (query);
		}

		private bool InternalSrcQuery (Gst.Query query)
		{
			SrcQueryNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SrcQuery;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, query == null ? IntPtr.Zero : query.Handle);
			return __result;
		}

		static CheckGetRangeNativeDelegate CheckGetRange_cb_delegate;
		static CheckGetRangeNativeDelegate CheckGetRangeVMCallback {
			get {
				if (CheckGetRange_cb_delegate == null)
					CheckGetRange_cb_delegate = new CheckGetRangeNativeDelegate (CheckGetRange_cb);
				return CheckGetRange_cb_delegate;
			}
		}

		static void OverrideCheckGetRange (Gst.GLib.GType gtype)
		{
			OverrideCheckGetRange (gtype, CheckGetRangeVMCallback);
		}

		static void OverrideCheckGetRange (Gst.GLib.GType gtype, CheckGetRangeNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.CheckGetRange = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CheckGetRangeNativeDelegate (IntPtr inst);

		static bool CheckGetRange_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnCheckGetRange ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideCheckGetRange")]
		protected virtual bool OnCheckGetRange ()
		{
			return InternalCheckGetRange ();
		}

		private bool InternalCheckGetRange ()
		{
			CheckGetRangeNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).CheckGetRange;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static FixateNativeDelegate Fixate_cb_delegate;
		static FixateNativeDelegate FixateVMCallback {
			get {
				if (Fixate_cb_delegate == null)
					Fixate_cb_delegate = new FixateNativeDelegate (Fixate_cb);
				return Fixate_cb_delegate;
			}
		}

		static void OverrideFixate (Gst.GLib.GType gtype)
		{
			OverrideFixate (gtype, FixateVMCallback);
		}

		static void OverrideFixate (Gst.GLib.GType gtype, FixateNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.Fixate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FixateNativeDelegate (IntPtr inst, IntPtr caps);

		static void Fixate_cb (IntPtr inst, IntPtr caps)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				__obj.OnFixate (caps == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (caps, typeof (Gst.Caps), false));
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideFixate")]
		protected virtual void OnFixate (Gst.Caps caps)
		{
			InternalFixate (caps);
		}

		private void InternalFixate (Gst.Caps caps)
		{
			FixateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Fixate;
			if (unmanaged == null) return;

			unmanaged (this.Handle, caps == null ? IntPtr.Zero : caps.Handle);
		}

		static UnlockStopNativeDelegate UnlockStop_cb_delegate;
		static UnlockStopNativeDelegate UnlockStopVMCallback {
			get {
				if (UnlockStop_cb_delegate == null)
					UnlockStop_cb_delegate = new UnlockStopNativeDelegate (UnlockStop_cb);
				return UnlockStop_cb_delegate;
			}
		}

		static void OverrideUnlockStop (Gst.GLib.GType gtype)
		{
			OverrideUnlockStop (gtype, UnlockStopVMCallback);
		}

		static void OverrideUnlockStop (Gst.GLib.GType gtype, UnlockStopNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.UnlockStop = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool UnlockStopNativeDelegate (IntPtr inst);

		static bool UnlockStop_cb (IntPtr inst)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnUnlockStop ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverrideUnlockStop")]
		protected virtual bool OnUnlockStop ()
		{
			return InternalUnlockStop ();
		}

		private bool InternalUnlockStop ()
		{
			UnlockStopNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).UnlockStop;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static PrepareSeekSegmentNativeDelegate PrepareSeekSegment_cb_delegate;
		static PrepareSeekSegmentNativeDelegate PrepareSeekSegmentVMCallback {
			get {
				if (PrepareSeekSegment_cb_delegate == null)
					PrepareSeekSegment_cb_delegate = new PrepareSeekSegmentNativeDelegate (PrepareSeekSegment_cb);
				return PrepareSeekSegment_cb_delegate;
			}
		}

		static void OverridePrepareSeekSegment (Gst.GLib.GType gtype)
		{
			OverridePrepareSeekSegment (gtype, PrepareSeekSegmentVMCallback);
		}

		static void OverridePrepareSeekSegment (Gst.GLib.GType gtype, PrepareSeekSegmentNativeDelegate callback)
		{
			GstBaseSrcClass class_iface = GetClassStruct (gtype, false);
			class_iface.PrepareSeekSegment = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool PrepareSeekSegmentNativeDelegate (IntPtr inst, IntPtr seek, IntPtr segment);

		static bool PrepareSeekSegment_cb (IntPtr inst, IntPtr seek, IntPtr segment)
		{
			try {
				BaseSrc __obj = Gst.GLib.Object.GetObject (inst, false) as BaseSrc;
				bool __result = __obj.OnPrepareSeekSegment (Gst.MiniObject.GetObject(seek) as Gst.Event, segment == IntPtr.Zero ? null : (Gst.Segment) Gst.GLib.Opaque.GetOpaque (segment, typeof (Gst.Segment), false));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Base.BaseSrc), ConnectionMethod="OverridePrepareSeekSegment")]
		protected virtual bool OnPrepareSeekSegment (Gst.Event seek, Gst.Segment segment)
		{
			return InternalPrepareSeekSegment (seek, segment);
		}

		private bool InternalPrepareSeekSegment (Gst.Event seek, Gst.Segment segment)
		{
			PrepareSeekSegmentNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PrepareSeekSegment;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, seek == null ? IntPtr.Zero : seek.Handle, segment == null ? IntPtr.Zero : segment.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstBaseSrcClass {
			public GetCapsNativeDelegate GetCaps;
			public SetCapsNativeDelegate SetCaps;
			public NegotiateNativeDelegate Negotiate;
			public NewsegmentNativeDelegate Newsegment;
			public StartNativeDelegate Start;
			public StopNativeDelegate Stop;
			public GetTimesNativeDelegate GetTimes;
			public GetSizeNativeDelegate GetSize;
			public IsSeekableNativeDelegate IsSeekable;
			public UnlockNativeDelegate Unlock;
			public EventNativeDelegate Event;
			public CreateNativeDelegate Create;
			public DoSeekNativeDelegate DoSeek;
			public SrcQueryNativeDelegate SrcQuery;
			public CheckGetRangeNativeDelegate CheckGetRange;
			public FixateNativeDelegate Fixate;
			public UnlockStopNativeDelegate UnlockStop;
			public PrepareSeekSegmentNativeDelegate PrepareSeekSegment;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=14)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Element)).GetClassSize ();
		static Hashtable class_structs;

		static GstBaseSrcClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstBaseSrcClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstBaseSrcClass class_struct = (GstBaseSrcClass) Marshal.PtrToStructure (class_ptr, typeof (GstBaseSrcClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstBaseSrcClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_base_src_is_live(IntPtr raw);

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_base_src_set_live(IntPtr raw, bool live);

		public bool Live { 
			get {
				bool raw_ret = gst_base_src_is_live(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gst_base_src_set_live(Handle, value);
			}
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_base_src_query_latency(IntPtr raw, out bool live, out ulong min_latency, out ulong max_latency);

		public bool QueryLatency(out bool live, out ulong min_latency, out ulong max_latency) {
			bool raw_ret = gst_base_src_query_latency(Handle, out live, out min_latency, out max_latency);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_base_src_set_format(IntPtr raw, int format);

		public Gst.Format Format { 
			set {
				gst_base_src_set_format(Handle, (int) value);
			}
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_base_src_wait_playing(IntPtr raw);

		public Gst.FlowReturn WaitPlaying() {
			int raw_ret = gst_base_src_wait_playing(Handle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_base_src_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_base_src_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}


		static BaseSrc ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Adapter : Gst.GLib.Object {

		public Adapter(IntPtr raw) : base(raw) {}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_new();

		public Adapter () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Adapter)) {
				CreateNativeObject (new string [0], new Gst.GLib.Value[0]);
				return;
			}
			Raw = gst_adapter_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstAdapterClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.GLib.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstAdapterClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstAdapterClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstAdapterClass class_struct = (GstAdapterClass) Marshal.PtrToStructure (class_ptr, typeof (GstAdapterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstAdapterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_adapter_prev_timestamp(IntPtr raw, out ulong distance);

		public ulong PrevTimestamp(out ulong distance) {
			ulong raw_ret = gst_adapter_prev_timestamp(Handle, out distance);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_take_buffer(IntPtr raw, uint nbytes);

		public Gst.Buffer Take(uint nbytes) {
			IntPtr raw_ret = gst_adapter_take_buffer(Handle, nbytes);
			Gst.Buffer ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_flush(IntPtr raw, uint flush);

		public void Flush(uint flush) {
			gst_adapter_flush(Handle, flush);
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_adapter_available(IntPtr raw);

		public uint Available() {
			uint raw_ret = gst_adapter_available(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_adapter_available_fast(IntPtr raw);

		public uint AvailableFast() {
			uint raw_ret = gst_adapter_available_fast(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_adapter_masked_scan_uint32(IntPtr raw, uint mask, uint pattern, uint offset, uint size);

		public uint MaskedScanUint32(uint mask, uint pattern, uint offset, uint size) {
			uint raw_ret = gst_adapter_masked_scan_uint32(Handle, mask, pattern, offset, size);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_adapter_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_adapter_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_clear(IntPtr raw);

		public void Clear() {
			gst_adapter_clear(Handle);
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_adapter_push(IntPtr raw, IntPtr buf);

		public void Push(Gst.Buffer buf) {
			gst_adapter_push(Handle, buf == null ? IntPtr.Zero : buf.OwnedHandle);
		}


		static Adapter ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "Adapter.custom"
[DllImport ("gstreamersharpglue-0.10.dll") ]
static extern IntPtr gstsharp_gst_adapter_peek_buffer (IntPtr adapter, uint size);

public Gst.Buffer Peek (uint size) {
  return (Gst.Buffer) Gst.MiniObject.GetObject (gstsharp_gst_adapter_peek_buffer (Handle, size), true);
}

#endregion
	}
}

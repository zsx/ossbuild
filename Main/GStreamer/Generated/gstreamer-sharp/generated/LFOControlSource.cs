// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Controller {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class LFOControlSource : Gst.Controller.ControlSource {

		public LFOControlSource(IntPtr raw) : base(raw) {}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_lfo_control_source_new();

		public LFOControlSource () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (LFOControlSource)) {
				CreateNativeObject (new string [0], new Gst.GLib.Value[0]);
				return;
			}
			Raw = gst_lfo_control_source_new();
		}

		[Gst.GLib.Property ("frequency")]
		public double Frequency {
			get {
				Gst.GLib.Value val = GetProperty ("frequency");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("frequency", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("offset")]
		public Gst.GLib.Value Offset {
			get {
				Gst.GLib.Value val = GetProperty ("offset");
				Gst.GLib.Value ret = (Gst.GLib.Value) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("offset", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("amplitude")]
		public Gst.GLib.Value Amplitude {
			get {
				Gst.GLib.Value val = GetProperty ("amplitude");
				Gst.GLib.Value ret = (Gst.GLib.Value) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("amplitude", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Property ("timeshift")]
		public ulong Timeshift {
			get {
				Gst.GLib.Value val = GetProperty ("timeshift");
				ulong ret = (ulong) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("timeshift", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstLFOControlSourceClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Controller.ControlSource)).GetClassSize ();
		static Hashtable class_structs;

		static GstLFOControlSourceClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstLFOControlSourceClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstLFOControlSourceClass class_struct = (GstLFOControlSourceClass) Marshal.PtrToStructure (class_ptr, typeof (GstLFOControlSourceClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstLFOControlSourceClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstcontroller-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_lfo_control_source_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_lfo_control_source_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}


		static LFOControlSource ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Bin : Gst.Element, Gst.ChildProxy {

		public Bin(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_new(IntPtr name);

		public Bin (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Bin)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("name");
				vals.Add (new Gst.GLib.Value (name));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (Gst.GLib.Value[])vals.ToArray (typeof (Gst.GLib.Value)));
				return;
			}
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gst_bin_new(native_name);
			Gst.GLib.Marshaller.Free (native_name);
		}

		[Gst.GLib.Property ("async-handling")]
		public bool AsyncHandling {
			get {
				Gst.GLib.Value val = GetProperty ("async-handling");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("async-handling", val);
				val.Dispose ();
			}
		}

		[Gst.GLib.Signal("element-added")]
		public event Gst.ElementAddedHandler ElementAdded {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "element-added", typeof (Gst.ElementAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "element-added", typeof (Gst.ElementAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("do-latency")]
		public event Gst.DoLatencyHandler DoLatency {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "do-latency", typeof (Gst.DoLatencyArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "do-latency", typeof (Gst.DoLatencyArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("element-removed")]
		public event Gst.ElementRemovedHandler ElementRemoved {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "element-removed", typeof (Gst.ElementRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "element-removed", typeof (Gst.ElementRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_override_element_added (IntPtr class_struct, ElementAddedNativeDelegate cb);

		static ElementAddedNativeDelegate ElementAdded_cb_delegate;
		static ElementAddedNativeDelegate ElementAddedVMCallback {
			get {
				if (ElementAdded_cb_delegate == null)
					ElementAdded_cb_delegate = new ElementAddedNativeDelegate (ElementAdded_cb);
				return ElementAdded_cb_delegate;
			}
		}

		static void OverrideElementAdded (Gst.GLib.GType gtype)
		{
			OverrideElementAdded (gtype, ElementAddedVMCallback);
		}

		static void OverrideElementAdded (Gst.GLib.GType gtype, ElementAddedNativeDelegate callback)
		{
			gstsharp_bin_override_element_added (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ElementAddedNativeDelegate (IntPtr inst, IntPtr child);

		static void ElementAdded_cb (IntPtr inst, IntPtr child)
		{
			try {
				Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Bin;
				__obj.OnElementAdded (Gst.GLib.Object.GetObject(child) as Gst.Element);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_invoke_element_added (IntPtr class_struct, IntPtr inst, IntPtr child);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideElementAdded")]
		protected virtual void OnElementAdded (Gst.Element child)
		{
			InternalElementAdded (child);
		}

		private void InternalElementAdded (Gst.Element child)
		{
			gstsharp_bin_invoke_element_added (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_override_element_removed (IntPtr class_struct, ElementRemovedNativeDelegate cb);

		static ElementRemovedNativeDelegate ElementRemoved_cb_delegate;
		static ElementRemovedNativeDelegate ElementRemovedVMCallback {
			get {
				if (ElementRemoved_cb_delegate == null)
					ElementRemoved_cb_delegate = new ElementRemovedNativeDelegate (ElementRemoved_cb);
				return ElementRemoved_cb_delegate;
			}
		}

		static void OverrideElementRemoved (Gst.GLib.GType gtype)
		{
			OverrideElementRemoved (gtype, ElementRemovedVMCallback);
		}

		static void OverrideElementRemoved (Gst.GLib.GType gtype, ElementRemovedNativeDelegate callback)
		{
			gstsharp_bin_override_element_removed (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ElementRemovedNativeDelegate (IntPtr inst, IntPtr child);

		static void ElementRemoved_cb (IntPtr inst, IntPtr child)
		{
			try {
				Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Bin;
				__obj.OnElementRemoved (Gst.GLib.Object.GetObject(child) as Gst.Element);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_invoke_element_removed (IntPtr class_struct, IntPtr inst, IntPtr child);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideElementRemoved")]
		protected virtual void OnElementRemoved (Gst.Element child)
		{
			InternalElementRemoved (child);
		}

		private void InternalElementRemoved (Gst.Element child)
		{
			gstsharp_bin_invoke_element_removed (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_override_add_element (IntPtr class_struct, AddElementNativeDelegate cb);

		static AddElementNativeDelegate AddElement_cb_delegate;
		static AddElementNativeDelegate AddElementVMCallback {
			get {
				if (AddElement_cb_delegate == null)
					AddElement_cb_delegate = new AddElementNativeDelegate (AddElement_cb);
				return AddElement_cb_delegate;
			}
		}

		static void OverrideAddElement (Gst.GLib.GType gtype)
		{
			OverrideAddElement (gtype, AddElementVMCallback);
		}

		static void OverrideAddElement (Gst.GLib.GType gtype, AddElementNativeDelegate callback)
		{
			gstsharp_bin_override_add_element (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool AddElementNativeDelegate (IntPtr inst, IntPtr element);

		static bool AddElement_cb (IntPtr inst, IntPtr element)
		{
			try {
				Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Bin;
				bool __result = __obj.OnAddElement (Gst.GLib.Object.GetObject(element) as Gst.Element);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern bool gstsharp_bin_invoke_add_element (IntPtr class_struct, IntPtr inst, IntPtr element);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideAddElement")]
		protected virtual bool OnAddElement (Gst.Element element)
		{
			return InternalAddElement (element);
		}

		private bool InternalAddElement (Gst.Element element)
		{
			bool __result = gstsharp_bin_invoke_add_element (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, element == null ? IntPtr.Zero : element.Handle);
			return __result;
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_override_remove_element (IntPtr class_struct, RemoveElementNativeDelegate cb);

		static RemoveElementNativeDelegate RemoveElement_cb_delegate;
		static RemoveElementNativeDelegate RemoveElementVMCallback {
			get {
				if (RemoveElement_cb_delegate == null)
					RemoveElement_cb_delegate = new RemoveElementNativeDelegate (RemoveElement_cb);
				return RemoveElement_cb_delegate;
			}
		}

		static void OverrideRemoveElement (Gst.GLib.GType gtype)
		{
			OverrideRemoveElement (gtype, RemoveElementVMCallback);
		}

		static void OverrideRemoveElement (Gst.GLib.GType gtype, RemoveElementNativeDelegate callback)
		{
			gstsharp_bin_override_remove_element (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool RemoveElementNativeDelegate (IntPtr inst, IntPtr element);

		static bool RemoveElement_cb (IntPtr inst, IntPtr element)
		{
			try {
				Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Bin;
				bool __result = __obj.OnRemoveElement (Gst.GLib.Object.GetObject(element) as Gst.Element);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern bool gstsharp_bin_invoke_remove_element (IntPtr class_struct, IntPtr inst, IntPtr element);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideRemoveElement")]
		protected virtual bool OnRemoveElement (Gst.Element element)
		{
			return InternalRemoveElement (element);
		}

		private bool InternalRemoveElement (Gst.Element element)
		{
			bool __result = gstsharp_bin_invoke_remove_element (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, element == null ? IntPtr.Zero : element.Handle);
			return __result;
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_override_handle_message (IntPtr class_struct, HandleMessageNativeDelegate cb);

		static HandleMessageNativeDelegate HandleMessage_cb_delegate;
		static HandleMessageNativeDelegate HandleMessageVMCallback {
			get {
				if (HandleMessage_cb_delegate == null)
					HandleMessage_cb_delegate = new HandleMessageNativeDelegate (HandleMessage_cb);
				return HandleMessage_cb_delegate;
			}
		}

		static void OverrideHandleMessage (Gst.GLib.GType gtype)
		{
			OverrideHandleMessage (gtype, HandleMessageVMCallback);
		}

		static void OverrideHandleMessage (Gst.GLib.GType gtype, HandleMessageNativeDelegate callback)
		{
			gstsharp_bin_override_handle_message (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void HandleMessageNativeDelegate (IntPtr inst, IntPtr message);

		static void HandleMessage_cb (IntPtr inst, IntPtr message)
		{
			try {
				Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Bin;
				__obj.OnHandleMessage (Gst.MiniObject.GetObject(message) as Gst.Message);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_invoke_handle_message (IntPtr class_struct, IntPtr inst, IntPtr message);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideHandleMessage")]
		protected virtual void OnHandleMessage (Gst.Message message)
		{
			InternalHandleMessage (message);
		}

		private void InternalHandleMessage (Gst.Message message)
		{
			gstsharp_bin_invoke_handle_message (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, message == null ? IntPtr.Zero : message.Handle);
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern void gstsharp_bin_override_do_latency (IntPtr class_struct, DoLatencyNativeDelegate cb);

		static DoLatencyNativeDelegate DoLatency_cb_delegate;
		static DoLatencyNativeDelegate DoLatencyVMCallback {
			get {
				if (DoLatency_cb_delegate == null)
					DoLatency_cb_delegate = new DoLatencyNativeDelegate (DoLatency_cb);
				return DoLatency_cb_delegate;
			}
		}

		static void OverrideDoLatency (Gst.GLib.GType gtype)
		{
			OverrideDoLatency (gtype, DoLatencyVMCallback);
		}

		static void OverrideDoLatency (Gst.GLib.GType gtype, DoLatencyNativeDelegate callback)
		{
			gstsharp_bin_override_do_latency (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DoLatencyNativeDelegate (IntPtr inst);

		static bool DoLatency_cb (IntPtr inst)
		{
			try {
				Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Bin;
				bool __result = __obj.OnDoLatency ();
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		static extern bool gstsharp_bin_invoke_do_latency (IntPtr class_struct, IntPtr inst);

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideDoLatency")]
		protected virtual bool OnDoLatency ()
		{
			return InternalDoLatency ();
		}

		private bool InternalDoLatency ()
		{
			bool __result = gstsharp_bin_invoke_do_latency (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle);
			return __result;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bin_remove(IntPtr raw, IntPtr element);

		public bool Remove(Gst.Element element) {
			bool raw_ret = gst_bin_remove(Handle, element == null ? IntPtr.Zero : element.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_iterate_elements(IntPtr raw);

		public Gst.Iterator Elements { 
			get {
				IntPtr raw_ret = gst_bin_iterate_elements(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_get_by_name_recurse_up(IntPtr raw, IntPtr name);

		public Gst.Element GetByNameRecurseUp(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_bin_get_by_name_recurse_up(Handle, native_name);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_iterate_sinks(IntPtr raw);

		public Gst.Iterator SinkElements { 
			get {
				IntPtr raw_ret = gst_bin_iterate_sinks(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_iterate_sources(IntPtr raw);

		public Gst.Iterator SourceElements { 
			get {
				IntPtr raw_ret = gst_bin_iterate_sources(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_get_by_interface(IntPtr raw, IntPtr iface);

		public Gst.Element GetByInterface(Gst.GLib.GType iface) {
			IntPtr raw_ret = gst_bin_get_by_interface(Handle, iface.Val);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_iterate_all_by_interface(IntPtr raw, IntPtr iface);

		public Gst.Iterator GetAllByInterface(Gst.GLib.GType iface) {
			IntPtr raw_ret = gst_bin_iterate_all_by_interface(Handle, iface.Val);
			Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_find_unlinked_pad(IntPtr raw, int direction);

		public Gst.Pad FindUnlinkedPad(Gst.PadDirection direction) {
			IntPtr raw_ret = gst_bin_find_unlinked_pad(Handle, (int) direction);
			Gst.Pad ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Pad;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_iterate_sorted(IntPtr raw);

		public Gst.Iterator ElementsSorted { 
			get {
				IntPtr raw_ret = gst_bin_iterate_sorted(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bin_recalculate_latency(IntPtr raw);

		public bool RecalculateLatency() {
			bool raw_ret = gst_bin_recalculate_latency(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_get_by_name(IntPtr raw, IntPtr name);

		public Gst.Element GetByName(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_bin_get_by_name(Handle, native_name);
			Gst.Element ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Element;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_bin_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_bin_iterate_recurse(IntPtr raw);

		public Gst.Iterator ElementsRecurse { 
			get {
				IntPtr raw_ret = gst_bin_iterate_recurse(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_child_proxy_child_added(IntPtr raw, IntPtr child);

		public void EmitChildAdded(Gst.Object child) {
			gst_child_proxy_child_added(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_child_proxy_get_child_by_name(IntPtr raw, IntPtr name);

		public Gst.Object GetChildByName(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gst_child_proxy_get_child_by_name(Handle, native_name);
			Gst.Object ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Object;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_child_proxy_get_child_by_index(IntPtr raw, uint index);

		public Gst.Object GetChildByIndex(uint index) {
			IntPtr raw_ret = gst_child_proxy_get_child_by_index(Handle, index);
			Gst.Object ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Object;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_child_proxy_get_children_count(IntPtr raw);

		public uint ChildrenCount { 
			get {
				uint raw_ret = gst_child_proxy_get_children_count(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_child_proxy_child_removed(IntPtr raw, IntPtr child);

		public void EmitChildRemoved(Gst.Object child) {
			gst_child_proxy_child_removed(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[Gst.GLib.Signal("child-added")]
		public event Gst.ChildAddedHandler ChildAdded {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "child-added", typeof (Gst.ChildAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "child-added", typeof (Gst.ChildAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("child-removed")]
		public event Gst.ChildRemovedHandler ChildRemoved {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "child-removed", typeof (Gst.ChildRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "child-removed", typeof (Gst.ChildRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		static ChildAddedNativeDelegate ChildAdded_cb_delegate;
		static ChildAddedNativeDelegate ChildAddedVMCallback {
			get {
				if (ChildAdded_cb_delegate == null)
					ChildAdded_cb_delegate = new ChildAddedNativeDelegate (ChildAdded_cb);
				return ChildAdded_cb_delegate;
			}
		}

		static void OverrideChildAdded (Gst.GLib.GType gtype)
		{
			OverrideChildAdded (gtype, ChildAddedVMCallback);
		}

		static void OverrideChildAdded (Gst.GLib.GType gtype, ChildAddedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "child-added", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChildAddedNativeDelegate (IntPtr inst, IntPtr child);

		static void ChildAdded_cb (IntPtr inst, IntPtr child)
		{
			try {
				Gst.Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Gst.Bin;
				__obj.OnChildAdded (Gst.GLib.Object.GetObject(child) as Gst.Object);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideChildAdded")]
		protected virtual void OnChildAdded (Gst.Object child)
		{
			InternalChildAdded (child);
		}

		private void InternalChildAdded (Gst.Object child)
		{
			Gst.GLib.Value ret = Gst.GLib.Value.Empty;
			Gst.GLib.ValueArray inst_and_params = new Gst.GLib.ValueArray (2);
			Gst.GLib.Value[] vals = new Gst.GLib.Value [2];
			vals [0] = new Gst.GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new Gst.GLib.Value (child);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (Gst.GLib.Value v in vals)
				v.Dispose ();
		}

		static ChildRemovedNativeDelegate ChildRemoved_cb_delegate;
		static ChildRemovedNativeDelegate ChildRemovedVMCallback {
			get {
				if (ChildRemoved_cb_delegate == null)
					ChildRemoved_cb_delegate = new ChildRemovedNativeDelegate (ChildRemoved_cb);
				return ChildRemoved_cb_delegate;
			}
		}

		static void OverrideChildRemoved (Gst.GLib.GType gtype)
		{
			OverrideChildRemoved (gtype, ChildRemovedVMCallback);
		}

		static void OverrideChildRemoved (Gst.GLib.GType gtype, ChildRemovedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "child-removed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChildRemovedNativeDelegate (IntPtr inst, IntPtr child);

		static void ChildRemoved_cb (IntPtr inst, IntPtr child)
		{
			try {
				Gst.Bin __obj = Gst.GLib.Object.GetObject (inst, false) as Gst.Bin;
				__obj.OnChildRemoved (Gst.GLib.Object.GetObject(child) as Gst.Object);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Bin), ConnectionMethod="OverrideChildRemoved")]
		protected virtual void OnChildRemoved (Gst.Object child)
		{
			InternalChildRemoved (child);
		}

		private void InternalChildRemoved (Gst.Object child)
		{
			Gst.GLib.Value ret = Gst.GLib.Value.Empty;
			Gst.GLib.ValueArray inst_and_params = new Gst.GLib.ValueArray (2);
			Gst.GLib.Value[] vals = new Gst.GLib.Value [2];
			vals [0] = new Gst.GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new Gst.GLib.Value (child);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (Gst.GLib.Value v in vals)
				v.Dispose ();
		}

#endregion
#region Customized extensions
#line 1 "Bin.custom"
public Bin () : this (null) {}

[DllImport ("libgstreamer-0.10.dll") ]
static extern bool gst_bin_add (IntPtr raw, IntPtr element);

[DllImport ("libgobject-2.0-0.dll") ]
static extern IntPtr g_object_ref (IntPtr raw);

public bool Add (Gst.Element element) {
  bool raw_ret = gst_bin_add (Handle, element == null ? IntPtr.Zero : element.Handle);
  if (raw_ret) {
    // Incrmenting the refcount of the element.
    g_object_ref (element.Handle);
  }
  bool ret = raw_ret;
  return ret;
}

public bool Add (params Element[] elements) {
  if (elements == null) {
    return false;
  }

  foreach (Element element in elements) {
    if (element == null || !Add (element)) {
      return false;
    }
  }

  return true;
}

public bool Remove (params Element[] elements) {
  if (elements == null) {
    return false;
  }

  foreach (Element element in elements) {
    if (element == null || !Remove (element)) {
      return false;
    }
  }

  return true;
}

public Gst.Element GetByInterface (System.Type type) {
  if (!type.IsSubclassOf (typeof (Gst.GLib.GInterfaceAdapter)))
    return null;

  Gst.GLib.GType t = (Gst.GLib.GType) type;

  return GetByInterface (t);
}

public IEnumerable GetAllByInterface (System.Type type) {
  if (!type.IsSubclassOf (typeof (Gst.GLib.GInterfaceAdapter)))
    return null;

  Gst.GLib.GType t = (Gst.GLib.GType) type;

  return GetAllByInterface (t);
}

#endregion
	}
}

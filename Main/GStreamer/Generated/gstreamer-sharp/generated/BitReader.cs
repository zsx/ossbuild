// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Base {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class BitReader : Gst.GLib.Opaque {

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_get_bits_uint32(IntPtr raw, out uint val, uint nbits);

		public bool Get(out uint val, uint nbits) {
			bool raw_ret = gst_bit_reader_get_bits_uint32(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_get_bits_uint64(IntPtr raw, out ulong val, uint nbits);

		public bool Get(out ulong val, uint nbits) {
			bool raw_ret = gst_bit_reader_get_bits_uint64(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_peek_bits_uint8(IntPtr raw, out byte val, uint nbits);

		public bool Peek(out byte val, uint nbits) {
			bool raw_ret = gst_bit_reader_peek_bits_uint8(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_set_pos(IntPtr raw, uint pos);

		public bool SetPos(uint pos) {
			bool raw_ret = gst_bit_reader_set_pos(Handle, pos);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_get_bits_uint8(IntPtr raw, out byte val, uint nbits);

		public bool Get(out byte val, uint nbits) {
			bool raw_ret = gst_bit_reader_get_bits_uint8(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_skip(IntPtr raw, uint nbits);

		public bool Skip(uint nbits) {
			bool raw_ret = gst_bit_reader_skip(Handle, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_peek_bits_uint32(IntPtr raw, out uint val, uint nbits);

		public bool Peek(out uint val, uint nbits) {
			bool raw_ret = gst_bit_reader_peek_bits_uint32(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_peek_bits_uint64(IntPtr raw, out ulong val, uint nbits);

		public bool Peek(out ulong val, uint nbits) {
			bool raw_ret = gst_bit_reader_peek_bits_uint64(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_peek_bits_uint16(IntPtr raw, out ushort val, uint nbits);

		public bool Peek(out ushort val, uint nbits) {
			bool raw_ret = gst_bit_reader_peek_bits_uint16(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_get_bits_uint16(IntPtr raw, out ushort val, uint nbits);

		public bool Get(out ushort val, uint nbits) {
			bool raw_ret = gst_bit_reader_get_bits_uint16(Handle, out val, nbits);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_bit_reader_get_remaining(IntPtr raw);

		public uint Remaining { 
			get {
				uint raw_ret = gst_bit_reader_get_remaining(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_bit_reader_skip_to_byte(IntPtr raw);

		public bool SkipToByte() {
			bool raw_ret = gst_bit_reader_skip_to_byte(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_bit_reader_get_pos(IntPtr raw);

		public uint Pos { 
			get {
				uint raw_ret = gst_bit_reader_get_pos(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		public BitReader(IntPtr raw) : base(raw) {}

		[DllImport("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_bit_reader_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gst_bit_reader_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gst_bit_reader_free (handle);
				return false;
			}
		}

		~BitReader ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			Gst.GLib.Timeout.Add (50, new Gst.GLib.TimeoutHandler (info.Handler));
		}

#endregion
#region Customized extensions
#line 1 "BitReader.custom"
Gst.Buffer buffer = null;
public Gst.Buffer Buffer {
  get {
    return buffer;
  }
}

[DllImport ("libgstbase-0.10.dll", CallingConvention = CallingConvention.Cdecl) ]
static extern IntPtr gst_bit_reader_new_from_buffer (IntPtr buffer);

public BitReader (Gst.Buffer buffer) {
  Raw = gst_bit_reader_new_from_buffer (buffer == null ? IntPtr.Zero : buffer.Handle);
  this.buffer = buffer;
}


#endregion
	}
}

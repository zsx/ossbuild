// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class BufferList : Gst.MiniObject {

		public BufferList(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_new();

		public BufferList () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BufferList)) {
				CreateNativeObject ();
				return;
			}
			Raw = gst_buffer_list_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstBufferListClass {
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.MiniObject)).GetClassSize ();
		static Hashtable class_structs;

		static GstBufferListClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstBufferListClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstBufferListClass class_struct = (GstBufferListClass) Marshal.PtrToStructure (class_ptr, typeof (GstBufferListClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstBufferListClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_list_foreach(IntPtr raw, GstSharp.BufferListFuncNative func, IntPtr user_data);

		public void Foreach(Gst.BufferListFunc func) {
			GstSharp.BufferListFuncWrapper func_wrapper = new GstSharp.BufferListFuncWrapper (func);
			gst_buffer_list_foreach(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_buffer_list_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_iterate(IntPtr raw);

		public Gst.BufferListIterator Iterate() {
			IntPtr raw_ret = gst_buffer_list_iterate(Handle);
			Gst.BufferListIterator ret = raw_ret == IntPtr.Zero ? null : (Gst.BufferListIterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.BufferListIterator), true);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_get(IntPtr raw, uint group, uint idx);

		public Gst.Buffer Get(uint group, uint idx) {
			IntPtr raw_ret = gst_buffer_list_get(Handle, group, idx);
			Gst.Buffer ret = Gst.MiniObject.GetObject(raw_ret, true) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_buffer_list_n_groups(IntPtr raw);

		public uint NGroups() {
			uint raw_ret = gst_buffer_list_n_groups(Handle);
			uint ret = raw_ret;
			return ret;
		}

#endregion
	}
}

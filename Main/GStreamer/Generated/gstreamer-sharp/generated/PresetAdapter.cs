// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PresetAdapter : Gst.GLib.GInterfaceAdapter, Gst.Preset {

		[StructLayout (LayoutKind.Sequential)]
		struct GstPresetInterface {
			public GetPresetNamesNativeDelegate GetPresetNames;
			public GetPropertyNamesNativeDelegate GetPropertyNames;
			public LoadPresetNativeDelegate LoadPreset;
			public SavePresetNativeDelegate SavePreset;
			public RenamePresetNativeDelegate RenamePreset;
			public DeletePresetNativeDelegate DeletePreset;
			public SetMetaNativeDelegate SetMeta;
			public GetMetaNativeDelegate GetMeta;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static GstPresetInterface iface;

		static PresetAdapter ()
		{
			Gst.GLib.GType.Register (_gtype, typeof(PresetAdapter));
			iface.GetPresetNames = new GetPresetNamesNativeDelegate (GetPresetNames_cb);
			iface.GetPropertyNames = new GetPropertyNamesNativeDelegate (GetPropertyNames_cb);
			iface.LoadPreset = new LoadPresetNativeDelegate (LoadPreset_cb);
			iface.SavePreset = new SavePresetNativeDelegate (SavePreset_cb);
			iface.RenamePreset = new RenamePresetNativeDelegate (RenamePreset_cb);
			iface.DeletePreset = new DeletePresetNativeDelegate (DeletePreset_cb);
			iface.SetMeta = new SetMetaNativeDelegate (SetMeta_cb);
			iface.GetMeta = new GetMetaNativeDelegate (GetMeta_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetPresetNamesNativeDelegate (IntPtr inst);

		static IntPtr GetPresetNames_cb (IntPtr inst)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				string[] __result = __obj.PresetNames;
				return Gst.Marshaller.StringArrayToNullTermPointer (__result);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetPropertyNamesNativeDelegate (IntPtr inst);

		static IntPtr GetPropertyNames_cb (IntPtr inst)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				string[] __result = __obj.PropertyNames;
				return Gst.Marshaller.StringArrayToNullTermPointer (__result);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool LoadPresetNativeDelegate (IntPtr inst, IntPtr name);

		static bool LoadPreset_cb (IntPtr inst, IntPtr name)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				bool __result = __obj.LoadPreset (Gst.GLib.Marshaller.Utf8PtrToString (name));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SavePresetNativeDelegate (IntPtr inst, IntPtr name);

		static bool SavePreset_cb (IntPtr inst, IntPtr name)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				bool __result = __obj.SavePreset (Gst.GLib.Marshaller.Utf8PtrToString (name));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool RenamePresetNativeDelegate (IntPtr inst, IntPtr old_name, IntPtr new_name);

		static bool RenamePreset_cb (IntPtr inst, IntPtr old_name, IntPtr new_name)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				bool __result = __obj.RenamePreset (Gst.GLib.Marshaller.Utf8PtrToString (old_name), Gst.GLib.Marshaller.Utf8PtrToString (new_name));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool DeletePresetNativeDelegate (IntPtr inst, IntPtr name);

		static bool DeletePreset_cb (IntPtr inst, IntPtr name)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				bool __result = __obj.DeletePreset (Gst.GLib.Marshaller.Utf8PtrToString (name));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SetMetaNativeDelegate (IntPtr inst, IntPtr name, IntPtr tag, IntPtr value);

		static bool SetMeta_cb (IntPtr inst, IntPtr name, IntPtr tag, IntPtr value)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				bool __result = __obj.SetMeta (Gst.GLib.Marshaller.Utf8PtrToString (name), Gst.GLib.Marshaller.Utf8PtrToString (tag), Gst.GLib.Marshaller.Utf8PtrToString (value));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GetMetaNativeDelegate (IntPtr inst, IntPtr name, IntPtr tag, out IntPtr value);

		static bool GetMeta_cb (IntPtr inst, IntPtr name, IntPtr tag, out IntPtr value)
		{
			try {
				PresetImplementor __obj = Gst.GLib.Object.GetObject (inst, false) as PresetImplementor;
				string myvalue;
				bool __result = __obj.GetMeta (Gst.GLib.Marshaller.Utf8PtrToString (name), Gst.GLib.Marshaller.Utf8PtrToString (tag), out myvalue);
				value = Gst.GLib.Marshaller.StringToPtrGStrdup(myvalue);
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GstPresetInterface native_iface = (GstPresetInterface) Marshal.PtrToStructure (ifaceptr, typeof (GstPresetInterface));
			native_iface.GetPresetNames = iface.GetPresetNames;
			native_iface.GetPropertyNames = iface.GetPropertyNames;
			native_iface.LoadPreset = iface.LoadPreset;
			native_iface.SavePreset = iface.SavePreset;
			native_iface.RenamePreset = iface.RenamePreset;
			native_iface.DeletePreset = iface.DeletePreset;
			native_iface.SetMeta = iface.SetMeta;
			native_iface.GetMeta = iface.GetMeta;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		Gst.GLib.Object implementor;

		public PresetAdapter ()
		{
			InitHandler = new Gst.GLib.GInterfaceInitHandler (Initialize);
		}

		public PresetAdapter (PresetImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is Gst.GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of Gst.GLib.Object");
			this.implementor = implementor as Gst.GLib.Object;
		}

		public PresetAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = Gst.GLib.Object.GetObject (handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_preset_get_type();

		private static Gst.GLib.GType _gtype = new Gst.GLib.GType (gst_preset_get_type ());

		public override Gst.GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static Preset GetObject (IntPtr handle, bool owned)
		{
			Gst.GLib.Object obj = Gst.GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Preset GetObject (Gst.GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is PresetImplementor)
				return new PresetAdapter (obj as PresetImplementor);
			else if (obj as Preset == null)
				return new PresetAdapter (obj.Handle);
			else
				return obj as Preset;
		}

		public PresetImplementor Implementor {
			get {
				return implementor as PresetImplementor;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_preset_delete_preset(IntPtr raw, IntPtr name);

		public bool DeletePreset(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gst_preset_delete_preset(Handle, native_name);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_preset_get_property_names(IntPtr raw);

		public string[] PropertyNames { 
			get {
				IntPtr raw_ret = gst_preset_get_property_names(Handle);
				string[] ret = Gst.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_preset_rename_preset(IntPtr raw, IntPtr old_name, IntPtr new_name);

		public bool RenamePreset(string old_name, string new_name) {
			IntPtr native_old_name = Gst.GLib.Marshaller.StringToPtrGStrdup (old_name);
			IntPtr native_new_name = Gst.GLib.Marshaller.StringToPtrGStrdup (new_name);
			bool raw_ret = gst_preset_rename_preset(Handle, native_old_name, native_new_name);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_old_name);
			Gst.GLib.Marshaller.Free (native_new_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_preset_set_meta(IntPtr raw, IntPtr name, IntPtr tag, IntPtr value);

		public bool SetMeta(string name, string tag, string value) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_tag = Gst.GLib.Marshaller.StringToPtrGStrdup (tag);
			IntPtr native_value = Gst.GLib.Marshaller.StringToPtrGStrdup (value);
			bool raw_ret = gst_preset_set_meta(Handle, native_name, native_tag, native_value);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_tag);
			Gst.GLib.Marshaller.Free (native_value);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_preset_load_preset(IntPtr raw, IntPtr name);

		public bool LoadPreset(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gst_preset_load_preset(Handle, native_name);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_preset_get_meta(IntPtr raw, IntPtr name, IntPtr tag, out IntPtr value);

		public bool GetMeta(string name, string tag, out string value) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_tag = Gst.GLib.Marshaller.StringToPtrGStrdup (tag);
			IntPtr native_value;
			bool raw_ret = gst_preset_get_meta(Handle, native_name, native_tag, out native_value);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_name);
			Gst.GLib.Marshaller.Free (native_tag);
			value = Gst.GLib.Marshaller.PtrToStringGFree(native_value);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_preset_get_preset_names(IntPtr raw);

		public string[] PresetNames { 
			get {
				IntPtr raw_ret = gst_preset_get_preset_names(Handle);
				string[] ret = Gst.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_preset_save_preset(IntPtr raw, IntPtr name);

		public bool SavePreset(string name) {
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gst_preset_save_preset(Handle, native_name);
			bool ret = raw_ret;
			Gst.GLib.Marshaller.Free (native_name);
			return ret;
		}

#endregion
	}
}

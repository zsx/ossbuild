// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Pad : Gst.Object {

		public Pad(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_new(IntPtr name, int direction);

		public Pad (string name, Gst.PadDirection direction) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pad)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("name");
				vals.Add (new Gst.GLib.Value (name));
				names.Add ("direction");
				vals.Add (new Gst.GLib.Value (direction));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (Gst.GLib.Value[])vals.ToArray (typeof (Gst.GLib.Value)));
				return;
			}
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gst_pad_new(native_name, (int) direction);
			Gst.GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_new_from_template(IntPtr templ, IntPtr name);

		public Pad (Gst.PadTemplate templ, string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Pad)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = Gst.GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gst_pad_new_from_template(templ == null ? IntPtr.Zero : templ.Handle, native_name);
			Gst.GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_caps(IntPtr raw);

		[Gst.GLib.Property ("caps")]
		public Gst.Caps Caps {
			get  {
				IntPtr raw_ret = gst_pad_get_caps(Handle);
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_get_direction(IntPtr raw);

		[Gst.GLib.Property ("direction")]
		public Gst.PadDirection Direction {
			get  {
				int raw_ret = gst_pad_get_direction(Handle);
				Gst.PadDirection ret = (Gst.PadDirection) raw_ret;
				return ret;
			}
		}

		[Gst.GLib.Property ("template")]
		public Gst.PadTemplate Template {
			get {
				Gst.GLib.Value val = GetProperty ("template");
				Gst.PadTemplate ret = (Gst.PadTemplate) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value(value);
				SetProperty("template", val);
				val.Dispose ();
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gstsharp_gst_pad_get_mode_offset ();

		static uint mode_offset = gstsharp_gst_pad_get_mode_offset ();
		public Gst.ActivateMode Mode {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + mode_offset);
					return (Gst.ActivateMode) (*raw_ptr);
				}
			}
		}

		[Gst.GLib.Signal("request-link")]
		public event System.EventHandler RequestLink {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "request-link");
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "request-link");
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("unlinked")]
		public event Gst.UnlinkedHandler Unlinked {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "unlinked", typeof (Gst.UnlinkedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "unlinked", typeof (Gst.UnlinkedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("have-data")]
		public event Gst.HaveDataHandler HaveData {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "have-data", typeof (Gst.HaveDataArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "have-data", typeof (Gst.HaveDataArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("linked")]
		public event Gst.LinkedHandler Linked {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "linked", typeof (Gst.LinkedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "linked", typeof (Gst.LinkedArgs));
				sig.RemoveDelegate (value);
			}
		}

		static LinkedNativeDelegate Linked_cb_delegate;
		static LinkedNativeDelegate LinkedVMCallback {
			get {
				if (Linked_cb_delegate == null)
					Linked_cb_delegate = new LinkedNativeDelegate (Linked_cb);
				return Linked_cb_delegate;
			}
		}

		static void OverrideLinked (Gst.GLib.GType gtype)
		{
			OverrideLinked (gtype, LinkedVMCallback);
		}

		static void OverrideLinked (Gst.GLib.GType gtype, LinkedNativeDelegate callback)
		{
			GstPadClass class_iface = GetClassStruct (gtype, false);
			class_iface.Linked = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LinkedNativeDelegate (IntPtr inst, IntPtr peer);

		static void Linked_cb (IntPtr inst, IntPtr peer)
		{
			try {
				Pad __obj = Gst.GLib.Object.GetObject (inst, false) as Pad;
				__obj.OnLinked (Gst.GLib.Object.GetObject(peer) as Gst.Pad);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Pad), ConnectionMethod="OverrideLinked")]
		protected virtual void OnLinked (Gst.Pad peer)
		{
			InternalLinked (peer);
		}

		private void InternalLinked (Gst.Pad peer)
		{
			LinkedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Linked;
			if (unmanaged == null) return;

			unmanaged (this.Handle, peer == null ? IntPtr.Zero : peer.Handle);
		}

		static UnlinkedNativeDelegate Unlinked_cb_delegate;
		static UnlinkedNativeDelegate UnlinkedVMCallback {
			get {
				if (Unlinked_cb_delegate == null)
					Unlinked_cb_delegate = new UnlinkedNativeDelegate (Unlinked_cb);
				return Unlinked_cb_delegate;
			}
		}

		static void OverrideUnlinked (Gst.GLib.GType gtype)
		{
			OverrideUnlinked (gtype, UnlinkedVMCallback);
		}

		static void OverrideUnlinked (Gst.GLib.GType gtype, UnlinkedNativeDelegate callback)
		{
			GstPadClass class_iface = GetClassStruct (gtype, false);
			class_iface.Unlinked = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UnlinkedNativeDelegate (IntPtr inst, IntPtr peer);

		static void Unlinked_cb (IntPtr inst, IntPtr peer)
		{
			try {
				Pad __obj = Gst.GLib.Object.GetObject (inst, false) as Pad;
				__obj.OnUnlinked (Gst.GLib.Object.GetObject(peer) as Gst.Pad);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Pad), ConnectionMethod="OverrideUnlinked")]
		protected virtual void OnUnlinked (Gst.Pad peer)
		{
			InternalUnlinked (peer);
		}

		private void InternalUnlinked (Gst.Pad peer)
		{
			UnlinkedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Unlinked;
			if (unmanaged == null) return;

			unmanaged (this.Handle, peer == null ? IntPtr.Zero : peer.Handle);
		}

		static RequestLinkNativeDelegate RequestLink_cb_delegate;
		static RequestLinkNativeDelegate RequestLinkVMCallback {
			get {
				if (RequestLink_cb_delegate == null)
					RequestLink_cb_delegate = new RequestLinkNativeDelegate (RequestLink_cb);
				return RequestLink_cb_delegate;
			}
		}

		static void OverrideRequestLink (Gst.GLib.GType gtype)
		{
			OverrideRequestLink (gtype, RequestLinkVMCallback);
		}

		static void OverrideRequestLink (Gst.GLib.GType gtype, RequestLinkNativeDelegate callback)
		{
			GstPadClass class_iface = GetClassStruct (gtype, false);
			class_iface.RequestLink = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RequestLinkNativeDelegate (IntPtr inst);

		static void RequestLink_cb (IntPtr inst)
		{
			try {
				Pad __obj = Gst.GLib.Object.GetObject (inst, false) as Pad;
				__obj.OnRequestLink ();
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Pad), ConnectionMethod="OverrideRequestLink")]
		protected virtual void OnRequestLink ()
		{
			InternalRequestLink ();
		}

		private void InternalRequestLink ()
		{
			RequestLinkNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RequestLink;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static HaveDataNativeDelegate HaveData_cb_delegate;
		static HaveDataNativeDelegate HaveDataVMCallback {
			get {
				if (HaveData_cb_delegate == null)
					HaveData_cb_delegate = new HaveDataNativeDelegate (HaveData_cb);
				return HaveData_cb_delegate;
			}
		}

		static void OverrideHaveData (Gst.GLib.GType gtype)
		{
			OverrideHaveData (gtype, HaveDataVMCallback);
		}

		static void OverrideHaveData (Gst.GLib.GType gtype, HaveDataNativeDelegate callback)
		{
			GstPadClass class_iface = GetClassStruct (gtype, false);
			class_iface.HaveData = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool HaveDataNativeDelegate (IntPtr inst, IntPtr data);

		static bool HaveData_cb (IntPtr inst, IntPtr data)
		{
			try {
				Pad __obj = Gst.GLib.Object.GetObject (inst, false) as Pad;
				bool __result = __obj.OnHaveData (Gst.MiniObject.GetObject (data));
				return __result;
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Pad), ConnectionMethod="OverrideHaveData")]
		protected virtual bool OnHaveData (Gst.MiniObject data)
		{
			return InternalHaveData (data);
		}

		private bool InternalHaveData (Gst.MiniObject data)
		{
			HaveDataNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).HaveData;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, data == null ? IntPtr.Zero : data.Handle);
			return __result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstPadClass {
			public LinkedNativeDelegate Linked;
			public UnlinkedNativeDelegate Unlinked;
			public RequestLinkNativeDelegate RequestLink;
			public HaveDataNativeDelegate HaveData;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstPadClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstPadClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstPadClass class_struct = (GstPadClass) Marshal.PtrToStructure (class_ptr, typeof (GstPadClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstPadClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_is_active(IntPtr raw);

		public bool IsActive { 
			get {
				bool raw_ret = gst_pad_is_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_get_range(IntPtr raw, ulong offset, uint size, IntPtr buffer);

		public Gst.FlowReturn GetRange(ulong offset, uint size, Gst.Buffer buffer) {
			int raw_ret = gst_pad_get_range(Handle, offset, size, buffer == null ? IntPtr.Zero : buffer.Handle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_activate_pull(IntPtr raw, bool active);

		public bool ActivatePull(bool active) {
			bool raw_ret = gst_pad_activate_pull(Handle, active);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_fixed_caps_func(IntPtr pad);

		public static Gst.Caps GetFixedCapsFunc(Gst.Pad pad) {
			IntPtr raw_ret = gst_pad_get_fixed_caps_func(pad == null ? IntPtr.Zero : pad.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), false);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_can_link(IntPtr raw, IntPtr sinkpad);

		public bool CanLink(Gst.Pad sinkpad) {
			bool raw_ret = gst_pad_can_link(Handle, sinkpad == null ? IntPtr.Zero : sinkpad.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_accept_caps(IntPtr raw, IntPtr caps);

		public bool AcceptCaps(Gst.Caps caps) {
			bool raw_ret = gst_pad_accept_caps(Handle, caps == null ? IntPtr.Zero : caps.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_alloc_buffer(IntPtr raw, ulong offset, int size, IntPtr caps, out IntPtr buf);

		public Gst.FlowReturn AllocBuffer(ulong offset, int size, Gst.Caps caps, out Gst.Buffer buf) {
			IntPtr native_buf;
			int raw_ret = gst_pad_alloc_buffer(Handle, offset, size, caps == null ? IntPtr.Zero : caps.Handle, out native_buf);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			buf = Gst.MiniObject.GetObject(native_buf, true) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_peer(IntPtr raw);

		public Gst.Pad Peer { 
			get {
				IntPtr raw_ret = gst_pad_get_peer(Handle);
				Gst.Pad ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Pad;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_link(IntPtr raw, IntPtr sinkpad);

		public Gst.PadLinkReturn Link(Gst.Pad sinkpad) {
			int raw_ret = gst_pad_link(Handle, sinkpad == null ? IntPtr.Zero : sinkpad.Handle);
			Gst.PadLinkReturn ret = (Gst.PadLinkReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_peer_duration(IntPtr raw, ref int format, out long duration);

		public bool QueryPeerDuration(ref Gst.Format format, out long duration) {
			int native_format = (int) format;
			bool raw_ret = gst_pad_query_peer_duration(Handle, ref native_format, out duration);
			bool ret = raw_ret;
			format = (Gst.Format) native_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pad_fixate_caps(IntPtr raw, IntPtr caps);

		public void FixateCaps(Gst.Caps caps) {
			gst_pad_fixate_caps(Handle, caps == null ? IntPtr.Zero : caps.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_negotiated_caps(IntPtr raw);

		public Gst.Caps NegotiatedCaps { 
			get {
				IntPtr raw_ret = gst_pad_get_negotiated_caps(Handle);
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_send_event(IntPtr raw, IntPtr evnt);

		public bool SendEvent(Gst.Event evnt) {
			bool raw_ret = gst_pad_send_event(Handle, evnt == null ? IntPtr.Zero : evnt.OwnedHandle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_pause_task(IntPtr raw);

		public bool PauseTask() {
			bool raw_ret = gst_pad_pause_task(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_pad_add_data_probe_full(IntPtr raw, GstSharp.PadDataProbeCallbackNative handler, IntPtr data, Gst.GLib.DestroyNotify notify);

		public ulong AddDataProbe(Gst.PadDataProbeCallback handler) {
			GstSharp.PadDataProbeCallbackWrapper handler_wrapper = new GstSharp.PadDataProbeCallbackWrapper (handler);
			IntPtr data;
			Gst.GLib.DestroyNotify notify;
			if (handler == null) {
				data = IntPtr.Zero;
				notify = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (handler_wrapper);
				notify = Gst.GLib.DestroyHelper.NotifyHandler;
			}
			UIntPtr raw_ret = gst_pad_add_data_probe_full(Handle, handler_wrapper.NativeDelegate, data, notify);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query(IntPtr raw, IntPtr query);

		public bool Query(Gst.Query query) {
			bool raw_ret = gst_pad_query(Handle, query == null ? IntPtr.Zero : query.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_is_blocking(IntPtr raw);

		public bool IsBlocking { 
			get {
				bool raw_ret = gst_pad_is_blocking(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_pad_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_default(IntPtr raw, IntPtr query);

		public bool QueryDefault(Gst.Query query) {
			bool raw_ret = gst_pad_query_default(Handle, query == null ? IntPtr.Zero : query.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_duration(IntPtr raw, ref int format, out long duration);

		public bool QueryDuration(ref Gst.Format format, out long duration) {
			int native_format = (int) format;
			bool raw_ret = gst_pad_query_duration(Handle, ref native_format, out duration);
			bool ret = raw_ret;
			format = (Gst.Format) native_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_push_list(IntPtr raw, IntPtr list);

		public Gst.FlowReturn PushList(Gst.BufferList list) {
			int raw_ret = gst_pad_push_list(Handle, list == null ? IntPtr.Zero : list.OwnedHandle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_unlink(IntPtr raw, IntPtr sinkpad);

		public bool Unlink(Gst.Pad sinkpad) {
			bool raw_ret = gst_pad_unlink(Handle, sinkpad == null ? IntPtr.Zero : sinkpad.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_peer_position(IntPtr raw, ref int format, out long cur);

		public bool QueryPeerPosition(ref Gst.Format format, out long cur) {
			int native_format = (int) format;
			bool raw_ret = gst_pad_query_peer_position(Handle, ref native_format, out cur);
			bool ret = raw_ret;
			format = (Gst.Format) native_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_chain_list(IntPtr raw, IntPtr list);

		public Gst.FlowReturn ChainList(Gst.BufferList list) {
			int raw_ret = gst_pad_chain_list(Handle, list == null ? IntPtr.Zero : list.OwnedHandle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_push_event(IntPtr raw, IntPtr evnt);

		public bool PushEvent(Gst.Event evnt) {
			bool raw_ret = gst_pad_push_event(Handle, evnt == null ? IntPtr.Zero : evnt.OwnedHandle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_proxy_setcaps(IntPtr pad, IntPtr caps);

		public static bool ProxySetCaps(Gst.Pad pad, Gst.Caps caps) {
			bool raw_ret = gst_pad_proxy_setcaps(pad == null ? IntPtr.Zero : pad.Handle, caps == null ? IntPtr.Zero : caps.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_alloc_buffer_and_set_caps(IntPtr raw, ulong offset, int size, IntPtr caps, out IntPtr buf);

		public Gst.FlowReturn AllocBufferAndSetCaps(ulong offset, int size, Gst.Caps caps, out Gst.Buffer buf) {
			IntPtr native_buf;
			int raw_ret = gst_pad_alloc_buffer_and_set_caps(Handle, offset, size, caps == null ? IntPtr.Zero : caps.Handle, out native_buf);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			buf = Gst.MiniObject.GetObject(native_buf, true) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_allowed_caps(IntPtr raw);

		public Gst.Caps AllowedCaps { 
			get {
				IntPtr raw_ret = gst_pad_get_allowed_caps(Handle);
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_pad_add_event_probe_full(IntPtr raw, GstSharp.PadEventProbeCallbackNative handler, IntPtr data, Gst.GLib.DestroyNotify notify);

		public ulong AddEventProbe(Gst.PadEventProbeCallback handler) {
			GstSharp.PadEventProbeCallbackWrapper handler_wrapper = new GstSharp.PadEventProbeCallbackWrapper (handler);
			IntPtr data;
			Gst.GLib.DestroyNotify notify;
			if (handler == null) {
				data = IntPtr.Zero;
				notify = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (handler_wrapper);
				notify = Gst.GLib.DestroyHelper.NotifyHandler;
			}
			UIntPtr raw_ret = gst_pad_add_event_probe_full(Handle, handler_wrapper.NativeDelegate, data, notify);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_peer_accept_caps(IntPtr raw, IntPtr caps);

		public bool PeerAcceptCaps(Gst.Caps caps) {
			bool raw_ret = gst_pad_peer_accept_caps(Handle, caps == null ? IntPtr.Zero : caps.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_push(IntPtr raw, IntPtr buffer);

		public Gst.FlowReturn Push(Gst.Buffer buffer) {
			int raw_ret = gst_pad_push(Handle, buffer == null ? IntPtr.Zero : buffer.OwnedHandle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_get_pad_template(IntPtr raw);

		public Gst.PadTemplate PadTemplate { 
			get {
				IntPtr raw_ret = gst_pad_get_pad_template(Handle);
				Gst.PadTemplate ret = Gst.GLib.Object.GetObject(raw_ret) as Gst.PadTemplate;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_position(IntPtr raw, ref int format, out long cur);

		public bool QueryPosition(ref Gst.Format format, out long cur) {
			int native_format = (int) format;
			bool raw_ret = gst_pad_query_position(Handle, ref native_format, out cur);
			bool ret = raw_ret;
			format = (Gst.Format) native_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_stop_task(IntPtr raw);

		public bool StopTask() {
			bool raw_ret = gst_pad_stop_task(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_peer_get_caps(IntPtr raw);

		public Gst.Caps PeerGetCaps() {
			IntPtr raw_ret = gst_pad_peer_get_caps(Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_peer_convert(IntPtr raw, int src_format, long src_val, ref int dest_format, out long dest_val);

		public bool QueryPeerConvert(Gst.Format src_format, long src_val, ref Gst.Format dest_format, out long dest_val) {
			int native_dest_format = (int) dest_format;
			bool raw_ret = gst_pad_query_peer_convert(Handle, (int) src_format, src_val, ref native_dest_format, out dest_val);
			bool ret = raw_ret;
			dest_format = (Gst.Format) native_dest_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_pad_use_fixed_caps(IntPtr raw);

		public void UseFixedCaps() {
			gst_pad_use_fixed_caps(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_set_blocked_async_full(IntPtr raw, bool blocked, GstSharp.PadBlockCallbackNative cb, IntPtr user_data, Gst.GLib.DestroyNotify destroy_data);

		public bool SetBlocked(bool blocked, Gst.PadBlockCallback cb) {
			GstSharp.PadBlockCallbackWrapper cb_wrapper = new GstSharp.PadBlockCallbackWrapper (cb);
			IntPtr user_data;
			Gst.GLib.DestroyNotify destroy_data;
			if (cb == null) {
				user_data = IntPtr.Zero;
				destroy_data = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				destroy_data = Gst.GLib.DestroyHelper.NotifyHandler;
			}
			bool raw_ret = gst_pad_set_blocked_async_full(Handle, blocked, cb_wrapper.NativeDelegate, user_data, destroy_data);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_event_default(IntPtr raw, IntPtr evnt);

		public bool EventDefault(Gst.Event evnt) {
			bool raw_ret = gst_pad_event_default(Handle, evnt == null ? IntPtr.Zero : evnt.OwnedHandle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_dispatcher(IntPtr raw, GstSharp.PadDispatcherFunctionNative dispatch, IntPtr data);

		public bool Dispatcher(Gst.PadDispatcherFunction dispatch) {
			GstSharp.PadDispatcherFunctionWrapper dispatch_wrapper = new GstSharp.PadDispatcherFunctionWrapper (dispatch);
			bool raw_ret = gst_pad_dispatcher(Handle, dispatch_wrapper.NativeDelegate, IntPtr.Zero);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_peer_query(IntPtr raw, IntPtr query);

		public bool PeerQuery(Gst.Query query) {
			bool raw_ret = gst_pad_peer_query(Handle, query == null ? IntPtr.Zero : query.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_is_linked(IntPtr raw);

		public bool IsLinked { 
			get {
				bool raw_ret = gst_pad_is_linked(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_check_pull_range(IntPtr raw);

		public bool CheckPullRange() {
			bool raw_ret = gst_pad_check_pull_range(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_query_convert(IntPtr raw, int src_format, long src_val, ref int dest_format, out long dest_val);

		public bool QueryConvert(Gst.Format src_format, long src_val, ref Gst.Format dest_format, out long dest_val) {
			int native_dest_format = (int) dest_format;
			bool raw_ret = gst_pad_query_convert(Handle, (int) src_format, src_val, ref native_dest_format, out dest_val);
			bool ret = raw_ret;
			dest_format = (Gst.Format) native_dest_format;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_activate_push(IntPtr raw, bool active);

		public bool ActivatePush(bool active) {
			bool raw_ret = gst_pad_activate_push(Handle, active);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_set_caps(IntPtr raw, IntPtr caps);

		public bool SetCaps(Gst.Caps caps) {
			bool raw_ret = gst_pad_set_caps(Handle, caps == null ? IntPtr.Zero : caps.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_set_active(IntPtr raw, bool active);

		public bool SetActive(bool active) {
			bool raw_ret = gst_pad_set_active(Handle, active);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_set_blocked(IntPtr raw, bool blocked);

		public bool SetBlocked(bool blocked) {
			bool raw_ret = gst_pad_set_blocked(Handle, blocked);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_is_blocked(IntPtr raw);

		public bool IsBlocked { 
			get {
				bool raw_ret = gst_pad_is_blocked(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_proxy_getcaps(IntPtr pad);

		public static Gst.Caps ProxyGetCaps(Gst.Pad pad) {
			IntPtr raw_ret = gst_pad_proxy_getcaps(pad == null ? IntPtr.Zero : pad.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), false);
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_pad_add_buffer_probe_full(IntPtr raw, GstSharp.PadBufferProbeCallbackNative handler, IntPtr data, Gst.GLib.DestroyNotify notify);

		public ulong AddBufferProbe(Gst.PadBufferProbeCallback handler) {
			GstSharp.PadBufferProbeCallbackWrapper handler_wrapper = new GstSharp.PadBufferProbeCallbackWrapper (handler);
			IntPtr data;
			Gst.GLib.DestroyNotify notify;
			if (handler == null) {
				data = IntPtr.Zero;
				notify = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (handler_wrapper);
				notify = Gst.GLib.DestroyHelper.NotifyHandler;
			}
			UIntPtr raw_ret = gst_pad_add_buffer_probe_full(Handle, handler_wrapper.NativeDelegate, data, notify);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_pad_chain(IntPtr raw, IntPtr buffer);

		public Gst.FlowReturn Chain(Gst.Buffer buffer) {
			int raw_ret = gst_pad_chain(Handle, buffer == null ? IntPtr.Zero : buffer.OwnedHandle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_pad_iterate_internal_links(IntPtr raw);

		public Gst.Iterator InternalLinks { 
			get {
				IntPtr raw_ret = gst_pad_iterate_internal_links(Handle);
				Gst.Iterator ret = raw_ret == IntPtr.Zero ? null : (Gst.Iterator) Gst.GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Iterator), false);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_pad_start_task(IntPtr raw, GstSharp.TaskFunctionNative func, IntPtr data);

		public bool StartTask(Gst.TaskFunction func) {
			GstSharp.TaskFunctionWrapper func_wrapper = new GstSharp.TaskFunctionWrapper (func);
			bool raw_ret = gst_pad_start_task(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
			bool ret = raw_ret;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Pad.custom"
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_pad_get_pad_template_caps (IntPtr raw);
[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_caps_copy (IntPtr raw);

public Gst.Caps PadTemplateCaps {
  get {
    IntPtr raw_ret = gst_pad_get_pad_template_caps (Handle);
    Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) Gst.GLib.Opaque.GetOpaque (gst_caps_copy (raw_ret), typeof (Gst.Caps), false);
    return ret;
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_remove_data_probe (IntPtr raw, uint handler_id);

public void RemoveDataProbe (ulong handler_id) {
  gst_pad_remove_data_probe (Handle, (uint) handler_id);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_remove_event_probe (IntPtr raw, uint handler_id);

public void RemoveEventProbe (ulong handler_id) {
  gst_pad_remove_event_probe (Handle, (uint) handler_id);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_remove_buffer_probe (IntPtr raw, uint handler_id);

public void RemoveBufferProbe (ulong handler_id) {
  gst_pad_remove_buffer_probe (Handle, (uint) handler_id);
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_bufferalloc_function (IntPtr raw, GstSharp.PadBufferAllocFunctionNative bufalloc);

public Gst.PadBufferAllocFunction BufferAllocFunction {
  set {
    if (PersistentData["BufferAllocFunction"] != null)
      PersistentData["BufferAllocFunction"] = null;

    GstSharp.PadBufferAllocFunctionWrapper value_wrapper = new GstSharp.PadBufferAllocFunctionWrapper (value);
    PersistentData["BufferAllocFunction"] = value_wrapper;
    gst_pad_set_bufferalloc_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_chain_function (IntPtr raw, GstSharp.PadChainFunctionNative chain);

public Gst.PadChainFunction ChainFunction {
  set {
    if (PersistentData["ChainFunction"] != null)
      PersistentData["ChainFunction"] = null;

    GstSharp.PadChainFunctionWrapper value_wrapper = new GstSharp.PadChainFunctionWrapper (value);
    PersistentData["ChainFunction"] = value_wrapper;
    gst_pad_set_chain_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_chain_list_function (IntPtr raw, GstSharp.PadChainListFunctionNative chain);

public Gst.PadChainListFunction ChainListFunction {
  set {
    if (PersistentData["ChainListFunction"] != null)
      PersistentData["ChainListFunction"] = null;

    GstSharp.PadChainListFunctionWrapper value_wrapper = new GstSharp.PadChainListFunctionWrapper (value);
    PersistentData["ChainListFunction"] = value_wrapper;
    gst_pad_set_chain_list_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_checkgetrange_function (IntPtr raw, GstSharp.PadCheckGetRangeFunctionNative check);

public Gst.PadCheckGetRangeFunction CheckGetRangeFunction {
  set {
    if (PersistentData["CheckGetRangeFunction"] != null)
      PersistentData["CheckGetRangeFunction"] = null;

    GstSharp.PadCheckGetRangeFunctionWrapper value_wrapper = new GstSharp.PadCheckGetRangeFunctionWrapper (value);
    PersistentData["CheckGetRangeFunction"] = value_wrapper;
    gst_pad_set_checkgetrange_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_getrange_function (IntPtr raw, GstSharp.PadGetRangeFunctionNative get);

public Gst.PadGetRangeFunction GetRangeFunction {
  set {
    if (PersistentData["GetRangeFunction"] != null)
      PersistentData["GetRangeFunction"] = null;

    GstSharp.PadGetRangeFunctionWrapper value_wrapper = new GstSharp.PadGetRangeFunctionWrapper (value);
    PersistentData["GetRangeFunction"] = value_wrapper;
    gst_pad_set_getrange_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_event_function (IntPtr raw, GstSharp.PadEventFunctionNative evnt);

public Gst.PadEventFunction EventFunction {
  set {
    if (PersistentData["EventFunction"] != null)
      PersistentData["EventFunction"] = null;

    GstSharp.PadEventFunctionWrapper value_wrapper = new GstSharp.PadEventFunctionWrapper (value);
    PersistentData["EventFunction"] = value_wrapper;
    gst_pad_set_event_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_link_function (IntPtr raw, GstSharp.PadLinkFunctionNative link);

public Gst.PadLinkFunction LinkFunction {
  set {
    if (PersistentData["LinkFunction"] != null)
      PersistentData["LinkFunction"] = null;

    GstSharp.PadLinkFunctionWrapper value_wrapper = new GstSharp.PadLinkFunctionWrapper (value);
    PersistentData["LinkFunction"] = value_wrapper;
    gst_pad_set_link_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_unlink_function (IntPtr raw, GstSharp.PadUnlinkFunctionNative unlink);

public Gst.PadUnlinkFunction UnlinkFunction {
  set {
    if (PersistentData["UnlinkFunction"] != null)
      PersistentData["UnlinkFunction"] = null;

    GstSharp.PadUnlinkFunctionWrapper value_wrapper = new GstSharp.PadUnlinkFunctionWrapper (value);
    PersistentData["UnlinkFunction"] = value_wrapper;
    gst_pad_set_unlink_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_acceptcaps_function (IntPtr raw, GstSharp.PadAcceptCapsFunctionNative acceptcaps);

public Gst.PadAcceptCapsFunction AcceptCapsFunction {
  set {
    if (PersistentData["AcceptCapsFunction"] != null)
      PersistentData["AcceptCapsFunction"] = null;

    GstSharp.PadAcceptCapsFunctionWrapper value_wrapper = new GstSharp.PadAcceptCapsFunctionWrapper (value);
    PersistentData["AcceptCapsFunction"] = value_wrapper;
    gst_pad_set_acceptcaps_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_getcaps_function (IntPtr raw, GstSharp.PadGetCapsFunctionNative getcaps);

public Gst.PadGetCapsFunction GetCapsFunction {
  set {
    if (PersistentData["GetCapsFunction"] != null)
      PersistentData["GetCapsFunction"] = null;

    GstSharp.PadGetCapsFunctionWrapper value_wrapper = new GstSharp.PadGetCapsFunctionWrapper (value);
    PersistentData["GetCapsFunction"] = value_wrapper;
    gst_pad_set_getcaps_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_setcaps_function (IntPtr raw, GstSharp.PadSetCapsFunctionNative setcaps);

public Gst.PadSetCapsFunction SetCapsFunction {
  set {
    if (PersistentData["SetCapsFunction"] != null)
      PersistentData["SetCapsFunction"] = null;

    GstSharp.PadSetCapsFunctionWrapper value_wrapper = new GstSharp.PadSetCapsFunctionWrapper (value);
    PersistentData["SetCapsFunction"] = value_wrapper;
    gst_pad_set_setcaps_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_fixatecaps_function (IntPtr raw, GstSharp.PadFixateCapsFunctionNative fixatecaps);

public Gst.PadFixateCapsFunction FixateCapsFunction {
  set {
    if (PersistentData["FixateCapsFunction"] != null)
      PersistentData["FixateCapsFunction"] = null;

    GstSharp.PadFixateCapsFunctionWrapper value_wrapper = new GstSharp.PadFixateCapsFunctionWrapper (value);
    PersistentData["FixateCapsFunction"] = value_wrapper;
    gst_pad_set_fixatecaps_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_activate_function (IntPtr raw, GstSharp.PadActivateFunctionNative activate);

public Gst.PadActivateFunction ActivateFunction {
  set {
    if (PersistentData["ActivateFunction"] != null)
      PersistentData["ActivateFunction"] = null;

    GstSharp.PadActivateFunctionWrapper value_wrapper = new GstSharp.PadActivateFunctionWrapper (value);
    PersistentData["ActivateFunction"] = value_wrapper;
    gst_pad_set_activate_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_activatepull_function (IntPtr raw, GstSharp.PadActivateModeFunctionNative activatepull);

public Gst.PadActivateModeFunction ActivatePullFunction {
  set {
    if (PersistentData["ActivatePullFunction"] != null)
      PersistentData["ActivatePullFunction"] = null;

    GstSharp.PadActivateModeFunctionWrapper value_wrapper = new GstSharp.PadActivateModeFunctionWrapper (value);
    PersistentData["ActivatePullFunction"] = value_wrapper;
    gst_pad_set_activatepull_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_activatepush_function (IntPtr raw, GstSharp.PadActivateModeFunctionNative activatepush);

public Gst.PadActivateModeFunction ActivatePushFunction {
  set {
    if (PersistentData["ActivatePushFunction"] != null)
      PersistentData["ActivatePushFunction"] = null;

    GstSharp.PadActivateModeFunctionWrapper value_wrapper = new GstSharp.PadActivateModeFunctionWrapper (value);
    PersistentData["ActivatePushFunction"] = value_wrapper;
    gst_pad_set_activatepush_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern int gst_pad_pull_range (IntPtr raw, ulong offset, uint size, out IntPtr buffer);

public Gst.FlowReturn PullRange (ulong offset, uint size, out Gst.Buffer buffer) {
  IntPtr native_buffer;
  int raw_ret = gst_pad_pull_range (Handle, offset, size, out native_buffer);
  Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
  buffer = native_buffer == IntPtr.Zero ? null : (Gst.Buffer) Gst.MiniObject.GetObject (native_buffer, true);
  return ret;

}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_query_function (IntPtr raw, GstSharp.PadQueryFunctionNative query);

public Gst.PadQueryFunction QueryFunction {
  set {
    if (PersistentData["QueryFunction"] != null)
      PersistentData["QueryFunction"] = null;

    GstSharp.PadQueryFunctionWrapper value_wrapper = new GstSharp.PadQueryFunctionWrapper (value);
    PersistentData["QueryFunction"] = value_wrapper;
    gst_pad_set_query_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern void gst_pad_set_query_type_function (IntPtr raw, GstSharp.PadQueryTypeFunctionNative query);

public Gst.PadQueryTypeFunction QueryTypeFunction {
  set {
    if (PersistentData["QueryTypeFunction"] != null)
      PersistentData["QueryTypeFunction"] = null;

    GstSharp.PadQueryTypeFunctionWrapper value_wrapper = new GstSharp.PadQueryTypeFunctionWrapper (value);
    PersistentData["QueryTypeFunction"] = value_wrapper;
    gst_pad_set_query_type_function (Handle, value_wrapper.NativeDelegate);
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_pad_get_query_types (IntPtr raw);

public Gst.QueryType[] QueryTypes {
  get {
    IntPtr raw_ret = gst_pad_get_query_types (Handle);
    if (raw_ret == IntPtr.Zero)
      return new Gst.QueryType[] {};

    ArrayList result = new ArrayList ();
    bool term = false;
    int ofs = 0;
    while (!term) {
      Gst.QueryType t = (Gst.QueryType) Marshal.ReadInt32 (raw_ret, ofs);
      if (t == Gst.QueryType.None) {
        term = true;
      } else {
        result.Add (t);
        ofs += 4;
      }
    }

    return (Gst.QueryType[]) result.ToArray (typeof (Gst.QueryType));
  }
}

[DllImport ("libgstreamer-0.10.dll") ]
static extern IntPtr gst_pad_get_query_types_default (IntPtr raw);

static Gst.QueryType[] GetQueryTypesDefault (Gst.Pad pad) {
  IntPtr raw_ret = gst_pad_get_query_types_default ( (pad != null) ? pad.Handle : IntPtr.Zero);
  if (raw_ret == IntPtr.Zero)
    return new Gst.QueryType[] {};

  ArrayList result = new ArrayList ();
  bool term = false;
  int ofs = 0;
  while (!term) {
    Gst.QueryType t = (Gst.QueryType) Marshal.ReadInt32 (raw_ret, ofs);
    if (t == Gst.QueryType.None) {
      term = true;
    } else {
      result.Add (t);
      ofs += 4;
    }
  }

  return (Gst.QueryType[]) result.ToArray (typeof (Gst.QueryType));
}

[DllImport ("gstreamersharpglue-0.10.dll") ]
extern static uint gstsharp_gst_pad_get_stream_lock_offset ();

static uint stream_lock_offset = gstsharp_gst_pad_get_stream_lock_offset ();
private IntPtr StreamLockPtr {
  get {
    unsafe {
      IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + stream_lock_offset);
      return (*raw_ptr);
    }
  }
}

[DllImport ("libglib-2.0-0.dll") ]
static extern void g_static_rec_mutex_lock (IntPtr mutex);
[DllImport ("libglib-2.0-0.dll") ]
static extern void g_static_rec_mutex_unlock (IntPtr mutex);
[DllImport ("libglib-2.0-0.dll") ]
static extern void g_static_rec_mutex_lock_full (IntPtr mutex, uint depth);
[DllImport ("libglib-2.0-0.dll") ]
static extern void g_static_rec_mutex_unlock_full (IntPtr mutex, uint depth);
[DllImport ("libglib-2.0-0.dll") ]
static extern bool g_static_rec_mutex_trylock (IntPtr mutex);

public void StreamLock () {
  g_static_rec_mutex_lock (StreamLockPtr);
}

public void StreamUnlock () {
  g_static_rec_mutex_unlock (StreamLockPtr);
}

public void StreamLock (uint depth) {
  g_static_rec_mutex_lock_full (StreamLockPtr, depth);
}

public void StreamUnlock (uint depth) {
  g_static_rec_mutex_unlock_full (StreamLockPtr, depth);
}

public bool StreamTryLock () {
  return g_static_rec_mutex_trylock (StreamLockPtr);
}

#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Interfaces {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TunerChannel : Gst.GLib.Object {

		public TunerChannel(IntPtr raw) : base(raw) {}

		protected TunerChannel() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_label_offset ();

		static uint label_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_label_offset ();
		public string Label {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + label_offset);
					return Gst.GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_min_signal_offset ();

		static uint min_signal_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_min_signal_offset ();
		public int MinSignal {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + min_signal_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_min_frequency_offset ();

		static uint min_frequency_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_min_frequency_offset ();
		public ulong MinFrequency {
			get {
				unsafe {
					UIntPtr* raw_ptr = (UIntPtr*)(((byte*)Handle) + min_frequency_offset);
					return (ulong) (*raw_ptr);
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_max_frequency_offset ();

		static uint max_frequency_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_max_frequency_offset ();
		public ulong MaxFrequency {
			get {
				unsafe {
					UIntPtr* raw_ptr = (UIntPtr*)(((byte*)Handle) + max_frequency_offset);
					return (ulong) (*raw_ptr);
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_freq_multiplicator_offset ();

		static uint freq_multiplicator_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_freq_multiplicator_offset ();
		public float FreqMultiplicator {
			get {
				unsafe {
					float* raw_ptr = (float*)(((byte*)Handle) + freq_multiplicator_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_flags_offset ();

		static uint flags_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_flags_offset ();
		public Gst.Interfaces.TunerChannelFlags Flags {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + flags_offset);
					return (Gst.Interfaces.TunerChannelFlags) (*raw_ptr);
				}
			}
		}

		[DllImport ("gstreamersharpglue-0.10.dll")]
		extern static uint gst__interfacessharp_gst__interfaces_tunerchannel_get_max_signal_offset ();

		static uint max_signal_offset = gst__interfacessharp_gst__interfaces_tunerchannel_get_max_signal_offset ();
		public int MaxSignal {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + max_signal_offset);
					return (*raw_ptr);
				}
			}
		}

		[Gst.GLib.Signal("signal-changed")]
		public event Gst.Interfaces.SignalChangedHandler SignalChanged {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "signal-changed", typeof (Gst.Interfaces.SignalChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "signal-changed", typeof (Gst.Interfaces.SignalChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[Gst.GLib.Signal("frequency-changed")]
		public event Gst.Interfaces.FrequencyChangedHandler FrequencyChanged {
			add {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "frequency-changed", typeof (Gst.Interfaces.FrequencyChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				Gst.GLib.Signal sig = Gst.GLib.Signal.Lookup (this, "frequency-changed", typeof (Gst.Interfaces.FrequencyChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		static FrequencyChangedNativeDelegate FrequencyChanged_cb_delegate;
		static FrequencyChangedNativeDelegate FrequencyChangedVMCallback {
			get {
				if (FrequencyChanged_cb_delegate == null)
					FrequencyChanged_cb_delegate = new FrequencyChangedNativeDelegate (FrequencyChanged_cb);
				return FrequencyChanged_cb_delegate;
			}
		}

		static void OverrideFrequencyChanged (Gst.GLib.GType gtype)
		{
			OverrideFrequencyChanged (gtype, FrequencyChangedVMCallback);
		}

		static void OverrideFrequencyChanged (Gst.GLib.GType gtype, FrequencyChangedNativeDelegate callback)
		{
			GstTunerChannelClass class_iface = GetClassStruct (gtype, false);
			class_iface.FrequencyChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FrequencyChangedNativeDelegate (IntPtr inst, UIntPtr frequency);

		static void FrequencyChanged_cb (IntPtr inst, UIntPtr frequency)
		{
			try {
				TunerChannel __obj = Gst.GLib.Object.GetObject (inst, false) as TunerChannel;
				__obj.OnFrequencyChanged ((ulong) frequency);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Interfaces.TunerChannel), ConnectionMethod="OverrideFrequencyChanged")]
		protected virtual void OnFrequencyChanged (ulong frequency)
		{
			InternalFrequencyChanged (frequency);
		}

		private void InternalFrequencyChanged (ulong frequency)
		{
			FrequencyChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).FrequencyChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, new UIntPtr (frequency));
		}

		static SignalChangedNativeDelegate SignalChanged_cb_delegate;
		static SignalChangedNativeDelegate SignalChangedVMCallback {
			get {
				if (SignalChanged_cb_delegate == null)
					SignalChanged_cb_delegate = new SignalChangedNativeDelegate (SignalChanged_cb);
				return SignalChanged_cb_delegate;
			}
		}

		static void OverrideSignalChanged (Gst.GLib.GType gtype)
		{
			OverrideSignalChanged (gtype, SignalChangedVMCallback);
		}

		static void OverrideSignalChanged (Gst.GLib.GType gtype, SignalChangedNativeDelegate callback)
		{
			GstTunerChannelClass class_iface = GetClassStruct (gtype, false);
			class_iface.SignalChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SignalChangedNativeDelegate (IntPtr inst, int signal);

		static void SignalChanged_cb (IntPtr inst, int signal)
		{
			try {
				TunerChannel __obj = Gst.GLib.Object.GetObject (inst, false) as TunerChannel;
				__obj.OnSignalChanged (signal);
			} catch (Exception e) {
				Gst.GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[Gst.GLib.DefaultSignalHandler(Type=typeof(Gst.Interfaces.TunerChannel), ConnectionMethod="OverrideSignalChanged")]
		protected virtual void OnSignalChanged (int signal)
		{
			InternalSignalChanged (signal);
		}

		private void InternalSignalChanged (int signal)
		{
			SignalChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SignalChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, signal);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstTunerChannelClass {
			public FrequencyChangedNativeDelegate FrequencyChanged;
			public SignalChangedNativeDelegate SignalChanged;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.GLib.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GstTunerChannelClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstTunerChannelClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstTunerChannelClass class_struct = (GstTunerChannelClass) Marshal.PtrToStructure (class_ptr, typeof (GstTunerChannelClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstTunerChannelClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstinterfaces-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_tuner_channel_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_tuner_channel_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}


		static TunerChannel ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "TunerChannel.custom"
public TunerChannel (string label, TunerChannelFlags flags, float freq_multiplicator, ulong min_frequency, ulong max_frequency, int min_signal, int max_signal) {
  unsafe {
    IntPtr* raw_ptr = (IntPtr*) ( ( (byte*) Handle) + label_offset);
    *raw_ptr = Gst.GLib.Marshaller.StringToPtrGStrdup (label);

  }
  unsafe {
    int* raw_ptr = (int*) ( ( (byte*) Handle) + flags_offset);
    *raw_ptr = (int) flags;
  }
  unsafe {
    float* raw_ptr = (float*) ( ( (byte*) Handle) + freq_multiplicator_offset);
    *raw_ptr = freq_multiplicator;
  }
  unsafe {
    UIntPtr* raw_ptr = (UIntPtr*) ( ( (byte*) Handle) + min_frequency_offset);
    *raw_ptr = (UIntPtr) min_frequency;
  }
  unsafe {
    UIntPtr* raw_ptr = (UIntPtr*) ( ( (byte*) Handle) + max_frequency_offset);
    *raw_ptr = (UIntPtr) max_frequency;
  }
  unsafe {
    int* raw_ptr = (int*) ( ( (byte*) Handle) + min_signal_offset);
    *raw_ptr = min_signal;
  }
  unsafe {
    int* raw_ptr = (int*) ( ( (byte*) Handle) + max_signal_offset);
    *raw_ptr = max_signal;
  }
}

#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class BufferListIterator : Gst.GLib.Opaque {

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_list_iterator_take(IntPtr raw, IntPtr buffer);

		public void Take(Gst.Buffer buffer) {
			gst_buffer_list_iterator_take(Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_list_iterator_add_group(IntPtr raw);

		public void AddGroup() {
			gst_buffer_list_iterator_add_group(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_iterator_do(IntPtr raw, GstSharp.BufferListDoFunctionNative do_func, IntPtr user_data);

		public Gst.Buffer Do(Gst.BufferListDoFunction do_func) {
			GstSharp.BufferListDoFunctionWrapper do_func_wrapper = new GstSharp.BufferListDoFunctionWrapper (do_func);
			IntPtr raw_ret = gst_buffer_list_iterator_do(Handle, do_func_wrapper.NativeDelegate, IntPtr.Zero);
			Gst.Buffer ret = Gst.MiniObject.GetObject(raw_ret) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_list_iterator_remove(IntPtr raw);

		public void Remove() {
			gst_buffer_list_iterator_remove(Handle);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_iterator_steal(IntPtr raw);

		public Gst.Buffer Steal() {
			IntPtr raw_ret = gst_buffer_list_iterator_steal(Handle);
			Gst.Buffer ret = Gst.MiniObject.GetObject(raw_ret) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_buffer_list_iterator_n_buffers(IntPtr raw);

		public uint NBuffers() {
			uint raw_ret = gst_buffer_list_iterator_n_buffers(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_buffer_list_iterator_next_group(IntPtr raw);

		public bool NextGroup() {
			bool raw_ret = gst_buffer_list_iterator_next_group(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_iterator_next(IntPtr raw);

		public Gst.Buffer Next() {
			IntPtr raw_ret = gst_buffer_list_iterator_next(Handle);
			Gst.Buffer ret = Gst.MiniObject.GetObject(raw_ret) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_list_iterator_merge_group(IntPtr raw);

		public Gst.Buffer MergeGroup() {
			IntPtr raw_ret = gst_buffer_list_iterator_merge_group(Handle);
			Gst.Buffer ret = Gst.MiniObject.GetObject(raw_ret) as Gst.Buffer;
			return ret;
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_list_iterator_add(IntPtr raw, IntPtr buffer);

		public void Add(Gst.Buffer buffer) {
			gst_buffer_list_iterator_add(Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		public BufferListIterator(IntPtr raw) : base(raw) {}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_list_iterator_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gst_buffer_list_iterator_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gst_buffer_list_iterator_free (handle);
				return false;
			}
		}

		~BufferListIterator ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			Gst.GLib.Timeout.Add (50, new Gst.GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}

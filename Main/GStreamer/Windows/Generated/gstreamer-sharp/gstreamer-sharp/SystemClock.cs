// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SystemClock : Gst.Clock {

		public SystemClock(IntPtr raw) : base(raw) {}

		protected SystemClock() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new Gst.GLib.Value [0]);
		}

		[Gst.GLib.Property ("clock-type")]
		public Gst.ClockType ClockType {
			get {
				Gst.GLib.Value val = GetProperty ("clock-type");
				Gst.ClockType ret = (Gst.ClockType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				Gst.GLib.Value val = new Gst.GLib.Value((Enum) value);
				SetProperty("clock-type", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GstSystemClockClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			public IntPtr[] GstReserved;
		}

		static uint class_offset = ((Gst.GLib.GType) typeof (Gst.Clock)).GetClassSize ();
		static Hashtable class_structs;

		static GstSystemClockClass GetClassStruct (Gst.GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GstSystemClockClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GstSystemClockClass class_struct = (GstSystemClockClass) Marshal.PtrToStructure (class_ptr, typeof (GstSystemClockClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (Gst.GLib.GType gtype, GstSystemClockClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_system_clock_get_type();

		public static new Gst.GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_system_clock_get_type();
				Gst.GLib.GType ret = new Gst.GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgstreamer-0.10.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_system_clock_obtain();

		public static Gst.Clock Obtain() {
			IntPtr raw_ret = gst_system_clock_obtain();
			Gst.Clock ret = Gst.GLib.Object.GetObject(raw_ret, true) as Gst.Clock;
			return ret;
		}

#endregion
	}
}
